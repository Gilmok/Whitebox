// $ANTLR 3.0.1 C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g 2008-01-25 16:54:56

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.debug.*;
import java.io.IOException;

import org.antlr.runtime.tree.*;

/** A Java 1.5 grammar for ANTLR v3 derived from the spec
 *
 *  This is a very close representation of the spec; the changes
 *  are comestic (remove left recursion) and also fixes (the spec
 *  isn't exactly perfect).  I have run this on the 1.4.2 source
 *  and some nasty looking enums from 1.5, but have not really
 *  tested for 1.5 compatibility.
 *
 *  I built this with: java -Xmx100M org.antlr.Tool java.g 
 *  and got two errors that are ok (for now):
 *  java.g:691:9: Decision can match input such as
 *    "'0'..'9'{'E', 'e'}{'+', '-'}'0'..'9'{'D', 'F', 'd', 'f'}"
 *    using multiple alternatives: 3, 4
 *  As a result, alternative(s) 4 were disabled for that input
 *  java.g:734:35: Decision can match input such as "{'$', 'A'..'Z',
 *    '_', 'a'..'z', '\u00C0'..'\u00D6', '\u00D8'..'\u00F6',
 *    '\u00F8'..'\u1FFF', '\u3040'..'\u318F', '\u3300'..'\u337F',
 *    '\u3400'..'\u3D2D', '\u4E00'..'\u9FFF', '\uF900'..'\uFAFF'}"
 *    using multiple alternatives: 1, 2
 *  As a result, alternative(s) 2 were disabled for that input
 *
 *  You can turn enum on/off as a keyword :)
 *
 *  Version 1.0 -- initial release July 5, 2006 (requires 3.0b2 or higher)
 *
 *  Primary author: Terence Parr, July 2006
 *
 *  Version 1.0.1 -- corrections by Koen Vanderkimpen & Marko van Dooren,
 *      October 25, 2006;
 *      fixed normalInterfaceDeclaration: now uses typeParameters instead
 *          of typeParameter (according to JLS, 3rd edition)
 *      fixed castExpression: no longer allows expression next to type
 *          (according to semantics in JLS, in contrast with syntax in JLS)
 *
 *  Version 1.0.2 -- Terence Parr, Nov 27, 2006
 *      java spec I built this from had some bizarre for-loop control.
 *          Looked weird and so I looked elsewhere...Yep, it's messed up.
 *          simplified.
 *
 *  Version 1.0.3 -- Chris Hogue, Feb 26, 2007
 *      Factored out an annotationName rule and used it in the annotation rule.
 *          Not sure why, but typeName wasn't recognizing references to inner
 *          annotations (e.g. @InterfaceName.InnerAnnotation())
 *      Factored out the elementValue section of an annotation reference.  Created 
 *          elementValuePair and elementValuePairs rules, then used them in the 
 *          annotation rule.  Allows it to recognize annotation references with 
 *          multiple, comma separated attributes.
 *      Updated elementValueArrayInitializer so that it allows multiple elements.
 *          (It was only allowing 0 or 1 element).
 *      Updated localVariableDeclaration to allow annotations.  Interestingly the JLS
 *          doesn't appear to indicate this is legal, but it does work as of at least
 *          JDK 1.5.0_06.
 *      Moved the Identifier portion of annotationTypeElementRest to annotationMethodRest.
 *          Because annotationConstantRest already references variableDeclarator which 
 *          has the Identifier portion in it, the parser would fail on constants in 
 *          annotation definitions because it expected two identifiers.  
 *      Added optional trailing ';' to the alternatives in annotationTypeElementRest.
 *          Wouldn't handle an inner interface that has a trailing ';'.
 *      Swapped the expression and type rule reference order in castExpression to 
 *          make it check for genericized casts first.  It was failing to recognize a
 *          statement like  "Class<Byte> TYPE = (Class<Byte>)...;" because it was seeing
 *          'Class<Byte' in the cast expression as a less than expression, then failing 
 *          on the '>'.
 *      Changed createdName to use typeArguments instead of nonWildcardTypeArguments.
 *          Again, JLS doesn't seem to allow this, but java.lang.Class has an example of
 *          of this construct.
 *      Changed the 'this' alternative in primary to allow 'identifierSuffix' rather than
 *          just 'arguments'.  The case it couldn't handle was a call to an explicit
 *          generic method invocation (e.g. this.<E>doSomething()).  Using identifierSuffix
 *          may be overly aggressive--perhaps should create a more constrained thisSuffix rule?
 * 		
 *  Version 1.0.4 -- Hiroaki Nakamura, May 3, 2007
 *
 *	Fixed formalParameterDecls, localVariableDeclaration, forInit,
 *	and forVarControl to use variableModifier* not 'final'? (annotation)?
 *
 *  Version 1.0.5 -- Terence, June 21, 2007
 *	--a[i].foo didn't work. Fixed unaryExpression
 */
public class JavaWTreeParser extends DebugParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Identifier", "ENUM", "FloatingPointLiteral", "CharacterLiteral", "StringLiteral", "HexLiteral", "OctalLiteral", "DecimalLiteral", "HexDigit", "IntegerTypeSuffix", "Exponent", "FloatTypeSuffix", "EscapeSequence", "UnicodeEscape", "OctalEscape", "Letter", "JavaIDDigit", "WS", "COMMENT", "LINE_COMMENT", "'package'", "';'", "'import'", "'static'", "'.'", "'*'", "'class'", "'extends'", "'implements'", "'<'", "','", "'>'", "'&'", "'{'", "'}'", "'interface'", "'void'", "'['", "']'", "'throws'", "'='", "'public'", "'protected'", "'private'", "'abstract'", "'final'", "'native'", "'synchronized'", "'transient'", "'volatile'", "'strictfp'", "'boolean'", "'char'", "'byte'", "'short'", "'int'", "'long'", "'float'", "'double'", "'?'", "'super'", "'('", "')'", "'...'", "'null'", "'true'", "'false'", "'@'", "'default'", "'assert'", "':'", "'if'", "'else'", "'for'", "'while'", "'do'", "'try'", "'finally'", "'switch'", "'return'", "'throw'", "'break'", "'continue'", "'catch'", "'case'", "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", "'||'", "'&&'", "'|'", "'^'", "'=='", "'!='", "'instanceof'", "'+'", "'-'", "'/'", "'%'", "'++'", "'--'", "'~'", "'!'", "'this'", "'new'"
    };
    public static final int HexLiteral=9;
    public static final int LINE_COMMENT=23;
    public static final int FloatTypeSuffix=15;
    public static final int OctalLiteral=10;
    public static final int IntegerTypeSuffix=13;
    public static final int CharacterLiteral=7;
    public static final int Exponent=14;
    public static final int EOF=-1;
    public static final int DecimalLiteral=11;
    public static final int HexDigit=12;
    public static final int Identifier=4;
    public static final int StringLiteral=8;
    public static final int WS=21;
    public static final int ENUM=5;
    public static final int UnicodeEscape=17;
    public static final int FloatingPointLiteral=6;
    public static final int JavaIDDigit=20;
    public static final int COMMENT=22;
    public static final int EscapeSequence=16;
    public static final int OctalEscape=18;
    public static final int Letter=19;
    public static final String[] ruleNames = new String[] {
        "invalidRule", "compilationUnit", "packageDeclaration", "importDeclaration", 
        "typeDeclaration", "classOrInterfaceDeclaration", "classDeclaration", 
        "normalClassDeclaration", "typeParameters", "typeParameter", "bound", 
        "enumDeclaration", "enumBody", "enumConstants", "enumConstant", 
        "enumBodyDeclarations", "interfaceDeclaration", "normalInterfaceDeclaration", 
        "typeList", "classBody", "interfaceBody", "classBodyDeclaration", 
        "memberDecl", "genericMethodOrConstructorDecl", "genericMethodOrConstructorRest", 
        "methodDeclaration", "fieldDeclaration", "interfaceBodyDeclaration", 
        "interfaceMemberDecl", "interfaceMethodOrFieldDecl", "interfaceMethodOrFieldRest", 
        "methodDeclaratorRest", "voidMethodDeclaratorRest", "interfaceMethodDeclaratorRest", 
        "interfaceGenericMethodDecl", "voidInterfaceMethodDeclaratorRest", 
        "constructorDeclaratorRest", "constantDeclarator", "variableDeclarators", 
        "variableDeclarator", "variableDeclaratorRest", "constantDeclaratorsRest", 
        "constantDeclaratorRest", "variableDeclaratorId", "variableInitializer", 
        "arrayInitializer", "modifier", "packageOrTypeName", "enumConstantName", 
        "typeName", "type", "primitiveType", "variableModifier", "typeArguments", 
        "typeArgument", "qualifiedNameList", "formalParameters", "formalParameterDecls", 
        "formalParameterDeclsRest", "methodBody", "qualifiedName", "literal", 
        "integerLiteral", "booleanLiteral", "annotations", "annotation", 
        "annotationName", "elementValuePairs", "elementValuePair", "elementValue", 
        "elementValueArrayInitializer", "annotationTypeDeclaration", "annotationTypeBody", 
        "annotationTypeElementDeclarations", "annotationTypeElementDeclaration", 
        "annotationTypeElementRest", "annotationMethodOrConstantRest", "annotationMethodRest", 
        "annotationConstantRest", "defaultValue", "block", "blockStatement", 
        "localVariableDeclaration", "statement", "catches", "catchClause", 
        "formalParameter", "switchBlockStatementGroups", "switchBlockStatementGroup", 
        "switchLabel", "moreStatementExpressions", "forControl", "forInit", 
        "forVarControl", "forUpdate", "parExpression", "expressionList", 
        "statementExpression", "constantExpression", "expression", "assignmentOperator", 
        "conditionalExpression", "conditionalOrExpression", "conditionalAndExpression", 
        "inclusiveOrExpression", "exclusiveOrExpression", "andExpression", 
        "equalityExpression", "instanceOfExpression", "relationalExpression", 
        "relationalOp", "shiftExpression", "shiftOp", "additiveExpression", 
        "multiplicativeExpression", "unaryExpression", "unaryExpressionNotPlusMinus", 
        "castExpression", "primary", "identifierSuffix", "creator", "createdName", 
        "innerCreator", "arrayCreatorRest", "classCreatorRest", "explicitGenericInvocation", 
        "nonWildcardTypeArguments", "explicitGenericInvocationSuffix", "selector", 
        "superSuffix", "arguments", "synpred1", "synpred10", "synpred39", 
        "synpred40", "synpred60", "synpred86", "synpred121", "synpred136", 
        "synpred138", "synpred140", "synpred145", "synpred146", "synpred151", 
        "synpred156", "synpred157", "synpred174", "synpred175", "synpred177", 
        "synpred182", "synpred185", "synpred196", "synpred206", "synpred210", 
        "synpred212", "synpred224", "synpred228", "synpred229", "synpred231", 
        "synpred232", "synpred233", "synpred234", "synpred239", "synpred240", 
        "synpred246", "synpred262"
    };

    public int ruleLevel = 0;
    public JavaWTreeParser(TokenStream input, int port) {
            super(input, port);
            DebugEventSocketProxy proxy =
                new DebugEventSocketProxy(this, port, adaptor);
            setDebugListener(proxy);
            adaptor.setDebugEventListener(proxy);
            try {
                proxy.handshake();
            }
            catch (IOException ioe) {
                reportError(ioe);
            }

            ruleMemo = new Map[404+1];
    }
    public JavaWTreeParser(TokenStream input) {
        this(input, DebugEventSocketProxy.DEFAULT_DEBUGGER_PORT);
    }
    public JavaWTreeParser(TokenStream input, DebugEventListener dbg) {
        super(input, dbg);
        adaptor.setDebugEventListener(dbg);
    }

    protected boolean evalPredicate(boolean result, String predicate) {
        dbg.semanticPredicate(result, predicate);
        return result;
    }

    protected DebugTreeAdaptor adaptor =
    	  new DebugTreeAdaptor(null,new CommonTreeAdaptor());
    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = new DebugTreeAdaptor(dbg,adaptor);
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }


    public String[] getTokenNames() { return tokenNames; }
    public String getGrammarFileName() { return "C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g"; }


    public static class compilationUnit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compilationUnit
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:88:1: compilationUnit : ( annotations )? ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* -> ( annotations )+ ( packageDeclaration )+ ( importDeclaration )+ ( typeDeclaration )+ ;
    public final compilationUnit_return compilationUnit() throws RecognitionException {
        compilationUnit_return retval = new compilationUnit_return();
        retval.start = input.LT(1);
        int compilationUnit_StartIndex = input.index();
        Object root_0 = null;

        annotations_return annotations1 = null;

        packageDeclaration_return packageDeclaration2 = null;

        importDeclaration_return importDeclaration3 = null;

        typeDeclaration_return typeDeclaration4 = null;


        RewriteRuleSubtreeStream stream_packageDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule packageDeclaration");
        RewriteRuleSubtreeStream stream_annotations=new RewriteRuleSubtreeStream(adaptor,"rule annotations");
        RewriteRuleSubtreeStream stream_typeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule typeDeclaration");
        RewriteRuleSubtreeStream stream_importDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule importDeclaration");
        try { dbg.enterRule("compilationUnit");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(88, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:89:2: ( ( annotations )? ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* -> ( annotations )+ ( packageDeclaration )+ ( importDeclaration )+ ( typeDeclaration )+ )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:89:4: ( annotations )? ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )*
            {
            dbg.location(89,4);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:89:4: ( annotations )?
            int alt1=2;
            try { dbg.enterSubRule(1);
            try { dbg.enterDecision(1);

            int LA1_0 = input.LA(1);

            if ( (LA1_0==71) ) {
                int LA1_1 = input.LA(2);

                if ( (LA1_1==Identifier) ) {
                    int LA1_21 = input.LA(3);

                    if ( (synpred1()) ) {
                        alt1=1;
                    }
                }
            }
            } finally {dbg.exitDecision(1);}

            switch (alt1) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: annotations
                    {
                    dbg.location(89,4);
                    pushFollow(FOLLOW_annotations_in_compilationUnit45);
                    annotations1=annotations();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_annotations.add(annotations1.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(1);}

            dbg.location(90,3);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:90:3: ( packageDeclaration )?
            int alt2=2;
            try { dbg.enterSubRule(2);
            try { dbg.enterDecision(2);

            int LA2_0 = input.LA(1);

            if ( (LA2_0==24) ) {
                alt2=1;
            }
            } finally {dbg.exitDecision(2);}

            switch (alt2) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: packageDeclaration
                    {
                    dbg.location(90,3);
                    pushFollow(FOLLOW_packageDeclaration_in_compilationUnit50);
                    packageDeclaration2=packageDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_packageDeclaration.add(packageDeclaration2.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(2);}

            dbg.location(91,9);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:91:9: ( importDeclaration )*
            try { dbg.enterSubRule(3);

            loop3:
            do {
                int alt3=2;
                try { dbg.enterDecision(3);

                int LA3_0 = input.LA(1);

                if ( (LA3_0==26) ) {
                    alt3=1;
                }


                } finally {dbg.exitDecision(3);}

                switch (alt3) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: importDeclaration
            	    {
            	    dbg.location(91,9);
            	    pushFollow(FOLLOW_importDeclaration_in_compilationUnit61);
            	    importDeclaration3=importDeclaration();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_importDeclaration.add(importDeclaration3.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);
            } finally {dbg.exitSubRule(3);}

            dbg.location(92,9);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:92:9: ( typeDeclaration )*
            try { dbg.enterSubRule(4);

            loop4:
            do {
                int alt4=2;
                try { dbg.enterDecision(4);

                int LA4_0 = input.LA(1);

                if ( (LA4_0==ENUM||LA4_0==25||LA4_0==27||LA4_0==30||LA4_0==39||(LA4_0>=45 && LA4_0<=54)||LA4_0==71) ) {
                    alt4=1;
                }


                } finally {dbg.exitDecision(4);}

                switch (alt4) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: typeDeclaration
            	    {
            	    dbg.location(92,9);
            	    pushFollow(FOLLOW_typeDeclaration_in_compilationUnit72);
            	    typeDeclaration4=typeDeclaration();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_typeDeclaration.add(typeDeclaration4.getTree());

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);
            } finally {dbg.exitSubRule(4);}

            dbg.location(92,26);

            // AST REWRITE
            // elements: typeDeclaration, annotations, importDeclaration, packageDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 92:26: -> ( annotations )+ ( packageDeclaration )+ ( importDeclaration )+ ( typeDeclaration )+
            {
                dbg.location(92,29);
                if ( !(stream_annotations.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_annotations.hasNext() ) {
                    dbg.location(92,29);
                    adaptor.addChild(root_0, stream_annotations.next());

                }
                stream_annotations.reset();
                dbg.location(92,42);
                if ( !(stream_packageDeclaration.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_packageDeclaration.hasNext() ) {
                    dbg.location(92,42);
                    adaptor.addChild(root_0, stream_packageDeclaration.next());

                }
                stream_packageDeclaration.reset();
                dbg.location(92,62);
                if ( !(stream_importDeclaration.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_importDeclaration.hasNext() ) {
                    dbg.location(92,62);
                    adaptor.addChild(root_0, stream_importDeclaration.next());

                }
                stream_importDeclaration.reset();
                dbg.location(92,81);
                if ( !(stream_typeDeclaration.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_typeDeclaration.hasNext() ) {
                    dbg.location(92,81);
                    adaptor.addChild(root_0, stream_typeDeclaration.next());

                }
                stream_typeDeclaration.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 1, compilationUnit_StartIndex); }
        }
        dbg.location(93, 2);

        }
        finally {
            dbg.exitRule("compilationUnit");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end compilationUnit

    public static class packageDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start packageDeclaration
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:95:1: packageDeclaration : 'package' qualifiedName ';' -> 'package' qualifiedName ';' ;
    public final packageDeclaration_return packageDeclaration() throws RecognitionException {
        packageDeclaration_return retval = new packageDeclaration_return();
        retval.start = input.LT(1);
        int packageDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal5=null;
        Token char_literal7=null;
        qualifiedName_return qualifiedName6 = null;


        Object string_literal5_tree=null;
        Object char_literal7_tree=null;
        RewriteRuleTokenStream stream_24=new RewriteRuleTokenStream(adaptor,"token 24");
        RewriteRuleTokenStream stream_25=new RewriteRuleTokenStream(adaptor,"token 25");
        RewriteRuleSubtreeStream stream_qualifiedName=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedName");
        try { dbg.enterRule("packageDeclaration");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(95, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:96:2: ( 'package' qualifiedName ';' -> 'package' qualifiedName ';' )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:96:4: 'package' qualifiedName ';'
            {
            dbg.location(96,4);
            string_literal5=(Token)input.LT(1);
            match(input,24,FOLLOW_24_in_packageDeclaration98); if (failed) return retval;
            if ( backtracking==0 ) stream_24.add(string_literal5);

            dbg.location(96,14);
            pushFollow(FOLLOW_qualifiedName_in_packageDeclaration100);
            qualifiedName6=qualifiedName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_qualifiedName.add(qualifiedName6.getTree());
            dbg.location(96,28);
            char_literal7=(Token)input.LT(1);
            match(input,25,FOLLOW_25_in_packageDeclaration102); if (failed) return retval;
            if ( backtracking==0 ) stream_25.add(char_literal7);

            dbg.location(96,32);

            // AST REWRITE
            // elements: qualifiedName, 25, 24
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 96:32: -> 'package' qualifiedName ';'
            {
                dbg.location(96,35);
                adaptor.addChild(root_0, stream_24.next());
                dbg.location(96,45);
                adaptor.addChild(root_0, stream_qualifiedName.next());
                dbg.location(96,59);
                adaptor.addChild(root_0, stream_25.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 2, packageDeclaration_StartIndex); }
        }
        dbg.location(97, 2);

        }
        finally {
            dbg.exitRule("packageDeclaration");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end packageDeclaration

    public static class importDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start importDeclaration
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:99:1: importDeclaration : 'import' ( 'static' )? Identifier ( '.' Identifier )* ( '.' '*' )? ';' -> 'import' ( 'static' )? Identifier ( '.' Identifier )* ( '.' '*' )? ';' ;
    public final importDeclaration_return importDeclaration() throws RecognitionException {
        importDeclaration_return retval = new importDeclaration_return();
        retval.start = input.LT(1);
        int importDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal8=null;
        Token string_literal9=null;
        Token Identifier10=null;
        Token char_literal11=null;
        Token Identifier12=null;
        Token char_literal13=null;
        Token char_literal14=null;
        Token char_literal15=null;

        Object string_literal8_tree=null;
        Object string_literal9_tree=null;
        Object Identifier10_tree=null;
        Object char_literal11_tree=null;
        Object Identifier12_tree=null;
        Object char_literal13_tree=null;
        Object char_literal14_tree=null;
        Object char_literal15_tree=null;
        RewriteRuleTokenStream stream_25=new RewriteRuleTokenStream(adaptor,"token 25");
        RewriteRuleTokenStream stream_26=new RewriteRuleTokenStream(adaptor,"token 26");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_27=new RewriteRuleTokenStream(adaptor,"token 27");
        RewriteRuleTokenStream stream_28=new RewriteRuleTokenStream(adaptor,"token 28");
        RewriteRuleTokenStream stream_29=new RewriteRuleTokenStream(adaptor,"token 29");

        try { dbg.enterRule("importDeclaration");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(99, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:100:2: ( 'import' ( 'static' )? Identifier ( '.' Identifier )* ( '.' '*' )? ';' -> 'import' ( 'static' )? Identifier ( '.' Identifier )* ( '.' '*' )? ';' )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:100:4: 'import' ( 'static' )? Identifier ( '.' Identifier )* ( '.' '*' )? ';'
            {
            dbg.location(100,4);
            string_literal8=(Token)input.LT(1);
            match(input,26,FOLLOW_26_in_importDeclaration122); if (failed) return retval;
            if ( backtracking==0 ) stream_26.add(string_literal8);

            dbg.location(100,13);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:100:13: ( 'static' )?
            int alt5=2;
            try { dbg.enterSubRule(5);
            try { dbg.enterDecision(5);

            int LA5_0 = input.LA(1);

            if ( (LA5_0==27) ) {
                alt5=1;
            }
            } finally {dbg.exitDecision(5);}

            switch (alt5) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: 'static'
                    {
                    dbg.location(100,13);
                    string_literal9=(Token)input.LT(1);
                    match(input,27,FOLLOW_27_in_importDeclaration124); if (failed) return retval;
                    if ( backtracking==0 ) stream_27.add(string_literal9);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(5);}

            dbg.location(100,23);
            Identifier10=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_importDeclaration127); if (failed) return retval;
            if ( backtracking==0 ) stream_Identifier.add(Identifier10);

            dbg.location(100,34);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:100:34: ( '.' Identifier )*
            try { dbg.enterSubRule(6);

            loop6:
            do {
                int alt6=2;
                try { dbg.enterDecision(6);

                int LA6_0 = input.LA(1);

                if ( (LA6_0==28) ) {
                    int LA6_1 = input.LA(2);

                    if ( (LA6_1==Identifier) ) {
                        alt6=1;
                    }


                }


                } finally {dbg.exitDecision(6);}

                switch (alt6) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:100:35: '.' Identifier
            	    {
            	    dbg.location(100,35);
            	    char_literal11=(Token)input.LT(1);
            	    match(input,28,FOLLOW_28_in_importDeclaration130); if (failed) return retval;
            	    if ( backtracking==0 ) stream_28.add(char_literal11);

            	    dbg.location(100,39);
            	    Identifier12=(Token)input.LT(1);
            	    match(input,Identifier,FOLLOW_Identifier_in_importDeclaration132); if (failed) return retval;
            	    if ( backtracking==0 ) stream_Identifier.add(Identifier12);


            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);
            } finally {dbg.exitSubRule(6);}

            dbg.location(100,52);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:100:52: ( '.' '*' )?
            int alt7=2;
            try { dbg.enterSubRule(7);
            try { dbg.enterDecision(7);

            int LA7_0 = input.LA(1);

            if ( (LA7_0==28) ) {
                alt7=1;
            }
            } finally {dbg.exitDecision(7);}

            switch (alt7) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:100:53: '.' '*'
                    {
                    dbg.location(100,53);
                    char_literal13=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_importDeclaration137); if (failed) return retval;
                    if ( backtracking==0 ) stream_28.add(char_literal13);

                    dbg.location(100,57);
                    char_literal14=(Token)input.LT(1);
                    match(input,29,FOLLOW_29_in_importDeclaration139); if (failed) return retval;
                    if ( backtracking==0 ) stream_29.add(char_literal14);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(7);}

            dbg.location(100,63);
            char_literal15=(Token)input.LT(1);
            match(input,25,FOLLOW_25_in_importDeclaration143); if (failed) return retval;
            if ( backtracking==0 ) stream_25.add(char_literal15);

            dbg.location(100,67);

            // AST REWRITE
            // elements: 28, 26, 25, Identifier, 28, 29, Identifier, 27
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 100:67: -> 'import' ( 'static' )? Identifier ( '.' Identifier )* ( '.' '*' )? ';'
            {
                dbg.location(100,70);
                adaptor.addChild(root_0, stream_26.next());
                dbg.location(100,79);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:100:79: ( 'static' )?
                if ( stream_27.hasNext() ) {
                    dbg.location(100,79);
                    adaptor.addChild(root_0, stream_27.next());

                }
                stream_27.reset();
                dbg.location(100,89);
                adaptor.addChild(root_0, stream_Identifier.next());
                dbg.location(100,100);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:100:100: ( '.' Identifier )*
                while ( stream_28.hasNext()||stream_Identifier.hasNext() ) {
                    dbg.location(100,101);
                    adaptor.addChild(root_0, stream_28.next());
                    dbg.location(100,105);
                    adaptor.addChild(root_0, stream_Identifier.next());

                }
                stream_28.reset();
                stream_Identifier.reset();
                dbg.location(100,118);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:100:118: ( '.' '*' )?
                if ( stream_28.hasNext()||stream_29.hasNext() ) {
                    dbg.location(100,119);
                    adaptor.addChild(root_0, stream_28.next());
                    dbg.location(100,123);
                    adaptor.addChild(root_0, stream_29.next());

                }
                stream_28.reset();
                stream_29.reset();
                dbg.location(100,129);
                adaptor.addChild(root_0, stream_25.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 3, importDeclaration_StartIndex); }
        }
        dbg.location(101, 2);

        }
        finally {
            dbg.exitRule("importDeclaration");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end importDeclaration

    public static class typeDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start typeDeclaration
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:103:1: typeDeclaration : ( classOrInterfaceDeclaration -> classOrInterfaceDeclaration | ';' -> ';' );
    public final typeDeclaration_return typeDeclaration() throws RecognitionException {
        typeDeclaration_return retval = new typeDeclaration_return();
        retval.start = input.LT(1);
        int typeDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal17=null;
        classOrInterfaceDeclaration_return classOrInterfaceDeclaration16 = null;


        Object char_literal17_tree=null;
        RewriteRuleTokenStream stream_25=new RewriteRuleTokenStream(adaptor,"token 25");
        RewriteRuleSubtreeStream stream_classOrInterfaceDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classOrInterfaceDeclaration");
        try { dbg.enterRule("typeDeclaration");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(103, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:104:2: ( classOrInterfaceDeclaration -> classOrInterfaceDeclaration | ';' -> ';' )
            int alt8=2;
            try { dbg.enterDecision(8);

            int LA8_0 = input.LA(1);

            if ( (LA8_0==ENUM||LA8_0==27||LA8_0==30||LA8_0==39||(LA8_0>=45 && LA8_0<=54)||LA8_0==71) ) {
                alt8=1;
            }
            else if ( (LA8_0==25) ) {
                alt8=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("103:1: typeDeclaration : ( classOrInterfaceDeclaration -> classOrInterfaceDeclaration | ';' -> ';' );", 8, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(8);}

            switch (alt8) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:104:4: classOrInterfaceDeclaration
                    {
                    dbg.location(104,4);
                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration180);
                    classOrInterfaceDeclaration16=classOrInterfaceDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_classOrInterfaceDeclaration.add(classOrInterfaceDeclaration16.getTree());
                    dbg.location(104,32);

                    // AST REWRITE
                    // elements: classOrInterfaceDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 104:32: -> classOrInterfaceDeclaration
                    {
                        dbg.location(104,35);
                        adaptor.addChild(root_0, stream_classOrInterfaceDeclaration.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:105:9: ';'
                    {
                    dbg.location(105,9);
                    char_literal17=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_typeDeclaration194); if (failed) return retval;
                    if ( backtracking==0 ) stream_25.add(char_literal17);

                    dbg.location(105,13);

                    // AST REWRITE
                    // elements: 25
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 105:13: -> ';'
                    {
                        dbg.location(105,16);
                        adaptor.addChild(root_0, stream_25.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 4, typeDeclaration_StartIndex); }
        }
        dbg.location(106, 2);

        }
        finally {
            dbg.exitRule("typeDeclaration");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end typeDeclaration

    public static class classOrInterfaceDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start classOrInterfaceDeclaration
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );
    public final classOrInterfaceDeclaration_return classOrInterfaceDeclaration() throws RecognitionException {
        classOrInterfaceDeclaration_return retval = new classOrInterfaceDeclaration_return();
        retval.start = input.LT(1);
        int classOrInterfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        modifier_return modifier18 = null;

        classDeclaration_return classDeclaration19 = null;

        modifier_return modifier20 = null;

        interfaceDeclaration_return interfaceDeclaration21 = null;


        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        RewriteRuleSubtreeStream stream_interfaceDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule interfaceDeclaration");
        RewriteRuleSubtreeStream stream_classDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classDeclaration");
        try { dbg.enterRule("classOrInterfaceDeclaration");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(108, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:109:2: ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration )
            int alt11=2;
            try { dbg.enterDecision(11);

            switch ( input.LA(1) ) {
            case 71:
                {
                int LA11_1 = input.LA(2);

                if ( (LA11_1==39) ) {
                    alt11=2;
                }
                else if ( (LA11_1==Identifier) ) {
                    int LA11_17 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 17, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                }
                break;
            case 45:
                {
                switch ( input.LA(2) ) {
                case ENUM:
                case 30:
                    {
                    alt11=1;
                    }
                    break;
                case 71:
                    {
                    int LA11_20 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 20, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 45:
                    {
                    int LA11_21 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 21, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 46:
                    {
                    int LA11_22 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 22, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 47:
                    {
                    int LA11_23 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 23, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 27:
                    {
                    int LA11_24 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 24, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 48:
                    {
                    int LA11_25 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 25, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 49:
                    {
                    int LA11_26 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 26, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 50:
                    {
                    int LA11_27 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 27, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 51:
                    {
                    int LA11_28 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 28, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 52:
                    {
                    int LA11_29 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 29, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 53:
                    {
                    int LA11_30 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 30, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 54:
                    {
                    int LA11_31 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 31, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 39:
                    {
                    alt11=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 46:
                {
                switch ( input.LA(2) ) {
                case ENUM:
                case 30:
                    {
                    alt11=1;
                    }
                    break;
                case 71:
                    {
                    int LA11_35 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 35, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 45:
                    {
                    int LA11_36 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 36, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 46:
                    {
                    int LA11_37 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 37, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 47:
                    {
                    int LA11_38 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 38, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 27:
                    {
                    int LA11_39 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 39, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 48:
                    {
                    int LA11_40 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 40, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 49:
                    {
                    int LA11_41 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 41, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 50:
                    {
                    int LA11_42 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 42, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 51:
                    {
                    int LA11_43 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 43, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 52:
                    {
                    int LA11_44 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 44, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 53:
                    {
                    int LA11_45 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 45, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 54:
                    {
                    int LA11_46 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 46, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 39:
                    {
                    alt11=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 3, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 47:
                {
                switch ( input.LA(2) ) {
                case 39:
                    {
                    alt11=2;
                    }
                    break;
                case 71:
                    {
                    int LA11_49 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 49, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 45:
                    {
                    int LA11_50 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 50, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 46:
                    {
                    int LA11_51 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 51, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 47:
                    {
                    int LA11_52 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 52, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 27:
                    {
                    int LA11_53 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 53, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 48:
                    {
                    int LA11_54 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 54, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 49:
                    {
                    int LA11_55 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 55, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 50:
                    {
                    int LA11_56 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 56, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 51:
                    {
                    int LA11_57 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 57, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 52:
                    {
                    int LA11_58 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 58, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 53:
                    {
                    int LA11_59 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 59, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 54:
                    {
                    int LA11_60 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 60, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case ENUM:
                case 30:
                    {
                    alt11=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 4, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 27:
                {
                switch ( input.LA(2) ) {
                case 39:
                    {
                    alt11=2;
                    }
                    break;
                case 71:
                    {
                    int LA11_64 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 64, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 45:
                    {
                    int LA11_65 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 65, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 46:
                    {
                    int LA11_66 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 66, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 47:
                    {
                    int LA11_67 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 67, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 27:
                    {
                    int LA11_68 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 68, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 48:
                    {
                    int LA11_69 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 69, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 49:
                    {
                    int LA11_70 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 70, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 50:
                    {
                    int LA11_71 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 71, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 51:
                    {
                    int LA11_72 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 72, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 52:
                    {
                    int LA11_73 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 73, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 53:
                    {
                    int LA11_74 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 74, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 54:
                    {
                    int LA11_75 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 75, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case ENUM:
                case 30:
                    {
                    alt11=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 5, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 48:
                {
                switch ( input.LA(2) ) {
                case 39:
                    {
                    alt11=2;
                    }
                    break;
                case 71:
                    {
                    int LA11_79 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 79, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 45:
                    {
                    int LA11_80 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 80, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 46:
                    {
                    int LA11_81 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 81, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 47:
                    {
                    int LA11_82 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 82, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 27:
                    {
                    int LA11_83 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 83, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 48:
                    {
                    int LA11_84 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 84, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 49:
                    {
                    int LA11_85 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 85, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 50:
                    {
                    int LA11_86 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 86, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 51:
                    {
                    int LA11_87 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 87, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 52:
                    {
                    int LA11_88 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 88, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 53:
                    {
                    int LA11_89 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 89, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 54:
                    {
                    int LA11_90 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 90, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case ENUM:
                case 30:
                    {
                    alt11=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 6, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 49:
                {
                switch ( input.LA(2) ) {
                case ENUM:
                case 30:
                    {
                    alt11=1;
                    }
                    break;
                case 71:
                    {
                    int LA11_95 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 95, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 45:
                    {
                    int LA11_96 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 96, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 46:
                    {
                    int LA11_97 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 97, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 47:
                    {
                    int LA11_98 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 98, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 27:
                    {
                    int LA11_99 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 99, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 48:
                    {
                    int LA11_100 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 100, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 49:
                    {
                    int LA11_101 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 101, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 50:
                    {
                    int LA11_102 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 102, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 51:
                    {
                    int LA11_103 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 103, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 52:
                    {
                    int LA11_104 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 104, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 53:
                    {
                    int LA11_105 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 105, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 54:
                    {
                    int LA11_106 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 106, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 39:
                    {
                    alt11=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 7, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 50:
                {
                switch ( input.LA(2) ) {
                case ENUM:
                case 30:
                    {
                    alt11=1;
                    }
                    break;
                case 71:
                    {
                    int LA11_110 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 110, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 45:
                    {
                    int LA11_111 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 111, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 46:
                    {
                    int LA11_112 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 112, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 47:
                    {
                    int LA11_113 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 113, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 27:
                    {
                    int LA11_114 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 114, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 48:
                    {
                    int LA11_115 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 115, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 49:
                    {
                    int LA11_116 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 116, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 50:
                    {
                    int LA11_117 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 117, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 51:
                    {
                    int LA11_118 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 118, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 52:
                    {
                    int LA11_119 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 119, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 53:
                    {
                    int LA11_120 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 120, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 54:
                    {
                    int LA11_121 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 121, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 39:
                    {
                    alt11=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 8, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 51:
                {
                switch ( input.LA(2) ) {
                case ENUM:
                case 30:
                    {
                    alt11=1;
                    }
                    break;
                case 71:
                    {
                    int LA11_125 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 125, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 45:
                    {
                    int LA11_126 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 126, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 46:
                    {
                    int LA11_127 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 127, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 47:
                    {
                    int LA11_128 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 128, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 27:
                    {
                    int LA11_129 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 129, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 48:
                    {
                    int LA11_130 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 130, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 49:
                    {
                    int LA11_131 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 131, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 50:
                    {
                    int LA11_132 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 132, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 51:
                    {
                    int LA11_133 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 133, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 52:
                    {
                    int LA11_134 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 134, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 53:
                    {
                    int LA11_135 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 135, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 54:
                    {
                    int LA11_136 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 136, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 39:
                    {
                    alt11=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 9, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 52:
                {
                switch ( input.LA(2) ) {
                case 39:
                    {
                    alt11=2;
                    }
                    break;
                case 71:
                    {
                    int LA11_139 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 139, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 45:
                    {
                    int LA11_140 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 140, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 46:
                    {
                    int LA11_141 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 141, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 47:
                    {
                    int LA11_142 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 142, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 27:
                    {
                    int LA11_143 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 143, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 48:
                    {
                    int LA11_144 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 144, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 49:
                    {
                    int LA11_145 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 145, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 50:
                    {
                    int LA11_146 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 146, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 51:
                    {
                    int LA11_147 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 147, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 52:
                    {
                    int LA11_148 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 148, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 53:
                    {
                    int LA11_149 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 149, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 54:
                    {
                    int LA11_150 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 150, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case ENUM:
                case 30:
                    {
                    alt11=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 10, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 53:
                {
                switch ( input.LA(2) ) {
                case ENUM:
                case 30:
                    {
                    alt11=1;
                    }
                    break;
                case 71:
                    {
                    int LA11_155 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 155, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 45:
                    {
                    int LA11_156 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 156, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 46:
                    {
                    int LA11_157 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 157, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 47:
                    {
                    int LA11_158 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 158, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 27:
                    {
                    int LA11_159 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 159, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 48:
                    {
                    int LA11_160 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 160, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 49:
                    {
                    int LA11_161 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 161, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 50:
                    {
                    int LA11_162 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 162, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 51:
                    {
                    int LA11_163 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 163, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 52:
                    {
                    int LA11_164 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 164, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 53:
                    {
                    int LA11_165 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 165, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 54:
                    {
                    int LA11_166 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 166, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 39:
                    {
                    alt11=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 11, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 54:
                {
                switch ( input.LA(2) ) {
                case ENUM:
                case 30:
                    {
                    alt11=1;
                    }
                    break;
                case 71:
                    {
                    int LA11_170 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 170, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 45:
                    {
                    int LA11_171 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 171, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 46:
                    {
                    int LA11_172 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 172, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 47:
                    {
                    int LA11_173 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 173, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 27:
                    {
                    int LA11_174 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 174, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 48:
                    {
                    int LA11_175 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 175, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 49:
                    {
                    int LA11_176 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 176, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 50:
                    {
                    int LA11_177 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 177, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 51:
                    {
                    int LA11_178 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 178, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 52:
                    {
                    int LA11_179 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 179, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 53:
                    {
                    int LA11_180 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 180, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 54:
                    {
                    int LA11_181 = input.LA(3);

                    if ( (synpred10()) ) {
                        alt11=1;
                    }
                    else if ( (true) ) {
                        alt11=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 181, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 39:
                    {
                    alt11=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 12, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case ENUM:
            case 30:
                {
                alt11=1;
                }
                break;
            case 39:
                {
                alt11=2;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("108:1: classOrInterfaceDeclaration : ( ( modifier )* classDeclaration -> ( modifier )* classDeclaration | ( modifier )* interfaceDeclaration -> ( modifier )* interfaceDeclaration );", 11, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(11);}

            switch (alt11) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:109:4: ( modifier )* classDeclaration
                    {
                    dbg.location(109,4);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:109:4: ( modifier )*
                    try { dbg.enterSubRule(9);

                    loop9:
                    do {
                        int alt9=2;
                        try { dbg.enterDecision(9);

                        int LA9_0 = input.LA(1);

                        if ( (LA9_0==27||(LA9_0>=45 && LA9_0<=54)||LA9_0==71) ) {
                            alt9=1;
                        }


                        } finally {dbg.exitDecision(9);}

                        switch (alt9) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: modifier
                    	    {
                    	    dbg.location(109,4);
                    	    pushFollow(FOLLOW_modifier_in_classOrInterfaceDeclaration210);
                    	    modifier18=modifier();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_modifier.add(modifier18.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop9;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(9);}

                    dbg.location(109,14);
                    pushFollow(FOLLOW_classDeclaration_in_classOrInterfaceDeclaration213);
                    classDeclaration19=classDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_classDeclaration.add(classDeclaration19.getTree());
                    dbg.location(109,31);

                    // AST REWRITE
                    // elements: classDeclaration, modifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 109:31: -> ( modifier )* classDeclaration
                    {
                        dbg.location(109,34);
                        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:109:34: ( modifier )*
                        while ( stream_modifier.hasNext() ) {
                            dbg.location(109,34);
                            adaptor.addChild(root_0, stream_modifier.next());

                        }
                        stream_modifier.reset();
                        dbg.location(109,44);
                        adaptor.addChild(root_0, stream_classDeclaration.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:110:10: ( modifier )* interfaceDeclaration
                    {
                    dbg.location(110,10);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:110:10: ( modifier )*
                    try { dbg.enterSubRule(10);

                    loop10:
                    do {
                        int alt10=2;
                        try { dbg.enterDecision(10);

                        int LA10_0 = input.LA(1);

                        if ( (LA10_0==71) ) {
                            int LA10_2 = input.LA(2);

                            if ( (LA10_2==Identifier) ) {
                                alt10=1;
                            }


                        }
                        else if ( (LA10_0==27||(LA10_0>=45 && LA10_0<=54)) ) {
                            alt10=1;
                        }


                        } finally {dbg.exitDecision(10);}

                        switch (alt10) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: modifier
                    	    {
                    	    dbg.location(110,10);
                    	    pushFollow(FOLLOW_modifier_in_classOrInterfaceDeclaration231);
                    	    modifier20=modifier();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_modifier.add(modifier20.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop10;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(10);}

                    dbg.location(110,20);
                    pushFollow(FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration234);
                    interfaceDeclaration21=interfaceDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_interfaceDeclaration.add(interfaceDeclaration21.getTree());
                    dbg.location(110,41);

                    // AST REWRITE
                    // elements: interfaceDeclaration, modifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 110:41: -> ( modifier )* interfaceDeclaration
                    {
                        dbg.location(110,44);
                        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:110:44: ( modifier )*
                        while ( stream_modifier.hasNext() ) {
                            dbg.location(110,44);
                            adaptor.addChild(root_0, stream_modifier.next());

                        }
                        stream_modifier.reset();
                        dbg.location(110,54);
                        adaptor.addChild(root_0, stream_interfaceDeclaration.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 5, classOrInterfaceDeclaration_StartIndex); }
        }
        dbg.location(111, 2);

        }
        finally {
            dbg.exitRule("classOrInterfaceDeclaration");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end classOrInterfaceDeclaration

    public static class classDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start classDeclaration
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:113:1: classDeclaration : ( normalClassDeclaration -> normalClassDeclaration | enumDeclaration -> enumDeclaration );
    public final classDeclaration_return classDeclaration() throws RecognitionException {
        classDeclaration_return retval = new classDeclaration_return();
        retval.start = input.LT(1);
        int classDeclaration_StartIndex = input.index();
        Object root_0 = null;

        normalClassDeclaration_return normalClassDeclaration22 = null;

        enumDeclaration_return enumDeclaration23 = null;


        RewriteRuleSubtreeStream stream_normalClassDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule normalClassDeclaration");
        RewriteRuleSubtreeStream stream_enumDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule enumDeclaration");
        try { dbg.enterRule("classDeclaration");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(113, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:114:2: ( normalClassDeclaration -> normalClassDeclaration | enumDeclaration -> enumDeclaration )
            int alt12=2;
            try { dbg.enterDecision(12);

            int LA12_0 = input.LA(1);

            if ( (LA12_0==30) ) {
                alt12=1;
            }
            else if ( (LA12_0==ENUM) ) {
                alt12=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("113:1: classDeclaration : ( normalClassDeclaration -> normalClassDeclaration | enumDeclaration -> enumDeclaration );", 12, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(12);}

            switch (alt12) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:114:4: normalClassDeclaration
                    {
                    dbg.location(114,4);
                    pushFollow(FOLLOW_normalClassDeclaration_in_classDeclaration253);
                    normalClassDeclaration22=normalClassDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_normalClassDeclaration.add(normalClassDeclaration22.getTree());
                    dbg.location(114,27);

                    // AST REWRITE
                    // elements: normalClassDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 114:27: -> normalClassDeclaration
                    {
                        dbg.location(114,30);
                        adaptor.addChild(root_0, stream_normalClassDeclaration.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:115:9: enumDeclaration
                    {
                    dbg.location(115,9);
                    pushFollow(FOLLOW_enumDeclaration_in_classDeclaration267);
                    enumDeclaration23=enumDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_enumDeclaration.add(enumDeclaration23.getTree());
                    dbg.location(115,25);

                    // AST REWRITE
                    // elements: enumDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 115:25: -> enumDeclaration
                    {
                        dbg.location(115,28);
                        adaptor.addChild(root_0, stream_enumDeclaration.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 6, classDeclaration_StartIndex); }
        }
        dbg.location(116, 2);

        }
        finally {
            dbg.exitRule("classDeclaration");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end classDeclaration

    public static class normalClassDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start normalClassDeclaration
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:118:1: normalClassDeclaration : 'class' Identifier ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody -> 'class' Identifier ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody ;
    public final normalClassDeclaration_return normalClassDeclaration() throws RecognitionException {
        normalClassDeclaration_return retval = new normalClassDeclaration_return();
        retval.start = input.LT(1);
        int normalClassDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal24=null;
        Token Identifier25=null;
        Token string_literal27=null;
        Token string_literal29=null;
        typeParameters_return typeParameters26 = null;

        type_return type28 = null;

        typeList_return typeList30 = null;

        classBody_return classBody31 = null;


        Object string_literal24_tree=null;
        Object Identifier25_tree=null;
        Object string_literal27_tree=null;
        Object string_literal29_tree=null;
        RewriteRuleTokenStream stream_30=new RewriteRuleTokenStream(adaptor,"token 30");
        RewriteRuleTokenStream stream_32=new RewriteRuleTokenStream(adaptor,"token 32");
        RewriteRuleTokenStream stream_31=new RewriteRuleTokenStream(adaptor,"token 31");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try { dbg.enterRule("normalClassDeclaration");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(118, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:119:2: ( 'class' Identifier ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody -> 'class' Identifier ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:119:4: 'class' Identifier ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody
            {
            dbg.location(119,4);
            string_literal24=(Token)input.LT(1);
            match(input,30,FOLLOW_30_in_normalClassDeclaration283); if (failed) return retval;
            if ( backtracking==0 ) stream_30.add(string_literal24);

            dbg.location(119,12);
            Identifier25=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_normalClassDeclaration285); if (failed) return retval;
            if ( backtracking==0 ) stream_Identifier.add(Identifier25);

            dbg.location(119,23);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:119:23: ( typeParameters )?
            int alt13=2;
            try { dbg.enterSubRule(13);
            try { dbg.enterDecision(13);

            int LA13_0 = input.LA(1);

            if ( (LA13_0==33) ) {
                alt13=1;
            }
            } finally {dbg.exitDecision(13);}

            switch (alt13) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:119:24: typeParameters
                    {
                    dbg.location(119,24);
                    pushFollow(FOLLOW_typeParameters_in_normalClassDeclaration288);
                    typeParameters26=typeParameters();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_typeParameters.add(typeParameters26.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(13);}

            dbg.location(120,9);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:120:9: ( 'extends' type )?
            int alt14=2;
            try { dbg.enterSubRule(14);
            try { dbg.enterDecision(14);

            int LA14_0 = input.LA(1);

            if ( (LA14_0==31) ) {
                alt14=1;
            }
            } finally {dbg.exitDecision(14);}

            switch (alt14) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:120:10: 'extends' type
                    {
                    dbg.location(120,10);
                    string_literal27=(Token)input.LT(1);
                    match(input,31,FOLLOW_31_in_normalClassDeclaration301); if (failed) return retval;
                    if ( backtracking==0 ) stream_31.add(string_literal27);

                    dbg.location(120,20);
                    pushFollow(FOLLOW_type_in_normalClassDeclaration303);
                    type28=type();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_type.add(type28.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(14);}

            dbg.location(121,9);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:121:9: ( 'implements' typeList )?
            int alt15=2;
            try { dbg.enterSubRule(15);
            try { dbg.enterDecision(15);

            int LA15_0 = input.LA(1);

            if ( (LA15_0==32) ) {
                alt15=1;
            }
            } finally {dbg.exitDecision(15);}

            switch (alt15) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:121:10: 'implements' typeList
                    {
                    dbg.location(121,10);
                    string_literal29=(Token)input.LT(1);
                    match(input,32,FOLLOW_32_in_normalClassDeclaration316); if (failed) return retval;
                    if ( backtracking==0 ) stream_32.add(string_literal29);

                    dbg.location(121,23);
                    pushFollow(FOLLOW_typeList_in_normalClassDeclaration318);
                    typeList30=typeList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_typeList.add(typeList30.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(15);}

            dbg.location(122,9);
            pushFollow(FOLLOW_classBody_in_normalClassDeclaration330);
            classBody31=classBody();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_classBody.add(classBody31.getTree());
            dbg.location(122,19);

            // AST REWRITE
            // elements: 31, typeParameters, typeList, type, classBody, Identifier, 32, 30
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 122:19: -> 'class' Identifier ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody
            {
                dbg.location(122,22);
                adaptor.addChild(root_0, stream_30.next());
                dbg.location(122,30);
                adaptor.addChild(root_0, stream_Identifier.next());
                dbg.location(122,41);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:122:41: ( typeParameters )?
                if ( stream_typeParameters.hasNext() ) {
                    dbg.location(122,42);
                    adaptor.addChild(root_0, stream_typeParameters.next());

                }
                stream_typeParameters.reset();
                dbg.location(122,59);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:122:59: ( 'extends' type )?
                if ( stream_31.hasNext()||stream_type.hasNext() ) {
                    dbg.location(122,60);
                    adaptor.addChild(root_0, stream_31.next());
                    dbg.location(122,70);
                    adaptor.addChild(root_0, stream_type.next());

                }
                stream_31.reset();
                stream_type.reset();
                dbg.location(122,77);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:122:77: ( 'implements' typeList )?
                if ( stream_typeList.hasNext()||stream_32.hasNext() ) {
                    dbg.location(122,78);
                    adaptor.addChild(root_0, stream_32.next());
                    dbg.location(122,91);
                    adaptor.addChild(root_0, stream_typeList.next());

                }
                stream_typeList.reset();
                stream_32.reset();
                dbg.location(122,102);
                adaptor.addChild(root_0, stream_classBody.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 7, normalClassDeclaration_StartIndex); }
        }
        dbg.location(123, 2);

        }
        finally {
            dbg.exitRule("normalClassDeclaration");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end normalClassDeclaration

    public static class typeParameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start typeParameters
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:125:1: typeParameters : '<' typeParameter ( ',' typeParameter )* '>' -> '<' typeParameter ( ',' typeParameter )* '>' ;
    public final typeParameters_return typeParameters() throws RecognitionException {
        typeParameters_return retval = new typeParameters_return();
        retval.start = input.LT(1);
        int typeParameters_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal32=null;
        Token char_literal34=null;
        Token char_literal36=null;
        typeParameter_return typeParameter33 = null;

        typeParameter_return typeParameter35 = null;


        Object char_literal32_tree=null;
        Object char_literal34_tree=null;
        Object char_literal36_tree=null;
        RewriteRuleTokenStream stream_35=new RewriteRuleTokenStream(adaptor,"token 35");
        RewriteRuleTokenStream stream_33=new RewriteRuleTokenStream(adaptor,"token 33");
        RewriteRuleTokenStream stream_34=new RewriteRuleTokenStream(adaptor,"token 34");
        RewriteRuleSubtreeStream stream_typeParameter=new RewriteRuleSubtreeStream(adaptor,"rule typeParameter");
        try { dbg.enterRule("typeParameters");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(125, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:126:2: ( '<' typeParameter ( ',' typeParameter )* '>' -> '<' typeParameter ( ',' typeParameter )* '>' )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:126:4: '<' typeParameter ( ',' typeParameter )* '>'
            {
            dbg.location(126,4);
            char_literal32=(Token)input.LT(1);
            match(input,33,FOLLOW_33_in_typeParameters369); if (failed) return retval;
            if ( backtracking==0 ) stream_33.add(char_literal32);

            dbg.location(126,8);
            pushFollow(FOLLOW_typeParameter_in_typeParameters371);
            typeParameter33=typeParameter();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_typeParameter.add(typeParameter33.getTree());
            dbg.location(126,22);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:126:22: ( ',' typeParameter )*
            try { dbg.enterSubRule(16);

            loop16:
            do {
                int alt16=2;
                try { dbg.enterDecision(16);

                int LA16_0 = input.LA(1);

                if ( (LA16_0==34) ) {
                    alt16=1;
                }


                } finally {dbg.exitDecision(16);}

                switch (alt16) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:126:23: ',' typeParameter
            	    {
            	    dbg.location(126,23);
            	    char_literal34=(Token)input.LT(1);
            	    match(input,34,FOLLOW_34_in_typeParameters374); if (failed) return retval;
            	    if ( backtracking==0 ) stream_34.add(char_literal34);

            	    dbg.location(126,27);
            	    pushFollow(FOLLOW_typeParameter_in_typeParameters376);
            	    typeParameter35=typeParameter();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_typeParameter.add(typeParameter35.getTree());

            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);
            } finally {dbg.exitSubRule(16);}

            dbg.location(126,43);
            char_literal36=(Token)input.LT(1);
            match(input,35,FOLLOW_35_in_typeParameters380); if (failed) return retval;
            if ( backtracking==0 ) stream_35.add(char_literal36);

            dbg.location(126,47);

            // AST REWRITE
            // elements: typeParameter, 35, typeParameter, 34, 33
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 126:47: -> '<' typeParameter ( ',' typeParameter )* '>'
            {
                dbg.location(126,50);
                adaptor.addChild(root_0, stream_33.next());
                dbg.location(126,54);
                adaptor.addChild(root_0, stream_typeParameter.next());
                dbg.location(126,68);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:126:68: ( ',' typeParameter )*
                while ( stream_typeParameter.hasNext()||stream_34.hasNext() ) {
                    dbg.location(126,69);
                    adaptor.addChild(root_0, stream_34.next());
                    dbg.location(126,73);
                    adaptor.addChild(root_0, stream_typeParameter.next());

                }
                stream_typeParameter.reset();
                stream_34.reset();
                dbg.location(126,89);
                adaptor.addChild(root_0, stream_35.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 8, typeParameters_StartIndex); }
        }
        dbg.location(127, 2);

        }
        finally {
            dbg.exitRule("typeParameters");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end typeParameters

    public static class typeParameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start typeParameter
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:129:1: typeParameter : Identifier ( 'extends' bound )? -> Identifier ( 'extends' bound )? ;
    public final typeParameter_return typeParameter() throws RecognitionException {
        typeParameter_return retval = new typeParameter_return();
        retval.start = input.LT(1);
        int typeParameter_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier37=null;
        Token string_literal38=null;
        bound_return bound39 = null;


        Object Identifier37_tree=null;
        Object string_literal38_tree=null;
        RewriteRuleTokenStream stream_31=new RewriteRuleTokenStream(adaptor,"token 31");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_bound=new RewriteRuleSubtreeStream(adaptor,"rule bound");
        try { dbg.enterRule("typeParameter");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(129, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:130:2: ( Identifier ( 'extends' bound )? -> Identifier ( 'extends' bound )? )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:130:4: Identifier ( 'extends' bound )?
            {
            dbg.location(130,4);
            Identifier37=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_typeParameter406); if (failed) return retval;
            if ( backtracking==0 ) stream_Identifier.add(Identifier37);

            dbg.location(130,15);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:130:15: ( 'extends' bound )?
            int alt17=2;
            try { dbg.enterSubRule(17);
            try { dbg.enterDecision(17);

            int LA17_0 = input.LA(1);

            if ( (LA17_0==31) ) {
                alt17=1;
            }
            } finally {dbg.exitDecision(17);}

            switch (alt17) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:130:16: 'extends' bound
                    {
                    dbg.location(130,16);
                    string_literal38=(Token)input.LT(1);
                    match(input,31,FOLLOW_31_in_typeParameter409); if (failed) return retval;
                    if ( backtracking==0 ) stream_31.add(string_literal38);

                    dbg.location(130,26);
                    pushFollow(FOLLOW_bound_in_typeParameter411);
                    bound39=bound();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_bound.add(bound39.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(17);}

            dbg.location(130,34);

            // AST REWRITE
            // elements: bound, 31, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 130:34: -> Identifier ( 'extends' bound )?
            {
                dbg.location(130,37);
                adaptor.addChild(root_0, stream_Identifier.next());
                dbg.location(130,48);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:130:48: ( 'extends' bound )?
                if ( stream_bound.hasNext()||stream_31.hasNext() ) {
                    dbg.location(130,49);
                    adaptor.addChild(root_0, stream_31.next());
                    dbg.location(130,59);
                    adaptor.addChild(root_0, stream_bound.next());

                }
                stream_bound.reset();
                stream_31.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 9, typeParameter_StartIndex); }
        }
        dbg.location(131, 2);

        }
        finally {
            dbg.exitRule("typeParameter");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end typeParameter

    public static class bound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start bound
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:133:1: bound : type ( '&' type )* -> type ( '&' type )* ;
    public final bound_return bound() throws RecognitionException {
        bound_return retval = new bound_return();
        retval.start = input.LT(1);
        int bound_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal41=null;
        type_return type40 = null;

        type_return type42 = null;


        Object char_literal41_tree=null;
        RewriteRuleTokenStream stream_36=new RewriteRuleTokenStream(adaptor,"token 36");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try { dbg.enterRule("bound");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(133, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:134:2: ( type ( '&' type )* -> type ( '&' type )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:134:4: type ( '&' type )*
            {
            dbg.location(134,4);
            pushFollow(FOLLOW_type_in_bound437);
            type40=type();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_type.add(type40.getTree());
            dbg.location(134,9);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:134:9: ( '&' type )*
            try { dbg.enterSubRule(18);

            loop18:
            do {
                int alt18=2;
                try { dbg.enterDecision(18);

                int LA18_0 = input.LA(1);

                if ( (LA18_0==36) ) {
                    alt18=1;
                }


                } finally {dbg.exitDecision(18);}

                switch (alt18) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:134:10: '&' type
            	    {
            	    dbg.location(134,10);
            	    char_literal41=(Token)input.LT(1);
            	    match(input,36,FOLLOW_36_in_bound440); if (failed) return retval;
            	    if ( backtracking==0 ) stream_36.add(char_literal41);

            	    dbg.location(134,14);
            	    pushFollow(FOLLOW_type_in_bound442);
            	    type42=type();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_type.add(type42.getTree());

            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);
            } finally {dbg.exitSubRule(18);}

            dbg.location(134,21);

            // AST REWRITE
            // elements: type, type, 36
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 134:21: -> type ( '&' type )*
            {
                dbg.location(134,24);
                adaptor.addChild(root_0, stream_type.next());
                dbg.location(134,29);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:134:29: ( '&' type )*
                while ( stream_type.hasNext()||stream_36.hasNext() ) {
                    dbg.location(134,30);
                    adaptor.addChild(root_0, stream_36.next());
                    dbg.location(134,34);
                    adaptor.addChild(root_0, stream_type.next());

                }
                stream_type.reset();
                stream_36.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 10, bound_StartIndex); }
        }
        dbg.location(135, 2);

        }
        finally {
            dbg.exitRule("bound");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end bound

    public static class enumDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start enumDeclaration
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:137:1: enumDeclaration : ENUM Identifier ( 'implements' typeList )? enumBody -> ENUM Identifier ( 'implements' typeList )? enumBody ;
    public final enumDeclaration_return enumDeclaration() throws RecognitionException {
        enumDeclaration_return retval = new enumDeclaration_return();
        retval.start = input.LT(1);
        int enumDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token ENUM43=null;
        Token Identifier44=null;
        Token string_literal45=null;
        typeList_return typeList46 = null;

        enumBody_return enumBody47 = null;


        Object ENUM43_tree=null;
        Object Identifier44_tree=null;
        Object string_literal45_tree=null;
        RewriteRuleTokenStream stream_ENUM=new RewriteRuleTokenStream(adaptor,"token ENUM");
        RewriteRuleTokenStream stream_32=new RewriteRuleTokenStream(adaptor,"token 32");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_enumBody=new RewriteRuleSubtreeStream(adaptor,"rule enumBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try { dbg.enterRule("enumDeclaration");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(137, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:138:2: ( ENUM Identifier ( 'implements' typeList )? enumBody -> ENUM Identifier ( 'implements' typeList )? enumBody )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:138:4: ENUM Identifier ( 'implements' typeList )? enumBody
            {
            dbg.location(138,4);
            ENUM43=(Token)input.LT(1);
            match(input,ENUM,FOLLOW_ENUM_in_enumDeclaration466); if (failed) return retval;
            if ( backtracking==0 ) stream_ENUM.add(ENUM43);

            dbg.location(138,9);
            Identifier44=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_enumDeclaration468); if (failed) return retval;
            if ( backtracking==0 ) stream_Identifier.add(Identifier44);

            dbg.location(138,20);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:138:20: ( 'implements' typeList )?
            int alt19=2;
            try { dbg.enterSubRule(19);
            try { dbg.enterDecision(19);

            int LA19_0 = input.LA(1);

            if ( (LA19_0==32) ) {
                alt19=1;
            }
            } finally {dbg.exitDecision(19);}

            switch (alt19) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:138:21: 'implements' typeList
                    {
                    dbg.location(138,21);
                    string_literal45=(Token)input.LT(1);
                    match(input,32,FOLLOW_32_in_enumDeclaration471); if (failed) return retval;
                    if ( backtracking==0 ) stream_32.add(string_literal45);

                    dbg.location(138,34);
                    pushFollow(FOLLOW_typeList_in_enumDeclaration473);
                    typeList46=typeList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_typeList.add(typeList46.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(19);}

            dbg.location(138,45);
            pushFollow(FOLLOW_enumBody_in_enumDeclaration477);
            enumBody47=enumBody();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_enumBody.add(enumBody47.getTree());
            dbg.location(138,54);

            // AST REWRITE
            // elements: typeList, Identifier, 32, enumBody, ENUM
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 138:54: -> ENUM Identifier ( 'implements' typeList )? enumBody
            {
                dbg.location(138,57);
                adaptor.addChild(root_0, stream_ENUM.next());
                dbg.location(138,62);
                adaptor.addChild(root_0, stream_Identifier.next());
                dbg.location(138,73);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:138:73: ( 'implements' typeList )?
                if ( stream_typeList.hasNext()||stream_32.hasNext() ) {
                    dbg.location(138,74);
                    adaptor.addChild(root_0, stream_32.next());
                    dbg.location(138,87);
                    adaptor.addChild(root_0, stream_typeList.next());

                }
                stream_typeList.reset();
                stream_32.reset();
                dbg.location(138,98);
                adaptor.addChild(root_0, stream_enumBody.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 11, enumDeclaration_StartIndex); }
        }
        dbg.location(139, 2);

        }
        finally {
            dbg.exitRule("enumDeclaration");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end enumDeclaration

    public static class enumBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start enumBody
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:141:1: enumBody : '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}' -> '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}' ;
    public final enumBody_return enumBody() throws RecognitionException {
        enumBody_return retval = new enumBody_return();
        retval.start = input.LT(1);
        int enumBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal48=null;
        Token char_literal50=null;
        Token char_literal52=null;
        enumConstants_return enumConstants49 = null;

        enumBodyDeclarations_return enumBodyDeclarations51 = null;


        Object char_literal48_tree=null;
        Object char_literal50_tree=null;
        Object char_literal52_tree=null;
        RewriteRuleTokenStream stream_34=new RewriteRuleTokenStream(adaptor,"token 34");
        RewriteRuleTokenStream stream_37=new RewriteRuleTokenStream(adaptor,"token 37");
        RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");
        RewriteRuleSubtreeStream stream_enumBodyDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule enumBodyDeclarations");
        RewriteRuleSubtreeStream stream_enumConstants=new RewriteRuleSubtreeStream(adaptor,"rule enumConstants");
        try { dbg.enterRule("enumBody");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(141, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:142:2: ( '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}' -> '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}' )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:142:4: '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}'
            {
            dbg.location(142,4);
            char_literal48=(Token)input.LT(1);
            match(input,37,FOLLOW_37_in_enumBody504); if (failed) return retval;
            if ( backtracking==0 ) stream_37.add(char_literal48);

            dbg.location(142,8);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:142:8: ( enumConstants )?
            int alt20=2;
            try { dbg.enterSubRule(20);
            try { dbg.enterDecision(20);

            int LA20_0 = input.LA(1);

            if ( (LA20_0==Identifier||LA20_0==71) ) {
                alt20=1;
            }
            } finally {dbg.exitDecision(20);}

            switch (alt20) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: enumConstants
                    {
                    dbg.location(142,8);
                    pushFollow(FOLLOW_enumConstants_in_enumBody506);
                    enumConstants49=enumConstants();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_enumConstants.add(enumConstants49.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(20);}

            dbg.location(142,23);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:142:23: ( ',' )?
            int alt21=2;
            try { dbg.enterSubRule(21);
            try { dbg.enterDecision(21);

            int LA21_0 = input.LA(1);

            if ( (LA21_0==34) ) {
                alt21=1;
            }
            } finally {dbg.exitDecision(21);}

            switch (alt21) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: ','
                    {
                    dbg.location(142,23);
                    char_literal50=(Token)input.LT(1);
                    match(input,34,FOLLOW_34_in_enumBody509); if (failed) return retval;
                    if ( backtracking==0 ) stream_34.add(char_literal50);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(21);}

            dbg.location(142,28);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:142:28: ( enumBodyDeclarations )?
            int alt22=2;
            try { dbg.enterSubRule(22);
            try { dbg.enterDecision(22);

            int LA22_0 = input.LA(1);

            if ( (LA22_0==25) ) {
                alt22=1;
            }
            } finally {dbg.exitDecision(22);}

            switch (alt22) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: enumBodyDeclarations
                    {
                    dbg.location(142,28);
                    pushFollow(FOLLOW_enumBodyDeclarations_in_enumBody512);
                    enumBodyDeclarations51=enumBodyDeclarations();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_enumBodyDeclarations.add(enumBodyDeclarations51.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(22);}

            dbg.location(142,50);
            char_literal52=(Token)input.LT(1);
            match(input,38,FOLLOW_38_in_enumBody515); if (failed) return retval;
            if ( backtracking==0 ) stream_38.add(char_literal52);

            dbg.location(142,54);

            // AST REWRITE
            // elements: enumBodyDeclarations, 37, 38, enumConstants, 34
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 142:54: -> '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}'
            {
                dbg.location(142,57);
                adaptor.addChild(root_0, stream_37.next());
                dbg.location(142,61);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:142:61: ( enumConstants )?
                if ( stream_enumConstants.hasNext() ) {
                    dbg.location(142,61);
                    adaptor.addChild(root_0, stream_enumConstants.next());

                }
                stream_enumConstants.reset();
                dbg.location(142,76);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:142:76: ( ',' )?
                if ( stream_34.hasNext() ) {
                    dbg.location(142,76);
                    adaptor.addChild(root_0, stream_34.next());

                }
                stream_34.reset();
                dbg.location(142,81);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:142:81: ( enumBodyDeclarations )?
                if ( stream_enumBodyDeclarations.hasNext() ) {
                    dbg.location(142,81);
                    adaptor.addChild(root_0, stream_enumBodyDeclarations.next());

                }
                stream_enumBodyDeclarations.reset();
                dbg.location(142,103);
                adaptor.addChild(root_0, stream_38.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 12, enumBody_StartIndex); }
        }
        dbg.location(143, 2);

        }
        finally {
            dbg.exitRule("enumBody");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end enumBody

    public static class enumConstants_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start enumConstants
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:145:1: enumConstants : enumConstant ( ',' enumConstant )* -> enumConstant ( ',' enumConstant )* ;
    public final enumConstants_return enumConstants() throws RecognitionException {
        enumConstants_return retval = new enumConstants_return();
        retval.start = input.LT(1);
        int enumConstants_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal54=null;
        enumConstant_return enumConstant53 = null;

        enumConstant_return enumConstant55 = null;


        Object char_literal54_tree=null;
        RewriteRuleTokenStream stream_34=new RewriteRuleTokenStream(adaptor,"token 34");
        RewriteRuleSubtreeStream stream_enumConstant=new RewriteRuleSubtreeStream(adaptor,"rule enumConstant");
        try { dbg.enterRule("enumConstants");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(145, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:146:2: ( enumConstant ( ',' enumConstant )* -> enumConstant ( ',' enumConstant )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:146:4: enumConstant ( ',' enumConstant )*
            {
            dbg.location(146,4);
            pushFollow(FOLLOW_enumConstant_in_enumConstants541);
            enumConstant53=enumConstant();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_enumConstant.add(enumConstant53.getTree());
            dbg.location(146,17);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:146:17: ( ',' enumConstant )*
            try { dbg.enterSubRule(23);

            loop23:
            do {
                int alt23=2;
                try { dbg.enterDecision(23);

                int LA23_0 = input.LA(1);

                if ( (LA23_0==34) ) {
                    int LA23_1 = input.LA(2);

                    if ( (LA23_1==Identifier||LA23_1==71) ) {
                        alt23=1;
                    }


                }


                } finally {dbg.exitDecision(23);}

                switch (alt23) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:146:18: ',' enumConstant
            	    {
            	    dbg.location(146,18);
            	    char_literal54=(Token)input.LT(1);
            	    match(input,34,FOLLOW_34_in_enumConstants544); if (failed) return retval;
            	    if ( backtracking==0 ) stream_34.add(char_literal54);

            	    dbg.location(146,22);
            	    pushFollow(FOLLOW_enumConstant_in_enumConstants546);
            	    enumConstant55=enumConstant();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_enumConstant.add(enumConstant55.getTree());

            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);
            } finally {dbg.exitSubRule(23);}

            dbg.location(146,37);

            // AST REWRITE
            // elements: 34, enumConstant, enumConstant
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 146:37: -> enumConstant ( ',' enumConstant )*
            {
                dbg.location(146,40);
                adaptor.addChild(root_0, stream_enumConstant.next());
                dbg.location(146,53);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:146:53: ( ',' enumConstant )*
                while ( stream_34.hasNext()||stream_enumConstant.hasNext() ) {
                    dbg.location(146,54);
                    adaptor.addChild(root_0, stream_34.next());
                    dbg.location(146,58);
                    adaptor.addChild(root_0, stream_enumConstant.next());

                }
                stream_34.reset();
                stream_enumConstant.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 13, enumConstants_StartIndex); }
        }
        dbg.location(147, 2);

        }
        finally {
            dbg.exitRule("enumConstants");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end enumConstants

    public static class enumConstant_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start enumConstant
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:149:1: enumConstant : ( annotations )? Identifier ( arguments )? ( classBody )? -> ( annotations )? Identifier ( arguments )? ( classBody )? ;
    public final enumConstant_return enumConstant() throws RecognitionException {
        enumConstant_return retval = new enumConstant_return();
        retval.start = input.LT(1);
        int enumConstant_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier57=null;
        annotations_return annotations56 = null;

        arguments_return arguments58 = null;

        classBody_return classBody59 = null;


        Object Identifier57_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_annotations=new RewriteRuleSubtreeStream(adaptor,"rule annotations");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        try { dbg.enterRule("enumConstant");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(149, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:150:2: ( ( annotations )? Identifier ( arguments )? ( classBody )? -> ( annotations )? Identifier ( arguments )? ( classBody )? )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:150:4: ( annotations )? Identifier ( arguments )? ( classBody )?
            {
            dbg.location(150,4);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:150:4: ( annotations )?
            int alt24=2;
            try { dbg.enterSubRule(24);
            try { dbg.enterDecision(24);

            int LA24_0 = input.LA(1);

            if ( (LA24_0==71) ) {
                alt24=1;
            }
            } finally {dbg.exitDecision(24);}

            switch (alt24) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: annotations
                    {
                    dbg.location(150,4);
                    pushFollow(FOLLOW_annotations_in_enumConstant572);
                    annotations56=annotations();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_annotations.add(annotations56.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(24);}

            dbg.location(150,17);
            Identifier57=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_enumConstant575); if (failed) return retval;
            if ( backtracking==0 ) stream_Identifier.add(Identifier57);

            dbg.location(150,28);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:150:28: ( arguments )?
            int alt25=2;
            try { dbg.enterSubRule(25);
            try { dbg.enterDecision(25);

            int LA25_0 = input.LA(1);

            if ( (LA25_0==65) ) {
                alt25=1;
            }
            } finally {dbg.exitDecision(25);}

            switch (alt25) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:150:29: arguments
                    {
                    dbg.location(150,29);
                    pushFollow(FOLLOW_arguments_in_enumConstant578);
                    arguments58=arguments();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_arguments.add(arguments58.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(25);}

            dbg.location(150,41);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:150:41: ( classBody )?
            int alt26=2;
            try { dbg.enterSubRule(26);
            try { dbg.enterDecision(26);

            int LA26_0 = input.LA(1);

            if ( (LA26_0==37) ) {
                alt26=1;
            }
            } finally {dbg.exitDecision(26);}

            switch (alt26) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:150:42: classBody
                    {
                    dbg.location(150,42);
                    pushFollow(FOLLOW_classBody_in_enumConstant583);
                    classBody59=classBody();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_classBody.add(classBody59.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(26);}

            dbg.location(150,54);

            // AST REWRITE
            // elements: Identifier, annotations, classBody, arguments
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 150:54: -> ( annotations )? Identifier ( arguments )? ( classBody )?
            {
                dbg.location(150,57);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:150:57: ( annotations )?
                if ( stream_annotations.hasNext() ) {
                    dbg.location(150,57);
                    adaptor.addChild(root_0, stream_annotations.next());

                }
                stream_annotations.reset();
                dbg.location(150,70);
                adaptor.addChild(root_0, stream_Identifier.next());
                dbg.location(150,81);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:150:81: ( arguments )?
                if ( stream_arguments.hasNext() ) {
                    dbg.location(150,82);
                    adaptor.addChild(root_0, stream_arguments.next());

                }
                stream_arguments.reset();
                dbg.location(150,94);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:150:94: ( classBody )?
                if ( stream_classBody.hasNext() ) {
                    dbg.location(150,95);
                    adaptor.addChild(root_0, stream_classBody.next());

                }
                stream_classBody.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 14, enumConstant_StartIndex); }
        }
        dbg.location(151, 2);

        }
        finally {
            dbg.exitRule("enumConstant");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end enumConstant

    public static class enumBodyDeclarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start enumBodyDeclarations
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:153:1: enumBodyDeclarations : ';' ( classBodyDeclaration )* -> ';' ( classBodyDeclaration )* ;
    public final enumBodyDeclarations_return enumBodyDeclarations() throws RecognitionException {
        enumBodyDeclarations_return retval = new enumBodyDeclarations_return();
        retval.start = input.LT(1);
        int enumBodyDeclarations_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal60=null;
        classBodyDeclaration_return classBodyDeclaration61 = null;


        Object char_literal60_tree=null;
        RewriteRuleTokenStream stream_25=new RewriteRuleTokenStream(adaptor,"token 25");
        RewriteRuleSubtreeStream stream_classBodyDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classBodyDeclaration");
        try { dbg.enterRule("enumBodyDeclarations");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(153, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:154:2: ( ';' ( classBodyDeclaration )* -> ';' ( classBodyDeclaration )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:154:4: ';' ( classBodyDeclaration )*
            {
            dbg.location(154,4);
            char_literal60=(Token)input.LT(1);
            match(input,25,FOLLOW_25_in_enumBodyDeclarations614); if (failed) return retval;
            if ( backtracking==0 ) stream_25.add(char_literal60);

            dbg.location(154,8);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:154:8: ( classBodyDeclaration )*
            try { dbg.enterSubRule(27);

            loop27:
            do {
                int alt27=2;
                try { dbg.enterDecision(27);

                int LA27_0 = input.LA(1);

                if ( ((LA27_0>=Identifier && LA27_0<=ENUM)||LA27_0==25||LA27_0==27||LA27_0==30||LA27_0==33||LA27_0==37||(LA27_0>=39 && LA27_0<=40)||(LA27_0>=45 && LA27_0<=62)||LA27_0==71) ) {
                    alt27=1;
                }


                } finally {dbg.exitDecision(27);}

                switch (alt27) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:154:9: classBodyDeclaration
            	    {
            	    dbg.location(154,9);
            	    pushFollow(FOLLOW_classBodyDeclaration_in_enumBodyDeclarations617);
            	    classBodyDeclaration61=classBodyDeclaration();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_classBodyDeclaration.add(classBodyDeclaration61.getTree());

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);
            } finally {dbg.exitSubRule(27);}

            dbg.location(154,32);

            // AST REWRITE
            // elements: 25, classBodyDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 154:32: -> ';' ( classBodyDeclaration )*
            {
                dbg.location(154,35);
                adaptor.addChild(root_0, stream_25.next());
                dbg.location(154,39);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:154:39: ( classBodyDeclaration )*
                while ( stream_classBodyDeclaration.hasNext() ) {
                    dbg.location(154,40);
                    adaptor.addChild(root_0, stream_classBodyDeclaration.next());

                }
                stream_classBodyDeclaration.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 15, enumBodyDeclarations_StartIndex); }
        }
        dbg.location(155, 2);

        }
        finally {
            dbg.exitRule("enumBodyDeclarations");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end enumBodyDeclarations

    public static class interfaceDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start interfaceDeclaration
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:157:1: interfaceDeclaration : ( normalInterfaceDeclaration -> normalInterfaceDeclaration | annotationTypeDeclaration -> annotationTypeDeclaration );
    public final interfaceDeclaration_return interfaceDeclaration() throws RecognitionException {
        interfaceDeclaration_return retval = new interfaceDeclaration_return();
        retval.start = input.LT(1);
        int interfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        normalInterfaceDeclaration_return normalInterfaceDeclaration62 = null;

        annotationTypeDeclaration_return annotationTypeDeclaration63 = null;


        RewriteRuleSubtreeStream stream_annotationTypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule annotationTypeDeclaration");
        RewriteRuleSubtreeStream stream_normalInterfaceDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule normalInterfaceDeclaration");
        try { dbg.enterRule("interfaceDeclaration");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(157, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:158:2: ( normalInterfaceDeclaration -> normalInterfaceDeclaration | annotationTypeDeclaration -> annotationTypeDeclaration )
            int alt28=2;
            try { dbg.enterDecision(28);

            int LA28_0 = input.LA(1);

            if ( (LA28_0==39) ) {
                alt28=1;
            }
            else if ( (LA28_0==71) ) {
                alt28=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("157:1: interfaceDeclaration : ( normalInterfaceDeclaration -> normalInterfaceDeclaration | annotationTypeDeclaration -> annotationTypeDeclaration );", 28, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(28);}

            switch (alt28) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:158:4: normalInterfaceDeclaration
                    {
                    dbg.location(158,4);
                    pushFollow(FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration640);
                    normalInterfaceDeclaration62=normalInterfaceDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_normalInterfaceDeclaration.add(normalInterfaceDeclaration62.getTree());
                    dbg.location(158,31);

                    // AST REWRITE
                    // elements: normalInterfaceDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 158:31: -> normalInterfaceDeclaration
                    {
                        dbg.location(158,34);
                        adaptor.addChild(root_0, stream_normalInterfaceDeclaration.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:159:5: annotationTypeDeclaration
                    {
                    dbg.location(159,5);
                    pushFollow(FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration650);
                    annotationTypeDeclaration63=annotationTypeDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_annotationTypeDeclaration.add(annotationTypeDeclaration63.getTree());
                    dbg.location(159,31);

                    // AST REWRITE
                    // elements: annotationTypeDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 159:31: -> annotationTypeDeclaration
                    {
                        dbg.location(159,34);
                        adaptor.addChild(root_0, stream_annotationTypeDeclaration.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 16, interfaceDeclaration_StartIndex); }
        }
        dbg.location(160, 2);

        }
        finally {
            dbg.exitRule("interfaceDeclaration");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end interfaceDeclaration

    public static class normalInterfaceDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start normalInterfaceDeclaration
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:162:1: normalInterfaceDeclaration : 'interface' Identifier ( typeParameters )? ( 'extends' typeList )? interfaceBody -> 'interface' Identifier ( typeParameters )? ( 'extends' typeList )? interfaceBody ;
    public final normalInterfaceDeclaration_return normalInterfaceDeclaration() throws RecognitionException {
        normalInterfaceDeclaration_return retval = new normalInterfaceDeclaration_return();
        retval.start = input.LT(1);
        int normalInterfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal64=null;
        Token Identifier65=null;
        Token string_literal67=null;
        typeParameters_return typeParameters66 = null;

        typeList_return typeList68 = null;

        interfaceBody_return interfaceBody69 = null;


        Object string_literal64_tree=null;
        Object Identifier65_tree=null;
        Object string_literal67_tree=null;
        RewriteRuleTokenStream stream_31=new RewriteRuleTokenStream(adaptor,"token 31");
        RewriteRuleTokenStream stream_39=new RewriteRuleTokenStream(adaptor,"token 39");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_interfaceBody=new RewriteRuleSubtreeStream(adaptor,"rule interfaceBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try { dbg.enterRule("normalInterfaceDeclaration");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(162, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:163:2: ( 'interface' Identifier ( typeParameters )? ( 'extends' typeList )? interfaceBody -> 'interface' Identifier ( typeParameters )? ( 'extends' typeList )? interfaceBody )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:163:4: 'interface' Identifier ( typeParameters )? ( 'extends' typeList )? interfaceBody
            {
            dbg.location(163,4);
            string_literal64=(Token)input.LT(1);
            match(input,39,FOLLOW_39_in_normalInterfaceDeclaration666); if (failed) return retval;
            if ( backtracking==0 ) stream_39.add(string_literal64);

            dbg.location(163,16);
            Identifier65=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_normalInterfaceDeclaration668); if (failed) return retval;
            if ( backtracking==0 ) stream_Identifier.add(Identifier65);

            dbg.location(163,27);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:163:27: ( typeParameters )?
            int alt29=2;
            try { dbg.enterSubRule(29);
            try { dbg.enterDecision(29);

            int LA29_0 = input.LA(1);

            if ( (LA29_0==33) ) {
                alt29=1;
            }
            } finally {dbg.exitDecision(29);}

            switch (alt29) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: typeParameters
                    {
                    dbg.location(163,27);
                    pushFollow(FOLLOW_typeParameters_in_normalInterfaceDeclaration670);
                    typeParameters66=typeParameters();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_typeParameters.add(typeParameters66.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(29);}

            dbg.location(163,43);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:163:43: ( 'extends' typeList )?
            int alt30=2;
            try { dbg.enterSubRule(30);
            try { dbg.enterDecision(30);

            int LA30_0 = input.LA(1);

            if ( (LA30_0==31) ) {
                alt30=1;
            }
            } finally {dbg.exitDecision(30);}

            switch (alt30) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:163:44: 'extends' typeList
                    {
                    dbg.location(163,44);
                    string_literal67=(Token)input.LT(1);
                    match(input,31,FOLLOW_31_in_normalInterfaceDeclaration674); if (failed) return retval;
                    if ( backtracking==0 ) stream_31.add(string_literal67);

                    dbg.location(163,54);
                    pushFollow(FOLLOW_typeList_in_normalInterfaceDeclaration676);
                    typeList68=typeList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_typeList.add(typeList68.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(30);}

            dbg.location(163,65);
            pushFollow(FOLLOW_interfaceBody_in_normalInterfaceDeclaration680);
            interfaceBody69=interfaceBody();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_interfaceBody.add(interfaceBody69.getTree());
            dbg.location(163,79);

            // AST REWRITE
            // elements: interfaceBody, typeList, 39, Identifier, 31, typeParameters
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 163:79: -> 'interface' Identifier ( typeParameters )? ( 'extends' typeList )? interfaceBody
            {
                dbg.location(164,10);
                adaptor.addChild(root_0, stream_39.next());
                dbg.location(164,22);
                adaptor.addChild(root_0, stream_Identifier.next());
                dbg.location(164,33);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:164:33: ( typeParameters )?
                if ( stream_typeParameters.hasNext() ) {
                    dbg.location(164,33);
                    adaptor.addChild(root_0, stream_typeParameters.next());

                }
                stream_typeParameters.reset();
                dbg.location(164,49);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:164:49: ( 'extends' typeList )?
                if ( stream_typeList.hasNext()||stream_31.hasNext() ) {
                    dbg.location(164,50);
                    adaptor.addChild(root_0, stream_31.next());
                    dbg.location(164,60);
                    adaptor.addChild(root_0, stream_typeList.next());

                }
                stream_typeList.reset();
                stream_31.reset();
                dbg.location(164,71);
                adaptor.addChild(root_0, stream_interfaceBody.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 17, normalInterfaceDeclaration_StartIndex); }
        }
        dbg.location(165, 2);

        }
        finally {
            dbg.exitRule("normalInterfaceDeclaration");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end normalInterfaceDeclaration

    public static class typeList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start typeList
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:167:1: typeList : type ( ',' type )* -> type ( ',' type )* ;
    public final typeList_return typeList() throws RecognitionException {
        typeList_return retval = new typeList_return();
        retval.start = input.LT(1);
        int typeList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal71=null;
        type_return type70 = null;

        type_return type72 = null;


        Object char_literal71_tree=null;
        RewriteRuleTokenStream stream_34=new RewriteRuleTokenStream(adaptor,"token 34");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try { dbg.enterRule("typeList");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(167, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:168:2: ( type ( ',' type )* -> type ( ',' type )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:168:4: type ( ',' type )*
            {
            dbg.location(168,4);
            pushFollow(FOLLOW_type_in_typeList719);
            type70=type();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_type.add(type70.getTree());
            dbg.location(168,9);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:168:9: ( ',' type )*
            try { dbg.enterSubRule(31);

            loop31:
            do {
                int alt31=2;
                try { dbg.enterDecision(31);

                int LA31_0 = input.LA(1);

                if ( (LA31_0==34) ) {
                    alt31=1;
                }


                } finally {dbg.exitDecision(31);}

                switch (alt31) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:168:10: ',' type
            	    {
            	    dbg.location(168,10);
            	    char_literal71=(Token)input.LT(1);
            	    match(input,34,FOLLOW_34_in_typeList722); if (failed) return retval;
            	    if ( backtracking==0 ) stream_34.add(char_literal71);

            	    dbg.location(168,14);
            	    pushFollow(FOLLOW_type_in_typeList724);
            	    type72=type();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_type.add(type72.getTree());

            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);
            } finally {dbg.exitSubRule(31);}

            dbg.location(168,21);

            // AST REWRITE
            // elements: type, 34, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 168:21: -> type ( ',' type )*
            {
                dbg.location(168,24);
                adaptor.addChild(root_0, stream_type.next());
                dbg.location(168,29);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:168:29: ( ',' type )*
                while ( stream_34.hasNext()||stream_type.hasNext() ) {
                    dbg.location(168,30);
                    adaptor.addChild(root_0, stream_34.next());
                    dbg.location(168,34);
                    adaptor.addChild(root_0, stream_type.next());

                }
                stream_34.reset();
                stream_type.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 18, typeList_StartIndex); }
        }
        dbg.location(169, 2);

        }
        finally {
            dbg.exitRule("typeList");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end typeList

    public static class classBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start classBody
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:171:1: classBody : '{' ( classBodyDeclaration )* '}' -> '{' ( classBodyDeclaration )* '}' ;
    public final classBody_return classBody() throws RecognitionException {
        classBody_return retval = new classBody_return();
        retval.start = input.LT(1);
        int classBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal73=null;
        Token char_literal75=null;
        classBodyDeclaration_return classBodyDeclaration74 = null;


        Object char_literal73_tree=null;
        Object char_literal75_tree=null;
        RewriteRuleTokenStream stream_37=new RewriteRuleTokenStream(adaptor,"token 37");
        RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");
        RewriteRuleSubtreeStream stream_classBodyDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classBodyDeclaration");
        try { dbg.enterRule("classBody");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(171, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:172:2: ( '{' ( classBodyDeclaration )* '}' -> '{' ( classBodyDeclaration )* '}' )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:172:4: '{' ( classBodyDeclaration )* '}'
            {
            dbg.location(172,4);
            char_literal73=(Token)input.LT(1);
            match(input,37,FOLLOW_37_in_classBody749); if (failed) return retval;
            if ( backtracking==0 ) stream_37.add(char_literal73);

            dbg.location(172,8);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:172:8: ( classBodyDeclaration )*
            try { dbg.enterSubRule(32);

            loop32:
            do {
                int alt32=2;
                try { dbg.enterDecision(32);

                int LA32_0 = input.LA(1);

                if ( ((LA32_0>=Identifier && LA32_0<=ENUM)||LA32_0==25||LA32_0==27||LA32_0==30||LA32_0==33||LA32_0==37||(LA32_0>=39 && LA32_0<=40)||(LA32_0>=45 && LA32_0<=62)||LA32_0==71) ) {
                    alt32=1;
                }


                } finally {dbg.exitDecision(32);}

                switch (alt32) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: classBodyDeclaration
            	    {
            	    dbg.location(172,8);
            	    pushFollow(FOLLOW_classBodyDeclaration_in_classBody751);
            	    classBodyDeclaration74=classBodyDeclaration();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_classBodyDeclaration.add(classBodyDeclaration74.getTree());

            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);
            } finally {dbg.exitSubRule(32);}

            dbg.location(172,30);
            char_literal75=(Token)input.LT(1);
            match(input,38,FOLLOW_38_in_classBody754); if (failed) return retval;
            if ( backtracking==0 ) stream_38.add(char_literal75);

            dbg.location(172,34);

            // AST REWRITE
            // elements: 38, classBodyDeclaration, 37
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 172:34: -> '{' ( classBodyDeclaration )* '}'
            {
                dbg.location(172,37);
                adaptor.addChild(root_0, stream_37.next());
                dbg.location(172,41);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:172:41: ( classBodyDeclaration )*
                while ( stream_classBodyDeclaration.hasNext() ) {
                    dbg.location(172,41);
                    adaptor.addChild(root_0, stream_classBodyDeclaration.next());

                }
                stream_classBodyDeclaration.reset();
                dbg.location(172,63);
                adaptor.addChild(root_0, stream_38.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 19, classBody_StartIndex); }
        }
        dbg.location(173, 2);

        }
        finally {
            dbg.exitRule("classBody");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end classBody

    public static class interfaceBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start interfaceBody
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:175:1: interfaceBody : '{' ( interfaceBodyDeclaration )* '}' -> '{' ( interfaceBodyDeclaration )* '}' ;
    public final interfaceBody_return interfaceBody() throws RecognitionException {
        interfaceBody_return retval = new interfaceBody_return();
        retval.start = input.LT(1);
        int interfaceBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal76=null;
        Token char_literal78=null;
        interfaceBodyDeclaration_return interfaceBodyDeclaration77 = null;


        Object char_literal76_tree=null;
        Object char_literal78_tree=null;
        RewriteRuleTokenStream stream_37=new RewriteRuleTokenStream(adaptor,"token 37");
        RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");
        RewriteRuleSubtreeStream stream_interfaceBodyDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule interfaceBodyDeclaration");
        try { dbg.enterRule("interfaceBody");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(175, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:176:2: ( '{' ( interfaceBodyDeclaration )* '}' -> '{' ( interfaceBodyDeclaration )* '}' )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:176:4: '{' ( interfaceBodyDeclaration )* '}'
            {
            dbg.location(176,4);
            char_literal76=(Token)input.LT(1);
            match(input,37,FOLLOW_37_in_interfaceBody775); if (failed) return retval;
            if ( backtracking==0 ) stream_37.add(char_literal76);

            dbg.location(176,8);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:176:8: ( interfaceBodyDeclaration )*
            try { dbg.enterSubRule(33);

            loop33:
            do {
                int alt33=2;
                try { dbg.enterDecision(33);

                int LA33_0 = input.LA(1);

                if ( ((LA33_0>=Identifier && LA33_0<=ENUM)||LA33_0==25||LA33_0==27||LA33_0==30||LA33_0==33||(LA33_0>=39 && LA33_0<=40)||(LA33_0>=45 && LA33_0<=62)||LA33_0==71) ) {
                    alt33=1;
                }


                } finally {dbg.exitDecision(33);}

                switch (alt33) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: interfaceBodyDeclaration
            	    {
            	    dbg.location(176,8);
            	    pushFollow(FOLLOW_interfaceBodyDeclaration_in_interfaceBody777);
            	    interfaceBodyDeclaration77=interfaceBodyDeclaration();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_interfaceBodyDeclaration.add(interfaceBodyDeclaration77.getTree());

            	    }
            	    break;

            	default :
            	    break loop33;
                }
            } while (true);
            } finally {dbg.exitSubRule(33);}

            dbg.location(176,34);
            char_literal78=(Token)input.LT(1);
            match(input,38,FOLLOW_38_in_interfaceBody780); if (failed) return retval;
            if ( backtracking==0 ) stream_38.add(char_literal78);

            dbg.location(176,38);

            // AST REWRITE
            // elements: 38, interfaceBodyDeclaration, 37
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 176:38: -> '{' ( interfaceBodyDeclaration )* '}'
            {
                dbg.location(176,41);
                adaptor.addChild(root_0, stream_37.next());
                dbg.location(176,45);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:176:45: ( interfaceBodyDeclaration )*
                while ( stream_interfaceBodyDeclaration.hasNext() ) {
                    dbg.location(176,45);
                    adaptor.addChild(root_0, stream_interfaceBodyDeclaration.next());

                }
                stream_interfaceBodyDeclaration.reset();
                dbg.location(176,71);
                adaptor.addChild(root_0, stream_38.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 20, interfaceBody_StartIndex); }
        }
        dbg.location(177, 2);

        }
        finally {
            dbg.exitRule("interfaceBody");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end interfaceBody

    public static class classBodyDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start classBodyDeclaration
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:179:1: classBodyDeclaration : ( ';' -> ';' | ( 'static' )? block -> ( 'static' )? block | ( modifier )* memberDecl -> ( modifier )* memberDecl );
    public final classBodyDeclaration_return classBodyDeclaration() throws RecognitionException {
        classBodyDeclaration_return retval = new classBodyDeclaration_return();
        retval.start = input.LT(1);
        int classBodyDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal79=null;
        Token string_literal80=null;
        block_return block81 = null;

        modifier_return modifier82 = null;

        memberDecl_return memberDecl83 = null;


        Object char_literal79_tree=null;
        Object string_literal80_tree=null;
        RewriteRuleTokenStream stream_25=new RewriteRuleTokenStream(adaptor,"token 25");
        RewriteRuleTokenStream stream_27=new RewriteRuleTokenStream(adaptor,"token 27");
        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        RewriteRuleSubtreeStream stream_memberDecl=new RewriteRuleSubtreeStream(adaptor,"rule memberDecl");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try { dbg.enterRule("classBodyDeclaration");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(179, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:180:2: ( ';' -> ';' | ( 'static' )? block -> ( 'static' )? block | ( modifier )* memberDecl -> ( modifier )* memberDecl )
            int alt36=3;
            try { dbg.enterDecision(36);

            switch ( input.LA(1) ) {
            case 25:
                {
                alt36=1;
                }
                break;
            case 27:
                {
                int LA36_2 = input.LA(2);

                if ( ((LA36_2>=Identifier && LA36_2<=ENUM)||LA36_2==27||LA36_2==30||LA36_2==33||(LA36_2>=39 && LA36_2<=40)||(LA36_2>=45 && LA36_2<=62)||LA36_2==71) ) {
                    alt36=3;
                }
                else if ( (LA36_2==37) ) {
                    alt36=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("179:1: classBodyDeclaration : ( ';' -> ';' | ( 'static' )? block -> ( 'static' )? block | ( modifier )* memberDecl -> ( modifier )* memberDecl );", 36, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                }
                break;
            case 37:
                {
                alt36=2;
                }
                break;
            case Identifier:
            case ENUM:
            case 30:
            case 33:
            case 39:
            case 40:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 71:
                {
                alt36=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("179:1: classBodyDeclaration : ( ';' -> ';' | ( 'static' )? block -> ( 'static' )? block | ( modifier )* memberDecl -> ( modifier )* memberDecl );", 36, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(36);}

            switch (alt36) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:180:4: ';'
                    {
                    dbg.location(180,4);
                    char_literal79=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_classBodyDeclaration800); if (failed) return retval;
                    if ( backtracking==0 ) stream_25.add(char_literal79);

                    dbg.location(180,8);

                    // AST REWRITE
                    // elements: 25
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 180:8: -> ';'
                    {
                        dbg.location(180,11);
                        adaptor.addChild(root_0, stream_25.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:181:4: ( 'static' )? block
                    {
                    dbg.location(181,4);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:181:4: ( 'static' )?
                    int alt34=2;
                    try { dbg.enterSubRule(34);
                    try { dbg.enterDecision(34);

                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==27) ) {
                        alt34=1;
                    }
                    } finally {dbg.exitDecision(34);}

                    switch (alt34) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: 'static'
                            {
                            dbg.location(181,4);
                            string_literal80=(Token)input.LT(1);
                            match(input,27,FOLLOW_27_in_classBodyDeclaration809); if (failed) return retval;
                            if ( backtracking==0 ) stream_27.add(string_literal80);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(34);}

                    dbg.location(181,14);
                    pushFollow(FOLLOW_block_in_classBodyDeclaration812);
                    block81=block();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_block.add(block81.getTree());
                    dbg.location(181,20);

                    // AST REWRITE
                    // elements: block, 27
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 181:20: -> ( 'static' )? block
                    {
                        dbg.location(181,23);
                        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:181:23: ( 'static' )?
                        if ( stream_27.hasNext() ) {
                            dbg.location(181,23);
                            adaptor.addChild(root_0, stream_27.next());

                        }
                        stream_27.reset();
                        dbg.location(181,33);
                        adaptor.addChild(root_0, stream_block.next());

                    }

                    }

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:182:4: ( modifier )* memberDecl
                    {
                    dbg.location(182,4);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:182:4: ( modifier )*
                    try { dbg.enterSubRule(35);

                    loop35:
                    do {
                        int alt35=2;
                        try { dbg.enterDecision(35);

                        int LA35_0 = input.LA(1);

                        if ( (LA35_0==71) ) {
                            int LA35_13 = input.LA(2);

                            if ( (LA35_13==Identifier) ) {
                                alt35=1;
                            }


                        }
                        else if ( (LA35_0==27||(LA35_0>=45 && LA35_0<=54)) ) {
                            alt35=1;
                        }


                        } finally {dbg.exitDecision(35);}

                        switch (alt35) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: modifier
                    	    {
                    	    dbg.location(182,4);
                    	    pushFollow(FOLLOW_modifier_in_classBodyDeclaration824);
                    	    modifier82=modifier();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_modifier.add(modifier82.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop35;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(35);}

                    dbg.location(182,14);
                    pushFollow(FOLLOW_memberDecl_in_classBodyDeclaration827);
                    memberDecl83=memberDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_memberDecl.add(memberDecl83.getTree());
                    dbg.location(182,25);

                    // AST REWRITE
                    // elements: memberDecl, modifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 182:25: -> ( modifier )* memberDecl
                    {
                        dbg.location(182,28);
                        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:182:28: ( modifier )*
                        while ( stream_modifier.hasNext() ) {
                            dbg.location(182,28);
                            adaptor.addChild(root_0, stream_modifier.next());

                        }
                        stream_modifier.reset();
                        dbg.location(182,38);
                        adaptor.addChild(root_0, stream_memberDecl.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 21, classBodyDeclaration_StartIndex); }
        }
        dbg.location(183, 2);

        }
        finally {
            dbg.exitRule("classBodyDeclaration");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end classBodyDeclaration

    public static class memberDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start memberDecl
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );
    public final memberDecl_return memberDecl() throws RecognitionException {
        memberDecl_return retval = new memberDecl_return();
        retval.start = input.LT(1);
        int memberDecl_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal87=null;
        Token Identifier88=null;
        Token Identifier90=null;
        genericMethodOrConstructorDecl_return genericMethodOrConstructorDecl84 = null;

        methodDeclaration_return methodDeclaration85 = null;

        fieldDeclaration_return fieldDeclaration86 = null;

        voidMethodDeclaratorRest_return voidMethodDeclaratorRest89 = null;

        constructorDeclaratorRest_return constructorDeclaratorRest91 = null;

        interfaceDeclaration_return interfaceDeclaration92 = null;

        classDeclaration_return classDeclaration93 = null;


        Object string_literal87_tree=null;
        Object Identifier88_tree=null;
        Object Identifier90_tree=null;
        RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,"token 40");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_interfaceDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule interfaceDeclaration");
        RewriteRuleSubtreeStream stream_fieldDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule fieldDeclaration");
        RewriteRuleSubtreeStream stream_classDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classDeclaration");
        RewriteRuleSubtreeStream stream_genericMethodOrConstructorDecl=new RewriteRuleSubtreeStream(adaptor,"rule genericMethodOrConstructorDecl");
        RewriteRuleSubtreeStream stream_constructorDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule constructorDeclaratorRest");
        RewriteRuleSubtreeStream stream_voidMethodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule voidMethodDeclaratorRest");
        RewriteRuleSubtreeStream stream_methodDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule methodDeclaration");
        try { dbg.enterRule("memberDecl");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(185, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:186:2: ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration )
            int alt37=7;
            try { dbg.enterDecision(37);

            switch ( input.LA(1) ) {
            case 33:
                {
                alt37=1;
                }
                break;
            case Identifier:
                {
                switch ( input.LA(2) ) {
                case 33:
                    {
                    int LA37_16 = input.LA(3);

                    if ( (synpred39()) ) {
                        alt37=2;
                    }
                    else if ( (synpred40()) ) {
                        alt37=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 16, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    int LA37_17 = input.LA(3);

                    if ( (synpred39()) ) {
                        alt37=2;
                    }
                    else if ( (synpred40()) ) {
                        alt37=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 17, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 41:
                    {
                    int LA37_18 = input.LA(3);

                    if ( (synpred39()) ) {
                        alt37=2;
                    }
                    else if ( (synpred40()) ) {
                        alt37=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 18, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    int LA37_19 = input.LA(3);

                    if ( (synpred39()) ) {
                        alt37=2;
                    }
                    else if ( (synpred40()) ) {
                        alt37=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 19, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 65:
                    {
                    alt37=5;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 55:
                {
                int LA37_3 = input.LA(2);

                if ( (LA37_3==41) ) {
                    int LA37_21 = input.LA(3);

                    if ( (synpred39()) ) {
                        alt37=2;
                    }
                    else if ( (synpred40()) ) {
                        alt37=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 21, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                }
                else if ( (LA37_3==Identifier) ) {
                    int LA37_22 = input.LA(3);

                    if ( (synpred39()) ) {
                        alt37=2;
                    }
                    else if ( (synpred40()) ) {
                        alt37=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 22, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 3, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                }
                break;
            case 56:
                {
                int LA37_4 = input.LA(2);

                if ( (LA37_4==41) ) {
                    int LA37_23 = input.LA(3);

                    if ( (synpred39()) ) {
                        alt37=2;
                    }
                    else if ( (synpred40()) ) {
                        alt37=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 23, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                }
                else if ( (LA37_4==Identifier) ) {
                    int LA37_24 = input.LA(3);

                    if ( (synpred39()) ) {
                        alt37=2;
                    }
                    else if ( (synpred40()) ) {
                        alt37=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 24, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 4, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                }
                break;
            case 57:
                {
                int LA37_5 = input.LA(2);

                if ( (LA37_5==41) ) {
                    int LA37_25 = input.LA(3);

                    if ( (synpred39()) ) {
                        alt37=2;
                    }
                    else if ( (synpred40()) ) {
                        alt37=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 25, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                }
                else if ( (LA37_5==Identifier) ) {
                    int LA37_26 = input.LA(3);

                    if ( (synpred39()) ) {
                        alt37=2;
                    }
                    else if ( (synpred40()) ) {
                        alt37=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 26, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 5, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                }
                break;
            case 58:
                {
                int LA37_6 = input.LA(2);

                if ( (LA37_6==41) ) {
                    int LA37_27 = input.LA(3);

                    if ( (synpred39()) ) {
                        alt37=2;
                    }
                    else if ( (synpred40()) ) {
                        alt37=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 27, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                }
                else if ( (LA37_6==Identifier) ) {
                    int LA37_28 = input.LA(3);

                    if ( (synpred39()) ) {
                        alt37=2;
                    }
                    else if ( (synpred40()) ) {
                        alt37=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 28, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 6, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                }
                break;
            case 59:
                {
                int LA37_7 = input.LA(2);

                if ( (LA37_7==41) ) {
                    int LA37_29 = input.LA(3);

                    if ( (synpred39()) ) {
                        alt37=2;
                    }
                    else if ( (synpred40()) ) {
                        alt37=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 29, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                }
                else if ( (LA37_7==Identifier) ) {
                    int LA37_30 = input.LA(3);

                    if ( (synpred39()) ) {
                        alt37=2;
                    }
                    else if ( (synpred40()) ) {
                        alt37=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 30, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 7, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                }
                break;
            case 60:
                {
                int LA37_8 = input.LA(2);

                if ( (LA37_8==41) ) {
                    int LA37_31 = input.LA(3);

                    if ( (synpred39()) ) {
                        alt37=2;
                    }
                    else if ( (synpred40()) ) {
                        alt37=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 31, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                }
                else if ( (LA37_8==Identifier) ) {
                    int LA37_32 = input.LA(3);

                    if ( (synpred39()) ) {
                        alt37=2;
                    }
                    else if ( (synpred40()) ) {
                        alt37=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 32, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 8, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                }
                break;
            case 61:
                {
                int LA37_9 = input.LA(2);

                if ( (LA37_9==41) ) {
                    int LA37_33 = input.LA(3);

                    if ( (synpred39()) ) {
                        alt37=2;
                    }
                    else if ( (synpred40()) ) {
                        alt37=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 33, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                }
                else if ( (LA37_9==Identifier) ) {
                    int LA37_34 = input.LA(3);

                    if ( (synpred39()) ) {
                        alt37=2;
                    }
                    else if ( (synpred40()) ) {
                        alt37=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 34, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 9, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                }
                break;
            case 62:
                {
                int LA37_10 = input.LA(2);

                if ( (LA37_10==41) ) {
                    int LA37_35 = input.LA(3);

                    if ( (synpred39()) ) {
                        alt37=2;
                    }
                    else if ( (synpred40()) ) {
                        alt37=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 35, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                }
                else if ( (LA37_10==Identifier) ) {
                    int LA37_36 = input.LA(3);

                    if ( (synpred39()) ) {
                        alt37=2;
                    }
                    else if ( (synpred40()) ) {
                        alt37=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 36, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 10, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                }
                break;
            case 40:
                {
                alt37=4;
                }
                break;
            case 39:
            case 71:
                {
                alt37=6;
                }
                break;
            case ENUM:
            case 30:
                {
                alt37=7;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("185:1: memberDecl : ( genericMethodOrConstructorDecl -> genericMethodOrConstructorDecl | methodDeclaration -> methodDeclaration | fieldDeclaration -> fieldDeclaration | 'void' Identifier voidMethodDeclaratorRest -> 'void' Identifier voidMethodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 37, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(37);}

            switch (alt37) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:186:4: genericMethodOrConstructorDecl
                    {
                    dbg.location(186,4);
                    pushFollow(FOLLOW_genericMethodOrConstructorDecl_in_memberDecl846);
                    genericMethodOrConstructorDecl84=genericMethodOrConstructorDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_genericMethodOrConstructorDecl.add(genericMethodOrConstructorDecl84.getTree());
                    dbg.location(186,35);

                    // AST REWRITE
                    // elements: genericMethodOrConstructorDecl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 186:35: -> genericMethodOrConstructorDecl
                    {
                        dbg.location(186,38);
                        adaptor.addChild(root_0, stream_genericMethodOrConstructorDecl.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:187:4: methodDeclaration
                    {
                    dbg.location(187,4);
                    pushFollow(FOLLOW_methodDeclaration_in_memberDecl855);
                    methodDeclaration85=methodDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_methodDeclaration.add(methodDeclaration85.getTree());
                    dbg.location(187,22);

                    // AST REWRITE
                    // elements: methodDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 187:22: -> methodDeclaration
                    {
                        dbg.location(187,25);
                        adaptor.addChild(root_0, stream_methodDeclaration.next());

                    }

                    }

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:188:4: fieldDeclaration
                    {
                    dbg.location(188,4);
                    pushFollow(FOLLOW_fieldDeclaration_in_memberDecl864);
                    fieldDeclaration86=fieldDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_fieldDeclaration.add(fieldDeclaration86.getTree());
                    dbg.location(188,21);

                    // AST REWRITE
                    // elements: fieldDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 188:21: -> fieldDeclaration
                    {
                        dbg.location(188,24);
                        adaptor.addChild(root_0, stream_fieldDeclaration.next());

                    }

                    }

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:189:4: 'void' Identifier voidMethodDeclaratorRest
                    {
                    dbg.location(189,4);
                    string_literal87=(Token)input.LT(1);
                    match(input,40,FOLLOW_40_in_memberDecl873); if (failed) return retval;
                    if ( backtracking==0 ) stream_40.add(string_literal87);

                    dbg.location(189,11);
                    Identifier88=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_memberDecl875); if (failed) return retval;
                    if ( backtracking==0 ) stream_Identifier.add(Identifier88);

                    dbg.location(189,22);
                    pushFollow(FOLLOW_voidMethodDeclaratorRest_in_memberDecl877);
                    voidMethodDeclaratorRest89=voidMethodDeclaratorRest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_voidMethodDeclaratorRest.add(voidMethodDeclaratorRest89.getTree());
                    dbg.location(189,47);

                    // AST REWRITE
                    // elements: 40, Identifier, voidMethodDeclaratorRest
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 189:47: -> 'void' Identifier voidMethodDeclaratorRest
                    {
                        dbg.location(189,50);
                        adaptor.addChild(root_0, stream_40.next());
                        dbg.location(189,57);
                        adaptor.addChild(root_0, stream_Identifier.next());
                        dbg.location(189,68);
                        adaptor.addChild(root_0, stream_voidMethodDeclaratorRest.next());

                    }

                    }

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:190:4: Identifier constructorDeclaratorRest
                    {
                    dbg.location(190,4);
                    Identifier90=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_memberDecl890); if (failed) return retval;
                    if ( backtracking==0 ) stream_Identifier.add(Identifier90);

                    dbg.location(190,15);
                    pushFollow(FOLLOW_constructorDeclaratorRest_in_memberDecl892);
                    constructorDeclaratorRest91=constructorDeclaratorRest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_constructorDeclaratorRest.add(constructorDeclaratorRest91.getTree());
                    dbg.location(190,41);

                    // AST REWRITE
                    // elements: Identifier, constructorDeclaratorRest
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 190:41: -> Identifier constructorDeclaratorRest
                    {
                        dbg.location(190,44);
                        adaptor.addChild(root_0, stream_Identifier.next());
                        dbg.location(190,55);
                        adaptor.addChild(root_0, stream_constructorDeclaratorRest.next());

                    }

                    }

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:191:4: interfaceDeclaration
                    {
                    dbg.location(191,4);
                    pushFollow(FOLLOW_interfaceDeclaration_in_memberDecl903);
                    interfaceDeclaration92=interfaceDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_interfaceDeclaration.add(interfaceDeclaration92.getTree());
                    dbg.location(191,25);

                    // AST REWRITE
                    // elements: interfaceDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 191:25: -> interfaceDeclaration
                    {
                        dbg.location(191,28);
                        adaptor.addChild(root_0, stream_interfaceDeclaration.next());

                    }

                    }

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:192:4: classDeclaration
                    {
                    dbg.location(192,4);
                    pushFollow(FOLLOW_classDeclaration_in_memberDecl912);
                    classDeclaration93=classDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_classDeclaration.add(classDeclaration93.getTree());
                    dbg.location(192,21);

                    // AST REWRITE
                    // elements: classDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 192:21: -> classDeclaration
                    {
                        dbg.location(192,24);
                        adaptor.addChild(root_0, stream_classDeclaration.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 22, memberDecl_StartIndex); }
        }
        dbg.location(193, 2);

        }
        finally {
            dbg.exitRule("memberDecl");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end memberDecl

    public static class genericMethodOrConstructorDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start genericMethodOrConstructorDecl
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:195:1: genericMethodOrConstructorDecl : typeParameters genericMethodOrConstructorRest -> typeParameters genericMethodOrConstructorRest ;
    public final genericMethodOrConstructorDecl_return genericMethodOrConstructorDecl() throws RecognitionException {
        genericMethodOrConstructorDecl_return retval = new genericMethodOrConstructorDecl_return();
        retval.start = input.LT(1);
        int genericMethodOrConstructorDecl_StartIndex = input.index();
        Object root_0 = null;

        typeParameters_return typeParameters94 = null;

        genericMethodOrConstructorRest_return genericMethodOrConstructorRest95 = null;


        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_genericMethodOrConstructorRest=new RewriteRuleSubtreeStream(adaptor,"rule genericMethodOrConstructorRest");
        try { dbg.enterRule("genericMethodOrConstructorDecl");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(195, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:196:2: ( typeParameters genericMethodOrConstructorRest -> typeParameters genericMethodOrConstructorRest )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:196:4: typeParameters genericMethodOrConstructorRest
            {
            dbg.location(196,4);
            pushFollow(FOLLOW_typeParameters_in_genericMethodOrConstructorDecl928);
            typeParameters94=typeParameters();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_typeParameters.add(typeParameters94.getTree());
            dbg.location(196,19);
            pushFollow(FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl930);
            genericMethodOrConstructorRest95=genericMethodOrConstructorRest();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_genericMethodOrConstructorRest.add(genericMethodOrConstructorRest95.getTree());
            dbg.location(196,50);

            // AST REWRITE
            // elements: typeParameters, genericMethodOrConstructorRest
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 196:50: -> typeParameters genericMethodOrConstructorRest
            {
                dbg.location(196,53);
                adaptor.addChild(root_0, stream_typeParameters.next());
                dbg.location(196,68);
                adaptor.addChild(root_0, stream_genericMethodOrConstructorRest.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 23, genericMethodOrConstructorDecl_StartIndex); }
        }
        dbg.location(197, 2);

        }
        finally {
            dbg.exitRule("genericMethodOrConstructorDecl");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end genericMethodOrConstructorDecl

    public static class genericMethodOrConstructorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start genericMethodOrConstructorRest
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:199:1: genericMethodOrConstructorRest : ( type Identifier methodDeclaratorRest -> type Identifier methodDeclaratorRest | 'void' Identifier methodDeclaratorRest -> 'void' Identifier methodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest );
    public final genericMethodOrConstructorRest_return genericMethodOrConstructorRest() throws RecognitionException {
        genericMethodOrConstructorRest_return retval = new genericMethodOrConstructorRest_return();
        retval.start = input.LT(1);
        int genericMethodOrConstructorRest_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier97=null;
        Token string_literal99=null;
        Token Identifier100=null;
        Token Identifier102=null;
        type_return type96 = null;

        methodDeclaratorRest_return methodDeclaratorRest98 = null;

        methodDeclaratorRest_return methodDeclaratorRest101 = null;

        constructorDeclaratorRest_return constructorDeclaratorRest103 = null;


        Object Identifier97_tree=null;
        Object string_literal99_tree=null;
        Object Identifier100_tree=null;
        Object Identifier102_tree=null;
        RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,"token 40");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_constructorDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule constructorDeclaratorRest");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_methodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule methodDeclaratorRest");
        try { dbg.enterRule("genericMethodOrConstructorRest");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(199, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:200:2: ( type Identifier methodDeclaratorRest -> type Identifier methodDeclaratorRest | 'void' Identifier methodDeclaratorRest -> 'void' Identifier methodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest )
            int alt38=3;
            try { dbg.enterDecision(38);

            switch ( input.LA(1) ) {
            case Identifier:
                {
                int LA38_1 = input.LA(2);

                if ( (LA38_1==65) ) {
                    alt38=3;
                }
                else if ( (LA38_1==Identifier||LA38_1==28||LA38_1==33||LA38_1==41) ) {
                    alt38=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("199:1: genericMethodOrConstructorRest : ( type Identifier methodDeclaratorRest -> type Identifier methodDeclaratorRest | 'void' Identifier methodDeclaratorRest -> 'void' Identifier methodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest );", 38, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                }
                break;
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
                {
                alt38=1;
                }
                break;
            case 40:
                {
                alt38=2;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("199:1: genericMethodOrConstructorRest : ( type Identifier methodDeclaratorRest -> type Identifier methodDeclaratorRest | 'void' Identifier methodDeclaratorRest -> 'void' Identifier methodDeclaratorRest | Identifier constructorDeclaratorRest -> Identifier constructorDeclaratorRest );", 38, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(38);}

            switch (alt38) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:200:4: type Identifier methodDeclaratorRest
                    {
                    dbg.location(200,4);
                    pushFollow(FOLLOW_type_in_genericMethodOrConstructorRest948);
                    type96=type();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_type.add(type96.getTree());
                    dbg.location(200,9);
                    Identifier97=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_genericMethodOrConstructorRest950); if (failed) return retval;
                    if ( backtracking==0 ) stream_Identifier.add(Identifier97);

                    dbg.location(200,20);
                    pushFollow(FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest952);
                    methodDeclaratorRest98=methodDeclaratorRest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_methodDeclaratorRest.add(methodDeclaratorRest98.getTree());
                    dbg.location(200,41);

                    // AST REWRITE
                    // elements: methodDeclaratorRest, Identifier, type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 200:41: -> type Identifier methodDeclaratorRest
                    {
                        dbg.location(200,44);
                        adaptor.addChild(root_0, stream_type.next());
                        dbg.location(200,49);
                        adaptor.addChild(root_0, stream_Identifier.next());
                        dbg.location(200,60);
                        adaptor.addChild(root_0, stream_methodDeclaratorRest.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:201:10: 'void' Identifier methodDeclaratorRest
                    {
                    dbg.location(201,10);
                    string_literal99=(Token)input.LT(1);
                    match(input,40,FOLLOW_40_in_genericMethodOrConstructorRest971); if (failed) return retval;
                    if ( backtracking==0 ) stream_40.add(string_literal99);

                    dbg.location(201,17);
                    Identifier100=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_genericMethodOrConstructorRest973); if (failed) return retval;
                    if ( backtracking==0 ) stream_Identifier.add(Identifier100);

                    dbg.location(201,28);
                    pushFollow(FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest975);
                    methodDeclaratorRest101=methodDeclaratorRest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_methodDeclaratorRest.add(methodDeclaratorRest101.getTree());
                    dbg.location(201,49);

                    // AST REWRITE
                    // elements: Identifier, methodDeclaratorRest, 40
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 201:49: -> 'void' Identifier methodDeclaratorRest
                    {
                        dbg.location(201,52);
                        adaptor.addChild(root_0, stream_40.next());
                        dbg.location(201,59);
                        adaptor.addChild(root_0, stream_Identifier.next());
                        dbg.location(201,70);
                        adaptor.addChild(root_0, stream_methodDeclaratorRest.next());

                    }

                    }

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:202:4: Identifier constructorDeclaratorRest
                    {
                    dbg.location(202,4);
                    Identifier102=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_genericMethodOrConstructorRest988); if (failed) return retval;
                    if ( backtracking==0 ) stream_Identifier.add(Identifier102);

                    dbg.location(202,15);
                    pushFollow(FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest990);
                    constructorDeclaratorRest103=constructorDeclaratorRest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_constructorDeclaratorRest.add(constructorDeclaratorRest103.getTree());
                    dbg.location(202,41);

                    // AST REWRITE
                    // elements: constructorDeclaratorRest, Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 202:41: -> Identifier constructorDeclaratorRest
                    {
                        dbg.location(202,44);
                        adaptor.addChild(root_0, stream_Identifier.next());
                        dbg.location(202,55);
                        adaptor.addChild(root_0, stream_constructorDeclaratorRest.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 24, genericMethodOrConstructorRest_StartIndex); }
        }
        dbg.location(203, 2);

        }
        finally {
            dbg.exitRule("genericMethodOrConstructorRest");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end genericMethodOrConstructorRest

    public static class methodDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start methodDeclaration
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:205:1: methodDeclaration : type Identifier methodDeclaratorRest -> type Identifier methodDeclaratorRest ;
    public final methodDeclaration_return methodDeclaration() throws RecognitionException {
        methodDeclaration_return retval = new methodDeclaration_return();
        retval.start = input.LT(1);
        int methodDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier105=null;
        type_return type104 = null;

        methodDeclaratorRest_return methodDeclaratorRest106 = null;


        Object Identifier105_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_methodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule methodDeclaratorRest");
        try { dbg.enterRule("methodDeclaration");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(205, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:206:2: ( type Identifier methodDeclaratorRest -> type Identifier methodDeclaratorRest )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:206:4: type Identifier methodDeclaratorRest
            {
            dbg.location(206,4);
            pushFollow(FOLLOW_type_in_methodDeclaration1007);
            type104=type();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_type.add(type104.getTree());
            dbg.location(206,9);
            Identifier105=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_methodDeclaration1009); if (failed) return retval;
            if ( backtracking==0 ) stream_Identifier.add(Identifier105);

            dbg.location(206,20);
            pushFollow(FOLLOW_methodDeclaratorRest_in_methodDeclaration1011);
            methodDeclaratorRest106=methodDeclaratorRest();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_methodDeclaratorRest.add(methodDeclaratorRest106.getTree());
            dbg.location(206,41);

            // AST REWRITE
            // elements: Identifier, type, methodDeclaratorRest
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 206:41: -> type Identifier methodDeclaratorRest
            {
                dbg.location(206,44);
                adaptor.addChild(root_0, stream_type.next());
                dbg.location(206,49);
                adaptor.addChild(root_0, stream_Identifier.next());
                dbg.location(206,60);
                adaptor.addChild(root_0, stream_methodDeclaratorRest.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 25, methodDeclaration_StartIndex); }
        }
        dbg.location(207, 2);

        }
        finally {
            dbg.exitRule("methodDeclaration");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end methodDeclaration

    public static class fieldDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start fieldDeclaration
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:209:1: fieldDeclaration : type variableDeclarators ';' -> type variableDeclarators ';' ;
    public final fieldDeclaration_return fieldDeclaration() throws RecognitionException {
        fieldDeclaration_return retval = new fieldDeclaration_return();
        retval.start = input.LT(1);
        int fieldDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal109=null;
        type_return type107 = null;

        variableDeclarators_return variableDeclarators108 = null;


        Object char_literal109_tree=null;
        RewriteRuleTokenStream stream_25=new RewriteRuleTokenStream(adaptor,"token 25");
        RewriteRuleSubtreeStream stream_variableDeclarators=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarators");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try { dbg.enterRule("fieldDeclaration");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(209, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:210:2: ( type variableDeclarators ';' -> type variableDeclarators ';' )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:210:4: type variableDeclarators ';'
            {
            dbg.location(210,4);
            pushFollow(FOLLOW_type_in_fieldDeclaration1030);
            type107=type();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_type.add(type107.getTree());
            dbg.location(210,9);
            pushFollow(FOLLOW_variableDeclarators_in_fieldDeclaration1032);
            variableDeclarators108=variableDeclarators();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_variableDeclarators.add(variableDeclarators108.getTree());
            dbg.location(210,29);
            char_literal109=(Token)input.LT(1);
            match(input,25,FOLLOW_25_in_fieldDeclaration1034); if (failed) return retval;
            if ( backtracking==0 ) stream_25.add(char_literal109);

            dbg.location(210,33);

            // AST REWRITE
            // elements: variableDeclarators, type, 25
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 210:33: -> type variableDeclarators ';'
            {
                dbg.location(210,36);
                adaptor.addChild(root_0, stream_type.next());
                dbg.location(210,41);
                adaptor.addChild(root_0, stream_variableDeclarators.next());
                dbg.location(210,61);
                adaptor.addChild(root_0, stream_25.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 26, fieldDeclaration_StartIndex); }
        }
        dbg.location(211, 2);

        }
        finally {
            dbg.exitRule("fieldDeclaration");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end fieldDeclaration

    public static class interfaceBodyDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start interfaceBodyDeclaration
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:213:1: interfaceBodyDeclaration : ( ( modifier )* interfaceMemberDecl -> ( modifier )* interfaceMemberDecl | ';' -> ';' );
    public final interfaceBodyDeclaration_return interfaceBodyDeclaration() throws RecognitionException {
        interfaceBodyDeclaration_return retval = new interfaceBodyDeclaration_return();
        retval.start = input.LT(1);
        int interfaceBodyDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal112=null;
        modifier_return modifier110 = null;

        interfaceMemberDecl_return interfaceMemberDecl111 = null;


        Object char_literal112_tree=null;
        RewriteRuleTokenStream stream_25=new RewriteRuleTokenStream(adaptor,"token 25");
        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        RewriteRuleSubtreeStream stream_interfaceMemberDecl=new RewriteRuleSubtreeStream(adaptor,"rule interfaceMemberDecl");
        try { dbg.enterRule("interfaceBodyDeclaration");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(213, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:214:2: ( ( modifier )* interfaceMemberDecl -> ( modifier )* interfaceMemberDecl | ';' -> ';' )
            int alt40=2;
            try { dbg.enterDecision(40);

            int LA40_0 = input.LA(1);

            if ( ((LA40_0>=Identifier && LA40_0<=ENUM)||LA40_0==27||LA40_0==30||LA40_0==33||(LA40_0>=39 && LA40_0<=40)||(LA40_0>=45 && LA40_0<=62)||LA40_0==71) ) {
                alt40=1;
            }
            else if ( (LA40_0==25) ) {
                alt40=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("213:1: interfaceBodyDeclaration : ( ( modifier )* interfaceMemberDecl -> ( modifier )* interfaceMemberDecl | ';' -> ';' );", 40, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(40);}

            switch (alt40) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:214:4: ( modifier )* interfaceMemberDecl
                    {
                    dbg.location(214,4);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:214:4: ( modifier )*
                    try { dbg.enterSubRule(39);

                    loop39:
                    do {
                        int alt39=2;
                        try { dbg.enterDecision(39);

                        int LA39_0 = input.LA(1);

                        if ( (LA39_0==71) ) {
                            int LA39_13 = input.LA(2);

                            if ( (LA39_13==Identifier) ) {
                                alt39=1;
                            }


                        }
                        else if ( (LA39_0==27||(LA39_0>=45 && LA39_0<=54)) ) {
                            alt39=1;
                        }


                        } finally {dbg.exitDecision(39);}

                        switch (alt39) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: modifier
                    	    {
                    	    dbg.location(214,4);
                    	    pushFollow(FOLLOW_modifier_in_interfaceBodyDeclaration1055);
                    	    modifier110=modifier();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_modifier.add(modifier110.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop39;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(39);}

                    dbg.location(214,14);
                    pushFollow(FOLLOW_interfaceMemberDecl_in_interfaceBodyDeclaration1058);
                    interfaceMemberDecl111=interfaceMemberDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_interfaceMemberDecl.add(interfaceMemberDecl111.getTree());
                    dbg.location(214,34);

                    // AST REWRITE
                    // elements: interfaceMemberDecl, modifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 214:34: -> ( modifier )* interfaceMemberDecl
                    {
                        dbg.location(214,37);
                        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:214:37: ( modifier )*
                        while ( stream_modifier.hasNext() ) {
                            dbg.location(214,37);
                            adaptor.addChild(root_0, stream_modifier.next());

                        }
                        stream_modifier.reset();
                        dbg.location(214,47);
                        adaptor.addChild(root_0, stream_interfaceMemberDecl.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:215:6: ';'
                    {
                    dbg.location(215,6);
                    char_literal112=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_interfaceBodyDeclaration1072); if (failed) return retval;
                    if ( backtracking==0 ) stream_25.add(char_literal112);

                    dbg.location(215,10);

                    // AST REWRITE
                    // elements: 25
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 215:10: -> ';'
                    {
                        dbg.location(215,13);
                        adaptor.addChild(root_0, stream_25.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 27, interfaceBodyDeclaration_StartIndex); }
        }
        dbg.location(216, 2);

        }
        finally {
            dbg.exitRule("interfaceBodyDeclaration");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end interfaceBodyDeclaration

    public static class interfaceMemberDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start interfaceMemberDecl
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:218:1: interfaceMemberDecl : ( interfaceMethodOrFieldDecl -> interfaceMethodOrFieldDecl | interfaceGenericMethodDecl -> interfaceGenericMethodDecl | 'void' Identifier voidInterfaceMethodDeclaratorRest -> 'void' Identifier voidInterfaceMethodDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );
    public final interfaceMemberDecl_return interfaceMemberDecl() throws RecognitionException {
        interfaceMemberDecl_return retval = new interfaceMemberDecl_return();
        retval.start = input.LT(1);
        int interfaceMemberDecl_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal115=null;
        Token Identifier116=null;
        interfaceMethodOrFieldDecl_return interfaceMethodOrFieldDecl113 = null;

        interfaceGenericMethodDecl_return interfaceGenericMethodDecl114 = null;

        voidInterfaceMethodDeclaratorRest_return voidInterfaceMethodDeclaratorRest117 = null;

        interfaceDeclaration_return interfaceDeclaration118 = null;

        classDeclaration_return classDeclaration119 = null;


        Object string_literal115_tree=null;
        Object Identifier116_tree=null;
        RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,"token 40");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_interfaceDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule interfaceDeclaration");
        RewriteRuleSubtreeStream stream_interfaceGenericMethodDecl=new RewriteRuleSubtreeStream(adaptor,"rule interfaceGenericMethodDecl");
        RewriteRuleSubtreeStream stream_interfaceMethodOrFieldDecl=new RewriteRuleSubtreeStream(adaptor,"rule interfaceMethodOrFieldDecl");
        RewriteRuleSubtreeStream stream_classDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classDeclaration");
        RewriteRuleSubtreeStream stream_voidInterfaceMethodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule voidInterfaceMethodDeclaratorRest");
        try { dbg.enterRule("interfaceMemberDecl");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(218, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:219:2: ( interfaceMethodOrFieldDecl -> interfaceMethodOrFieldDecl | interfaceGenericMethodDecl -> interfaceGenericMethodDecl | 'void' Identifier voidInterfaceMethodDeclaratorRest -> 'void' Identifier voidInterfaceMethodDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration )
            int alt41=5;
            try { dbg.enterDecision(41);

            switch ( input.LA(1) ) {
            case Identifier:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
                {
                alt41=1;
                }
                break;
            case 33:
                {
                alt41=2;
                }
                break;
            case 40:
                {
                alt41=3;
                }
                break;
            case 39:
            case 71:
                {
                alt41=4;
                }
                break;
            case ENUM:
            case 30:
                {
                alt41=5;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("218:1: interfaceMemberDecl : ( interfaceMethodOrFieldDecl -> interfaceMethodOrFieldDecl | interfaceGenericMethodDecl -> interfaceGenericMethodDecl | 'void' Identifier voidInterfaceMethodDeclaratorRest -> 'void' Identifier voidInterfaceMethodDeclaratorRest | interfaceDeclaration -> interfaceDeclaration | classDeclaration -> classDeclaration );", 41, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(41);}

            switch (alt41) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:219:4: interfaceMethodOrFieldDecl
                    {
                    dbg.location(219,4);
                    pushFollow(FOLLOW_interfaceMethodOrFieldDecl_in_interfaceMemberDecl1087);
                    interfaceMethodOrFieldDecl113=interfaceMethodOrFieldDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_interfaceMethodOrFieldDecl.add(interfaceMethodOrFieldDecl113.getTree());
                    dbg.location(219,31);

                    // AST REWRITE
                    // elements: interfaceMethodOrFieldDecl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 219:31: -> interfaceMethodOrFieldDecl
                    {
                        dbg.location(219,34);
                        adaptor.addChild(root_0, stream_interfaceMethodOrFieldDecl.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:220:6: interfaceGenericMethodDecl
                    {
                    dbg.location(220,6);
                    pushFollow(FOLLOW_interfaceGenericMethodDecl_in_interfaceMemberDecl1098);
                    interfaceGenericMethodDecl114=interfaceGenericMethodDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_interfaceGenericMethodDecl.add(interfaceGenericMethodDecl114.getTree());
                    dbg.location(220,33);

                    // AST REWRITE
                    // elements: interfaceGenericMethodDecl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 220:33: -> interfaceGenericMethodDecl
                    {
                        dbg.location(220,36);
                        adaptor.addChild(root_0, stream_interfaceGenericMethodDecl.next());

                    }

                    }

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:221:9: 'void' Identifier voidInterfaceMethodDeclaratorRest
                    {
                    dbg.location(221,9);
                    string_literal115=(Token)input.LT(1);
                    match(input,40,FOLLOW_40_in_interfaceMemberDecl1112); if (failed) return retval;
                    if ( backtracking==0 ) stream_40.add(string_literal115);

                    dbg.location(221,16);
                    Identifier116=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_interfaceMemberDecl1114); if (failed) return retval;
                    if ( backtracking==0 ) stream_Identifier.add(Identifier116);

                    dbg.location(221,27);
                    pushFollow(FOLLOW_voidInterfaceMethodDeclaratorRest_in_interfaceMemberDecl1116);
                    voidInterfaceMethodDeclaratorRest117=voidInterfaceMethodDeclaratorRest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_voidInterfaceMethodDeclaratorRest.add(voidInterfaceMethodDeclaratorRest117.getTree());
                    dbg.location(221,61);

                    // AST REWRITE
                    // elements: voidInterfaceMethodDeclaratorRest, Identifier, 40
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 221:61: -> 'void' Identifier voidInterfaceMethodDeclaratorRest
                    {
                        dbg.location(221,64);
                        adaptor.addChild(root_0, stream_40.next());
                        dbg.location(221,71);
                        adaptor.addChild(root_0, stream_Identifier.next());
                        dbg.location(221,82);
                        adaptor.addChild(root_0, stream_voidInterfaceMethodDeclaratorRest.next());

                    }

                    }

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:222:9: interfaceDeclaration
                    {
                    dbg.location(222,9);
                    pushFollow(FOLLOW_interfaceDeclaration_in_interfaceMemberDecl1134);
                    interfaceDeclaration118=interfaceDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_interfaceDeclaration.add(interfaceDeclaration118.getTree());
                    dbg.location(222,30);

                    // AST REWRITE
                    // elements: interfaceDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 222:30: -> interfaceDeclaration
                    {
                        dbg.location(222,33);
                        adaptor.addChild(root_0, stream_interfaceDeclaration.next());

                    }

                    }

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:223:9: classDeclaration
                    {
                    dbg.location(223,9);
                    pushFollow(FOLLOW_classDeclaration_in_interfaceMemberDecl1148);
                    classDeclaration119=classDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_classDeclaration.add(classDeclaration119.getTree());
                    dbg.location(223,26);

                    // AST REWRITE
                    // elements: classDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 223:26: -> classDeclaration
                    {
                        dbg.location(223,29);
                        adaptor.addChild(root_0, stream_classDeclaration.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 28, interfaceMemberDecl_StartIndex); }
        }
        dbg.location(224, 2);

        }
        finally {
            dbg.exitRule("interfaceMemberDecl");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end interfaceMemberDecl

    public static class interfaceMethodOrFieldDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start interfaceMethodOrFieldDecl
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:226:1: interfaceMethodOrFieldDecl : type Identifier interfaceMethodOrFieldRest -> type Identifier interfaceMethodOrFieldRest ;
    public final interfaceMethodOrFieldDecl_return interfaceMethodOrFieldDecl() throws RecognitionException {
        interfaceMethodOrFieldDecl_return retval = new interfaceMethodOrFieldDecl_return();
        retval.start = input.LT(1);
        int interfaceMethodOrFieldDecl_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier121=null;
        type_return type120 = null;

        interfaceMethodOrFieldRest_return interfaceMethodOrFieldRest122 = null;


        Object Identifier121_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_interfaceMethodOrFieldRest=new RewriteRuleSubtreeStream(adaptor,"rule interfaceMethodOrFieldRest");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try { dbg.enterRule("interfaceMethodOrFieldDecl");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(226, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:227:2: ( type Identifier interfaceMethodOrFieldRest -> type Identifier interfaceMethodOrFieldRest )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:227:4: type Identifier interfaceMethodOrFieldRest
            {
            dbg.location(227,4);
            pushFollow(FOLLOW_type_in_interfaceMethodOrFieldDecl1164);
            type120=type();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_type.add(type120.getTree());
            dbg.location(227,9);
            Identifier121=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_interfaceMethodOrFieldDecl1166); if (failed) return retval;
            if ( backtracking==0 ) stream_Identifier.add(Identifier121);

            dbg.location(227,20);
            pushFollow(FOLLOW_interfaceMethodOrFieldRest_in_interfaceMethodOrFieldDecl1168);
            interfaceMethodOrFieldRest122=interfaceMethodOrFieldRest();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_interfaceMethodOrFieldRest.add(interfaceMethodOrFieldRest122.getTree());
            dbg.location(227,47);

            // AST REWRITE
            // elements: Identifier, type, interfaceMethodOrFieldRest
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 227:47: -> type Identifier interfaceMethodOrFieldRest
            {
                dbg.location(227,50);
                adaptor.addChild(root_0, stream_type.next());
                dbg.location(227,55);
                adaptor.addChild(root_0, stream_Identifier.next());
                dbg.location(227,66);
                adaptor.addChild(root_0, stream_interfaceMethodOrFieldRest.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 29, interfaceMethodOrFieldDecl_StartIndex); }
        }
        dbg.location(228, 2);

        }
        finally {
            dbg.exitRule("interfaceMethodOrFieldDecl");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end interfaceMethodOrFieldDecl

    public static class interfaceMethodOrFieldRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start interfaceMethodOrFieldRest
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:230:1: interfaceMethodOrFieldRest : ( constantDeclaratorsRest ';' -> constantDeclaratorsRest ';' | interfaceMethodDeclaratorRest -> interfaceMethodDeclaratorRest );
    public final interfaceMethodOrFieldRest_return interfaceMethodOrFieldRest() throws RecognitionException {
        interfaceMethodOrFieldRest_return retval = new interfaceMethodOrFieldRest_return();
        retval.start = input.LT(1);
        int interfaceMethodOrFieldRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal124=null;
        constantDeclaratorsRest_return constantDeclaratorsRest123 = null;

        interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest125 = null;


        Object char_literal124_tree=null;
        RewriteRuleTokenStream stream_25=new RewriteRuleTokenStream(adaptor,"token 25");
        RewriteRuleSubtreeStream stream_interfaceMethodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule interfaceMethodDeclaratorRest");
        RewriteRuleSubtreeStream stream_constantDeclaratorsRest=new RewriteRuleSubtreeStream(adaptor,"rule constantDeclaratorsRest");
        try { dbg.enterRule("interfaceMethodOrFieldRest");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(230, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:231:2: ( constantDeclaratorsRest ';' -> constantDeclaratorsRest ';' | interfaceMethodDeclaratorRest -> interfaceMethodDeclaratorRest )
            int alt42=2;
            try { dbg.enterDecision(42);

            int LA42_0 = input.LA(1);

            if ( (LA42_0==41||LA42_0==44) ) {
                alt42=1;
            }
            else if ( (LA42_0==65) ) {
                alt42=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("230:1: interfaceMethodOrFieldRest : ( constantDeclaratorsRest ';' -> constantDeclaratorsRest ';' | interfaceMethodDeclaratorRest -> interfaceMethodDeclaratorRest );", 42, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(42);}

            switch (alt42) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:231:4: constantDeclaratorsRest ';'
                    {
                    dbg.location(231,4);
                    pushFollow(FOLLOW_constantDeclaratorsRest_in_interfaceMethodOrFieldRest1188);
                    constantDeclaratorsRest123=constantDeclaratorsRest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_constantDeclaratorsRest.add(constantDeclaratorsRest123.getTree());
                    dbg.location(231,28);
                    char_literal124=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_interfaceMethodOrFieldRest1190); if (failed) return retval;
                    if ( backtracking==0 ) stream_25.add(char_literal124);

                    dbg.location(231,32);

                    // AST REWRITE
                    // elements: constantDeclaratorsRest, 25
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 231:32: -> constantDeclaratorsRest ';'
                    {
                        dbg.location(231,35);
                        adaptor.addChild(root_0, stream_constantDeclaratorsRest.next());
                        dbg.location(231,59);
                        adaptor.addChild(root_0, stream_25.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:232:4: interfaceMethodDeclaratorRest
                    {
                    dbg.location(232,4);
                    pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceMethodOrFieldRest1201);
                    interfaceMethodDeclaratorRest125=interfaceMethodDeclaratorRest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_interfaceMethodDeclaratorRest.add(interfaceMethodDeclaratorRest125.getTree());
                    dbg.location(232,34);

                    // AST REWRITE
                    // elements: interfaceMethodDeclaratorRest
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 232:34: -> interfaceMethodDeclaratorRest
                    {
                        dbg.location(232,37);
                        adaptor.addChild(root_0, stream_interfaceMethodDeclaratorRest.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 30, interfaceMethodOrFieldRest_StartIndex); }
        }
        dbg.location(233, 2);

        }
        finally {
            dbg.exitRule("interfaceMethodOrFieldRest");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end interfaceMethodOrFieldRest

    public static class methodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start methodDeclaratorRest
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:235:1: methodDeclaratorRest : formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( methodBody | ';' ) -> formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? methodBody ;
    public final methodDeclaratorRest_return methodDeclaratorRest() throws RecognitionException {
        methodDeclaratorRest_return retval = new methodDeclaratorRest_return();
        retval.start = input.LT(1);
        int methodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal127=null;
        Token char_literal128=null;
        Token string_literal129=null;
        Token char_literal132=null;
        formalParameters_return formalParameters126 = null;

        qualifiedNameList_return qualifiedNameList130 = null;

        methodBody_return methodBody131 = null;


        Object char_literal127_tree=null;
        Object char_literal128_tree=null;
        Object string_literal129_tree=null;
        Object char_literal132_tree=null;
        RewriteRuleTokenStream stream_43=new RewriteRuleTokenStream(adaptor,"token 43");
        RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
        RewriteRuleTokenStream stream_41=new RewriteRuleTokenStream(adaptor,"token 41");
        RewriteRuleTokenStream stream_25=new RewriteRuleTokenStream(adaptor,"token 25");
        RewriteRuleSubtreeStream stream_methodBody=new RewriteRuleSubtreeStream(adaptor,"rule methodBody");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_qualifiedNameList=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedNameList");
        try { dbg.enterRule("methodDeclaratorRest");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(235, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:236:2: ( formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( methodBody | ';' ) -> formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? methodBody )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:236:4: formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( methodBody | ';' )
            {
            dbg.location(236,4);
            pushFollow(FOLLOW_formalParameters_in_methodDeclaratorRest1217);
            formalParameters126=formalParameters();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_formalParameters.add(formalParameters126.getTree());
            dbg.location(236,21);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:236:21: ( '[' ']' )*
            try { dbg.enterSubRule(43);

            loop43:
            do {
                int alt43=2;
                try { dbg.enterDecision(43);

                int LA43_0 = input.LA(1);

                if ( (LA43_0==41) ) {
                    alt43=1;
                }


                } finally {dbg.exitDecision(43);}

                switch (alt43) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:236:22: '[' ']'
            	    {
            	    dbg.location(236,22);
            	    char_literal127=(Token)input.LT(1);
            	    match(input,41,FOLLOW_41_in_methodDeclaratorRest1220); if (failed) return retval;
            	    if ( backtracking==0 ) stream_41.add(char_literal127);

            	    dbg.location(236,26);
            	    char_literal128=(Token)input.LT(1);
            	    match(input,42,FOLLOW_42_in_methodDeclaratorRest1222); if (failed) return retval;
            	    if ( backtracking==0 ) stream_42.add(char_literal128);


            	    }
            	    break;

            	default :
            	    break loop43;
                }
            } while (true);
            } finally {dbg.exitSubRule(43);}

            dbg.location(237,9);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:237:9: ( 'throws' qualifiedNameList )?
            int alt44=2;
            try { dbg.enterSubRule(44);
            try { dbg.enterDecision(44);

            int LA44_0 = input.LA(1);

            if ( (LA44_0==43) ) {
                alt44=1;
            }
            } finally {dbg.exitDecision(44);}

            switch (alt44) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:237:10: 'throws' qualifiedNameList
                    {
                    dbg.location(237,10);
                    string_literal129=(Token)input.LT(1);
                    match(input,43,FOLLOW_43_in_methodDeclaratorRest1236); if (failed) return retval;
                    if ( backtracking==0 ) stream_43.add(string_literal129);

                    dbg.location(237,19);
                    pushFollow(FOLLOW_qualifiedNameList_in_methodDeclaratorRest1238);
                    qualifiedNameList130=qualifiedNameList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_qualifiedNameList.add(qualifiedNameList130.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(44);}

            dbg.location(238,9);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:238:9: ( methodBody | ';' )
            int alt45=2;
            try { dbg.enterSubRule(45);
            try { dbg.enterDecision(45);

            int LA45_0 = input.LA(1);

            if ( (LA45_0==37) ) {
                alt45=1;
            }
            else if ( (LA45_0==25) ) {
                alt45=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("238:9: ( methodBody | ';' )", 45, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(45);}

            switch (alt45) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:238:13: methodBody
                    {
                    dbg.location(238,13);
                    pushFollow(FOLLOW_methodBody_in_methodDeclaratorRest1254);
                    methodBody131=methodBody();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_methodBody.add(methodBody131.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:239:13: ';'
                    {
                    dbg.location(239,13);
                    char_literal132=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_methodDeclaratorRest1269); if (failed) return retval;
                    if ( backtracking==0 ) stream_25.add(char_literal132);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(45);}

            dbg.location(240,11);

            // AST REWRITE
            // elements: qualifiedNameList, 41, formalParameters, 43, 42, methodBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 240:11: -> formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? methodBody
            {
                dbg.location(240,14);
                adaptor.addChild(root_0, stream_formalParameters.next());
                dbg.location(240,31);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:240:31: ( '[' ']' )*
                while ( stream_41.hasNext()||stream_42.hasNext() ) {
                    dbg.location(240,32);
                    adaptor.addChild(root_0, stream_41.next());
                    dbg.location(240,36);
                    adaptor.addChild(root_0, stream_42.next());

                }
                stream_41.reset();
                stream_42.reset();
                dbg.location(240,42);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:240:42: ( 'throws' qualifiedNameList )?
                if ( stream_qualifiedNameList.hasNext()||stream_43.hasNext() ) {
                    dbg.location(240,43);
                    adaptor.addChild(root_0, stream_43.next());
                    dbg.location(240,52);
                    adaptor.addChild(root_0, stream_qualifiedNameList.next());

                }
                stream_qualifiedNameList.reset();
                stream_43.reset();
                dbg.location(240,72);
                adaptor.addChild(root_0, stream_methodBody.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 31, methodDeclaratorRest_StartIndex); }
        }
        dbg.location(241, 2);

        }
        finally {
            dbg.exitRule("methodDeclaratorRest");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end methodDeclaratorRest

    public static class voidMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start voidMethodDeclaratorRest
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:243:1: voidMethodDeclaratorRest : formalParameters ( 'throws' qualifiedNameList )? ( methodBody | ';' ) -> formalParameters ( 'throws' qualifiedNameList )? methodBody ;
    public final voidMethodDeclaratorRest_return voidMethodDeclaratorRest() throws RecognitionException {
        voidMethodDeclaratorRest_return retval = new voidMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int voidMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal134=null;
        Token char_literal137=null;
        formalParameters_return formalParameters133 = null;

        qualifiedNameList_return qualifiedNameList135 = null;

        methodBody_return methodBody136 = null;


        Object string_literal134_tree=null;
        Object char_literal137_tree=null;
        RewriteRuleTokenStream stream_43=new RewriteRuleTokenStream(adaptor,"token 43");
        RewriteRuleTokenStream stream_25=new RewriteRuleTokenStream(adaptor,"token 25");
        RewriteRuleSubtreeStream stream_methodBody=new RewriteRuleSubtreeStream(adaptor,"rule methodBody");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_qualifiedNameList=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedNameList");
        try { dbg.enterRule("voidMethodDeclaratorRest");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(243, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:244:2: ( formalParameters ( 'throws' qualifiedNameList )? ( methodBody | ';' ) -> formalParameters ( 'throws' qualifiedNameList )? methodBody )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:244:4: formalParameters ( 'throws' qualifiedNameList )? ( methodBody | ';' )
            {
            dbg.location(244,4);
            pushFollow(FOLLOW_formalParameters_in_voidMethodDeclaratorRest1312);
            formalParameters133=formalParameters();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_formalParameters.add(formalParameters133.getTree());
            dbg.location(244,21);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:244:21: ( 'throws' qualifiedNameList )?
            int alt46=2;
            try { dbg.enterSubRule(46);
            try { dbg.enterDecision(46);

            int LA46_0 = input.LA(1);

            if ( (LA46_0==43) ) {
                alt46=1;
            }
            } finally {dbg.exitDecision(46);}

            switch (alt46) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:244:22: 'throws' qualifiedNameList
                    {
                    dbg.location(244,22);
                    string_literal134=(Token)input.LT(1);
                    match(input,43,FOLLOW_43_in_voidMethodDeclaratorRest1315); if (failed) return retval;
                    if ( backtracking==0 ) stream_43.add(string_literal134);

                    dbg.location(244,31);
                    pushFollow(FOLLOW_qualifiedNameList_in_voidMethodDeclaratorRest1317);
                    qualifiedNameList135=qualifiedNameList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_qualifiedNameList.add(qualifiedNameList135.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(46);}

            dbg.location(245,9);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:245:9: ( methodBody | ';' )
            int alt47=2;
            try { dbg.enterSubRule(47);
            try { dbg.enterDecision(47);

            int LA47_0 = input.LA(1);

            if ( (LA47_0==37) ) {
                alt47=1;
            }
            else if ( (LA47_0==25) ) {
                alt47=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("245:9: ( methodBody | ';' )", 47, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(47);}

            switch (alt47) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:245:13: methodBody
                    {
                    dbg.location(245,13);
                    pushFollow(FOLLOW_methodBody_in_voidMethodDeclaratorRest1333);
                    methodBody136=methodBody();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_methodBody.add(methodBody136.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:246:13: ';'
                    {
                    dbg.location(246,13);
                    char_literal137=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_voidMethodDeclaratorRest1347); if (failed) return retval;
                    if ( backtracking==0 ) stream_25.add(char_literal137);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(47);}

            dbg.location(247,11);

            // AST REWRITE
            // elements: qualifiedNameList, formalParameters, 43, methodBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 247:11: -> formalParameters ( 'throws' qualifiedNameList )? methodBody
            {
                dbg.location(247,14);
                adaptor.addChild(root_0, stream_formalParameters.next());
                dbg.location(247,31);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:247:31: ( 'throws' qualifiedNameList )?
                if ( stream_qualifiedNameList.hasNext()||stream_43.hasNext() ) {
                    dbg.location(247,32);
                    adaptor.addChild(root_0, stream_43.next());
                    dbg.location(247,41);
                    adaptor.addChild(root_0, stream_qualifiedNameList.next());

                }
                stream_qualifiedNameList.reset();
                stream_43.reset();
                dbg.location(247,61);
                adaptor.addChild(root_0, stream_methodBody.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 32, voidMethodDeclaratorRest_StartIndex); }
        }
        dbg.location(248, 2);

        }
        finally {
            dbg.exitRule("voidMethodDeclaratorRest");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end voidMethodDeclaratorRest

    public static class interfaceMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start interfaceMethodDeclaratorRest
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:250:1: interfaceMethodDeclaratorRest : formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';' -> formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';' ;
    public final interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest() throws RecognitionException {
        interfaceMethodDeclaratorRest_return retval = new interfaceMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int interfaceMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal139=null;
        Token char_literal140=null;
        Token string_literal141=null;
        Token char_literal143=null;
        formalParameters_return formalParameters138 = null;

        qualifiedNameList_return qualifiedNameList142 = null;


        Object char_literal139_tree=null;
        Object char_literal140_tree=null;
        Object string_literal141_tree=null;
        Object char_literal143_tree=null;
        RewriteRuleTokenStream stream_43=new RewriteRuleTokenStream(adaptor,"token 43");
        RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
        RewriteRuleTokenStream stream_41=new RewriteRuleTokenStream(adaptor,"token 41");
        RewriteRuleTokenStream stream_25=new RewriteRuleTokenStream(adaptor,"token 25");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_qualifiedNameList=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedNameList");
        try { dbg.enterRule("interfaceMethodDeclaratorRest");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(250, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:251:2: ( formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';' -> formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';' )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:251:4: formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';'
            {
            dbg.location(251,4);
            pushFollow(FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest1382);
            formalParameters138=formalParameters();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_formalParameters.add(formalParameters138.getTree());
            dbg.location(251,21);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:251:21: ( '[' ']' )*
            try { dbg.enterSubRule(48);

            loop48:
            do {
                int alt48=2;
                try { dbg.enterDecision(48);

                int LA48_0 = input.LA(1);

                if ( (LA48_0==41) ) {
                    alt48=1;
                }


                } finally {dbg.exitDecision(48);}

                switch (alt48) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:251:22: '[' ']'
            	    {
            	    dbg.location(251,22);
            	    char_literal139=(Token)input.LT(1);
            	    match(input,41,FOLLOW_41_in_interfaceMethodDeclaratorRest1385); if (failed) return retval;
            	    if ( backtracking==0 ) stream_41.add(char_literal139);

            	    dbg.location(251,26);
            	    char_literal140=(Token)input.LT(1);
            	    match(input,42,FOLLOW_42_in_interfaceMethodDeclaratorRest1387); if (failed) return retval;
            	    if ( backtracking==0 ) stream_42.add(char_literal140);


            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);
            } finally {dbg.exitSubRule(48);}

            dbg.location(251,32);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:251:32: ( 'throws' qualifiedNameList )?
            int alt49=2;
            try { dbg.enterSubRule(49);
            try { dbg.enterDecision(49);

            int LA49_0 = input.LA(1);

            if ( (LA49_0==43) ) {
                alt49=1;
            }
            } finally {dbg.exitDecision(49);}

            switch (alt49) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:251:33: 'throws' qualifiedNameList
                    {
                    dbg.location(251,33);
                    string_literal141=(Token)input.LT(1);
                    match(input,43,FOLLOW_43_in_interfaceMethodDeclaratorRest1392); if (failed) return retval;
                    if ( backtracking==0 ) stream_43.add(string_literal141);

                    dbg.location(251,42);
                    pushFollow(FOLLOW_qualifiedNameList_in_interfaceMethodDeclaratorRest1394);
                    qualifiedNameList142=qualifiedNameList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_qualifiedNameList.add(qualifiedNameList142.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(49);}

            dbg.location(251,62);
            char_literal143=(Token)input.LT(1);
            match(input,25,FOLLOW_25_in_interfaceMethodDeclaratorRest1398); if (failed) return retval;
            if ( backtracking==0 ) stream_25.add(char_literal143);

            dbg.location(251,66);

            // AST REWRITE
            // elements: 25, 43, 41, 42, qualifiedNameList, formalParameters
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 251:66: -> formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';'
            {
                dbg.location(251,69);
                adaptor.addChild(root_0, stream_formalParameters.next());
                dbg.location(251,86);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:251:86: ( '[' ']' )*
                while ( stream_41.hasNext()||stream_42.hasNext() ) {
                    dbg.location(251,87);
                    adaptor.addChild(root_0, stream_41.next());
                    dbg.location(251,91);
                    adaptor.addChild(root_0, stream_42.next());

                }
                stream_41.reset();
                stream_42.reset();
                dbg.location(251,97);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:251:97: ( 'throws' qualifiedNameList )?
                if ( stream_43.hasNext()||stream_qualifiedNameList.hasNext() ) {
                    dbg.location(251,98);
                    adaptor.addChild(root_0, stream_43.next());
                    dbg.location(251,107);
                    adaptor.addChild(root_0, stream_qualifiedNameList.next());

                }
                stream_43.reset();
                stream_qualifiedNameList.reset();
                dbg.location(251,127);
                adaptor.addChild(root_0, stream_25.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 33, interfaceMethodDeclaratorRest_StartIndex); }
        }
        dbg.location(252, 2);

        }
        finally {
            dbg.exitRule("interfaceMethodDeclaratorRest");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end interfaceMethodDeclaratorRest

    public static class interfaceGenericMethodDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start interfaceGenericMethodDecl
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:254:1: interfaceGenericMethodDecl : ( typeParameters type Identifier interfaceMethodDeclaratorRest -> typeParameters type Identifier interfaceMethodDeclaratorRest | typeParameters 'void' Identifier interfaceMethodDeclaratorRest -> typeParameters 'void' Identifier interfaceMethodDeclaratorRest );
    public final interfaceGenericMethodDecl_return interfaceGenericMethodDecl() throws RecognitionException {
        interfaceGenericMethodDecl_return retval = new interfaceGenericMethodDecl_return();
        retval.start = input.LT(1);
        int interfaceGenericMethodDecl_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier146=null;
        Token string_literal149=null;
        Token Identifier150=null;
        typeParameters_return typeParameters144 = null;

        type_return type145 = null;

        interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest147 = null;

        typeParameters_return typeParameters148 = null;

        interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest151 = null;


        Object Identifier146_tree=null;
        Object string_literal149_tree=null;
        Object Identifier150_tree=null;
        RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,"token 40");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_interfaceMethodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule interfaceMethodDeclaratorRest");
        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try { dbg.enterRule("interfaceGenericMethodDecl");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(254, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:255:2: ( typeParameters type Identifier interfaceMethodDeclaratorRest -> typeParameters type Identifier interfaceMethodDeclaratorRest | typeParameters 'void' Identifier interfaceMethodDeclaratorRest -> typeParameters 'void' Identifier interfaceMethodDeclaratorRest )
            int alt50=2;
            try { dbg.enterDecision(50);

            int LA50_0 = input.LA(1);

            if ( (LA50_0==33) ) {
                int LA50_1 = input.LA(2);

                if ( (LA50_1==Identifier) ) {
                    int LA50_2 = input.LA(3);

                    if ( (synpred60()) ) {
                        alt50=1;
                    }
                    else if ( (true) ) {
                        alt50=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("254:1: interfaceGenericMethodDecl : ( typeParameters type Identifier interfaceMethodDeclaratorRest -> typeParameters type Identifier interfaceMethodDeclaratorRest | typeParameters 'void' Identifier interfaceMethodDeclaratorRest -> typeParameters 'void' Identifier interfaceMethodDeclaratorRest );", 50, 2, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("254:1: interfaceGenericMethodDecl : ( typeParameters type Identifier interfaceMethodDeclaratorRest -> typeParameters type Identifier interfaceMethodDeclaratorRest | typeParameters 'void' Identifier interfaceMethodDeclaratorRest -> typeParameters 'void' Identifier interfaceMethodDeclaratorRest );", 50, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("254:1: interfaceGenericMethodDecl : ( typeParameters type Identifier interfaceMethodDeclaratorRest -> typeParameters type Identifier interfaceMethodDeclaratorRest | typeParameters 'void' Identifier interfaceMethodDeclaratorRest -> typeParameters 'void' Identifier interfaceMethodDeclaratorRest );", 50, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(50);}

            switch (alt50) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:255:4: typeParameters type Identifier interfaceMethodDeclaratorRest
                    {
                    dbg.location(255,4);
                    pushFollow(FOLLOW_typeParameters_in_interfaceGenericMethodDecl1430);
                    typeParameters144=typeParameters();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_typeParameters.add(typeParameters144.getTree());
                    dbg.location(255,19);
                    pushFollow(FOLLOW_type_in_interfaceGenericMethodDecl1432);
                    type145=type();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_type.add(type145.getTree());
                    dbg.location(255,24);
                    Identifier146=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_interfaceGenericMethodDecl1434); if (failed) return retval;
                    if ( backtracking==0 ) stream_Identifier.add(Identifier146);

                    dbg.location(255,35);
                    pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl1436);
                    interfaceMethodDeclaratorRest147=interfaceMethodDeclaratorRest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_interfaceMethodDeclaratorRest.add(interfaceMethodDeclaratorRest147.getTree());
                    dbg.location(255,65);

                    // AST REWRITE
                    // elements: typeParameters, Identifier, type, interfaceMethodDeclaratorRest
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 255:65: -> typeParameters type Identifier interfaceMethodDeclaratorRest
                    {
                        dbg.location(255,68);
                        adaptor.addChild(root_0, stream_typeParameters.next());
                        dbg.location(255,83);
                        adaptor.addChild(root_0, stream_type.next());
                        dbg.location(255,88);
                        adaptor.addChild(root_0, stream_Identifier.next());
                        dbg.location(255,99);
                        adaptor.addChild(root_0, stream_interfaceMethodDeclaratorRest.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:256:10: typeParameters 'void' Identifier interfaceMethodDeclaratorRest
                    {
                    dbg.location(256,10);
                    pushFollow(FOLLOW_typeParameters_in_interfaceGenericMethodDecl1457);
                    typeParameters148=typeParameters();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_typeParameters.add(typeParameters148.getTree());
                    dbg.location(256,25);
                    string_literal149=(Token)input.LT(1);
                    match(input,40,FOLLOW_40_in_interfaceGenericMethodDecl1459); if (failed) return retval;
                    if ( backtracking==0 ) stream_40.add(string_literal149);

                    dbg.location(256,32);
                    Identifier150=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_interfaceGenericMethodDecl1461); if (failed) return retval;
                    if ( backtracking==0 ) stream_Identifier.add(Identifier150);

                    dbg.location(256,43);
                    pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl1463);
                    interfaceMethodDeclaratorRest151=interfaceMethodDeclaratorRest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_interfaceMethodDeclaratorRest.add(interfaceMethodDeclaratorRest151.getTree());
                    dbg.location(256,73);

                    // AST REWRITE
                    // elements: Identifier, 40, interfaceMethodDeclaratorRest, typeParameters
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 256:73: -> typeParameters 'void' Identifier interfaceMethodDeclaratorRest
                    {
                        dbg.location(256,76);
                        adaptor.addChild(root_0, stream_typeParameters.next());
                        dbg.location(256,91);
                        adaptor.addChild(root_0, stream_40.next());
                        dbg.location(256,98);
                        adaptor.addChild(root_0, stream_Identifier.next());
                        dbg.location(256,109);
                        adaptor.addChild(root_0, stream_interfaceMethodDeclaratorRest.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 34, interfaceGenericMethodDecl_StartIndex); }
        }
        dbg.location(257, 2);

        }
        finally {
            dbg.exitRule("interfaceGenericMethodDecl");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end interfaceGenericMethodDecl

    public static class voidInterfaceMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start voidInterfaceMethodDeclaratorRest
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:259:1: voidInterfaceMethodDeclaratorRest : formalParameters ( 'throws' qualifiedNameList )? ';' -> formalParameters ( 'throws' qualifiedNameList )? ';' ;
    public final voidInterfaceMethodDeclaratorRest_return voidInterfaceMethodDeclaratorRest() throws RecognitionException {
        voidInterfaceMethodDeclaratorRest_return retval = new voidInterfaceMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int voidInterfaceMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal153=null;
        Token char_literal155=null;
        formalParameters_return formalParameters152 = null;

        qualifiedNameList_return qualifiedNameList154 = null;


        Object string_literal153_tree=null;
        Object char_literal155_tree=null;
        RewriteRuleTokenStream stream_43=new RewriteRuleTokenStream(adaptor,"token 43");
        RewriteRuleTokenStream stream_25=new RewriteRuleTokenStream(adaptor,"token 25");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_qualifiedNameList=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedNameList");
        try { dbg.enterRule("voidInterfaceMethodDeclaratorRest");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(259, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:260:2: ( formalParameters ( 'throws' qualifiedNameList )? ';' -> formalParameters ( 'throws' qualifiedNameList )? ';' )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:260:4: formalParameters ( 'throws' qualifiedNameList )? ';'
            {
            dbg.location(260,4);
            pushFollow(FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest1485);
            formalParameters152=formalParameters();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_formalParameters.add(formalParameters152.getTree());
            dbg.location(260,21);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:260:21: ( 'throws' qualifiedNameList )?
            int alt51=2;
            try { dbg.enterSubRule(51);
            try { dbg.enterDecision(51);

            int LA51_0 = input.LA(1);

            if ( (LA51_0==43) ) {
                alt51=1;
            }
            } finally {dbg.exitDecision(51);}

            switch (alt51) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:260:22: 'throws' qualifiedNameList
                    {
                    dbg.location(260,22);
                    string_literal153=(Token)input.LT(1);
                    match(input,43,FOLLOW_43_in_voidInterfaceMethodDeclaratorRest1488); if (failed) return retval;
                    if ( backtracking==0 ) stream_43.add(string_literal153);

                    dbg.location(260,31);
                    pushFollow(FOLLOW_qualifiedNameList_in_voidInterfaceMethodDeclaratorRest1490);
                    qualifiedNameList154=qualifiedNameList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_qualifiedNameList.add(qualifiedNameList154.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(51);}

            dbg.location(260,51);
            char_literal155=(Token)input.LT(1);
            match(input,25,FOLLOW_25_in_voidInterfaceMethodDeclaratorRest1494); if (failed) return retval;
            if ( backtracking==0 ) stream_25.add(char_literal155);

            dbg.location(260,55);

            // AST REWRITE
            // elements: 25, qualifiedNameList, 43, formalParameters
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 260:55: -> formalParameters ( 'throws' qualifiedNameList )? ';'
            {
                dbg.location(260,58);
                adaptor.addChild(root_0, stream_formalParameters.next());
                dbg.location(260,75);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:260:75: ( 'throws' qualifiedNameList )?
                if ( stream_qualifiedNameList.hasNext()||stream_43.hasNext() ) {
                    dbg.location(260,76);
                    adaptor.addChild(root_0, stream_43.next());
                    dbg.location(260,85);
                    adaptor.addChild(root_0, stream_qualifiedNameList.next());

                }
                stream_qualifiedNameList.reset();
                stream_43.reset();
                dbg.location(260,105);
                adaptor.addChild(root_0, stream_25.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 35, voidInterfaceMethodDeclaratorRest_StartIndex); }
        }
        dbg.location(261, 2);

        }
        finally {
            dbg.exitRule("voidInterfaceMethodDeclaratorRest");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end voidInterfaceMethodDeclaratorRest

    public static class constructorDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start constructorDeclaratorRest
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:263:1: constructorDeclaratorRest : formalParameters ( 'throws' qualifiedNameList )? methodBody -> formalParameters ( 'throws' qualifiedNameList )? methodBody ;
    public final constructorDeclaratorRest_return constructorDeclaratorRest() throws RecognitionException {
        constructorDeclaratorRest_return retval = new constructorDeclaratorRest_return();
        retval.start = input.LT(1);
        int constructorDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal157=null;
        formalParameters_return formalParameters156 = null;

        qualifiedNameList_return qualifiedNameList158 = null;

        methodBody_return methodBody159 = null;


        Object string_literal157_tree=null;
        RewriteRuleTokenStream stream_43=new RewriteRuleTokenStream(adaptor,"token 43");
        RewriteRuleSubtreeStream stream_methodBody=new RewriteRuleSubtreeStream(adaptor,"rule methodBody");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_qualifiedNameList=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedNameList");
        try { dbg.enterRule("constructorDeclaratorRest");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(263, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:264:2: ( formalParameters ( 'throws' qualifiedNameList )? methodBody -> formalParameters ( 'throws' qualifiedNameList )? methodBody )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:264:4: formalParameters ( 'throws' qualifiedNameList )? methodBody
            {
            dbg.location(264,4);
            pushFollow(FOLLOW_formalParameters_in_constructorDeclaratorRest1519);
            formalParameters156=formalParameters();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_formalParameters.add(formalParameters156.getTree());
            dbg.location(264,21);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:264:21: ( 'throws' qualifiedNameList )?
            int alt52=2;
            try { dbg.enterSubRule(52);
            try { dbg.enterDecision(52);

            int LA52_0 = input.LA(1);

            if ( (LA52_0==43) ) {
                alt52=1;
            }
            } finally {dbg.exitDecision(52);}

            switch (alt52) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:264:22: 'throws' qualifiedNameList
                    {
                    dbg.location(264,22);
                    string_literal157=(Token)input.LT(1);
                    match(input,43,FOLLOW_43_in_constructorDeclaratorRest1522); if (failed) return retval;
                    if ( backtracking==0 ) stream_43.add(string_literal157);

                    dbg.location(264,31);
                    pushFollow(FOLLOW_qualifiedNameList_in_constructorDeclaratorRest1524);
                    qualifiedNameList158=qualifiedNameList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_qualifiedNameList.add(qualifiedNameList158.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(52);}

            dbg.location(264,51);
            pushFollow(FOLLOW_methodBody_in_constructorDeclaratorRest1528);
            methodBody159=methodBody();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_methodBody.add(methodBody159.getTree());
            dbg.location(264,62);

            // AST REWRITE
            // elements: methodBody, formalParameters, qualifiedNameList, 43
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 264:62: -> formalParameters ( 'throws' qualifiedNameList )? methodBody
            {
                dbg.location(264,65);
                adaptor.addChild(root_0, stream_formalParameters.next());
                dbg.location(264,82);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:264:82: ( 'throws' qualifiedNameList )?
                if ( stream_qualifiedNameList.hasNext()||stream_43.hasNext() ) {
                    dbg.location(264,83);
                    adaptor.addChild(root_0, stream_43.next());
                    dbg.location(264,92);
                    adaptor.addChild(root_0, stream_qualifiedNameList.next());

                }
                stream_qualifiedNameList.reset();
                stream_43.reset();
                dbg.location(264,112);
                adaptor.addChild(root_0, stream_methodBody.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 36, constructorDeclaratorRest_StartIndex); }
        }
        dbg.location(265, 2);

        }
        finally {
            dbg.exitRule("constructorDeclaratorRest");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end constructorDeclaratorRest

    public static class constantDeclarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start constantDeclarator
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:267:1: constantDeclarator : Identifier constantDeclaratorRest -> Identifier constantDeclaratorRest ;
    public final constantDeclarator_return constantDeclarator() throws RecognitionException {
        constantDeclarator_return retval = new constantDeclarator_return();
        retval.start = input.LT(1);
        int constantDeclarator_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier160=null;
        constantDeclaratorRest_return constantDeclaratorRest161 = null;


        Object Identifier160_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_constantDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule constantDeclaratorRest");
        try { dbg.enterRule("constantDeclarator");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(267, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:268:2: ( Identifier constantDeclaratorRest -> Identifier constantDeclaratorRest )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:268:4: Identifier constantDeclaratorRest
            {
            dbg.location(268,4);
            Identifier160=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_constantDeclarator1552); if (failed) return retval;
            if ( backtracking==0 ) stream_Identifier.add(Identifier160);

            dbg.location(268,15);
            pushFollow(FOLLOW_constantDeclaratorRest_in_constantDeclarator1554);
            constantDeclaratorRest161=constantDeclaratorRest();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_constantDeclaratorRest.add(constantDeclaratorRest161.getTree());
            dbg.location(268,38);

            // AST REWRITE
            // elements: constantDeclaratorRest, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 268:38: -> Identifier constantDeclaratorRest
            {
                dbg.location(268,41);
                adaptor.addChild(root_0, stream_Identifier.next());
                dbg.location(268,52);
                adaptor.addChild(root_0, stream_constantDeclaratorRest.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 37, constantDeclarator_StartIndex); }
        }
        dbg.location(269, 2);

        }
        finally {
            dbg.exitRule("constantDeclarator");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end constantDeclarator

    public static class variableDeclarators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start variableDeclarators
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:271:1: variableDeclarators : variableDeclarator ( ',' variableDeclarator )* -> ( variableDeclarator )+ ;
    public final variableDeclarators_return variableDeclarators() throws RecognitionException {
        variableDeclarators_return retval = new variableDeclarators_return();
        retval.start = input.LT(1);
        int variableDeclarators_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal163=null;
        variableDeclarator_return variableDeclarator162 = null;

        variableDeclarator_return variableDeclarator164 = null;


        Object char_literal163_tree=null;
        RewriteRuleTokenStream stream_34=new RewriteRuleTokenStream(adaptor,"token 34");
        RewriteRuleSubtreeStream stream_variableDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarator");
        try { dbg.enterRule("variableDeclarators");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(271, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:272:2: ( variableDeclarator ( ',' variableDeclarator )* -> ( variableDeclarator )+ )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:272:4: variableDeclarator ( ',' variableDeclarator )*
            {
            dbg.location(272,4);
            pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators1572);
            variableDeclarator162=variableDeclarator();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_variableDeclarator.add(variableDeclarator162.getTree());
            dbg.location(272,23);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:272:23: ( ',' variableDeclarator )*
            try { dbg.enterSubRule(53);

            loop53:
            do {
                int alt53=2;
                try { dbg.enterDecision(53);

                int LA53_0 = input.LA(1);

                if ( (LA53_0==34) ) {
                    alt53=1;
                }


                } finally {dbg.exitDecision(53);}

                switch (alt53) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:272:24: ',' variableDeclarator
            	    {
            	    dbg.location(272,24);
            	    char_literal163=(Token)input.LT(1);
            	    match(input,34,FOLLOW_34_in_variableDeclarators1575); if (failed) return retval;
            	    if ( backtracking==0 ) stream_34.add(char_literal163);

            	    dbg.location(272,28);
            	    pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators1577);
            	    variableDeclarator164=variableDeclarator();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_variableDeclarator.add(variableDeclarator164.getTree());

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);
            } finally {dbg.exitSubRule(53);}

            dbg.location(272,49);

            // AST REWRITE
            // elements: variableDeclarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 272:49: -> ( variableDeclarator )+
            {
                dbg.location(272,52);
                if ( !(stream_variableDeclarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variableDeclarator.hasNext() ) {
                    dbg.location(272,52);
                    adaptor.addChild(root_0, stream_variableDeclarator.next());

                }
                stream_variableDeclarator.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 38, variableDeclarators_StartIndex); }
        }
        dbg.location(273, 2);

        }
        finally {
            dbg.exitRule("variableDeclarators");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end variableDeclarators

    public static class variableDeclarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start variableDeclarator
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:275:1: variableDeclarator : Identifier variableDeclaratorRest -> Identifier variableDeclaratorRest ;
    public final variableDeclarator_return variableDeclarator() throws RecognitionException {
        variableDeclarator_return retval = new variableDeclarator_return();
        retval.start = input.LT(1);
        int variableDeclarator_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier165=null;
        variableDeclaratorRest_return variableDeclaratorRest166 = null;


        Object Identifier165_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_variableDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorRest");
        try { dbg.enterRule("variableDeclarator");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(275, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:276:2: ( Identifier variableDeclaratorRest -> Identifier variableDeclaratorRest )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:276:4: Identifier variableDeclaratorRest
            {
            dbg.location(276,4);
            Identifier165=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_variableDeclarator1595); if (failed) return retval;
            if ( backtracking==0 ) stream_Identifier.add(Identifier165);

            dbg.location(276,15);
            pushFollow(FOLLOW_variableDeclaratorRest_in_variableDeclarator1597);
            variableDeclaratorRest166=variableDeclaratorRest();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_variableDeclaratorRest.add(variableDeclaratorRest166.getTree());
            dbg.location(276,38);

            // AST REWRITE
            // elements: Identifier, variableDeclaratorRest
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 276:38: -> Identifier variableDeclaratorRest
            {
                dbg.location(276,41);
                adaptor.addChild(root_0, stream_Identifier.next());
                dbg.location(276,52);
                adaptor.addChild(root_0, stream_variableDeclaratorRest.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 39, variableDeclarator_StartIndex); }
        }
        dbg.location(277, 2);

        }
        finally {
            dbg.exitRule("variableDeclarator");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end variableDeclarator

    public static class variableDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start variableDeclaratorRest
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:279:1: variableDeclaratorRest : ( ( '[' ']' )+ ( '=' variableInitializer )? -> ( '[' ']' )+ ( '=' variableInitializer )? | '=' variableInitializer -> '=' variableInitializer | );
    public final variableDeclaratorRest_return variableDeclaratorRest() throws RecognitionException {
        variableDeclaratorRest_return retval = new variableDeclaratorRest_return();
        retval.start = input.LT(1);
        int variableDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal167=null;
        Token char_literal168=null;
        Token char_literal169=null;
        Token char_literal171=null;
        variableInitializer_return variableInitializer170 = null;

        variableInitializer_return variableInitializer172 = null;


        Object char_literal167_tree=null;
        Object char_literal168_tree=null;
        Object char_literal169_tree=null;
        Object char_literal171_tree=null;
        RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
        RewriteRuleTokenStream stream_44=new RewriteRuleTokenStream(adaptor,"token 44");
        RewriteRuleTokenStream stream_41=new RewriteRuleTokenStream(adaptor,"token 41");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try { dbg.enterRule("variableDeclaratorRest");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(279, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:280:2: ( ( '[' ']' )+ ( '=' variableInitializer )? -> ( '[' ']' )+ ( '=' variableInitializer )? | '=' variableInitializer -> '=' variableInitializer | )
            int alt56=3;
            try { dbg.enterDecision(56);

            switch ( input.LA(1) ) {
            case 41:
                {
                alt56=1;
                }
                break;
            case 44:
                {
                alt56=2;
                }
                break;
            case EOF:
            case 25:
            case 34:
                {
                alt56=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("279:1: variableDeclaratorRest : ( ( '[' ']' )+ ( '=' variableInitializer )? -> ( '[' ']' )+ ( '=' variableInitializer )? | '=' variableInitializer -> '=' variableInitializer | );", 56, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(56);}

            switch (alt56) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:280:4: ( '[' ']' )+ ( '=' variableInitializer )?
                    {
                    dbg.location(280,4);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:280:4: ( '[' ']' )+
                    int cnt54=0;
                    try { dbg.enterSubRule(54);

                    loop54:
                    do {
                        int alt54=2;
                        try { dbg.enterDecision(54);

                        int LA54_0 = input.LA(1);

                        if ( (LA54_0==41) ) {
                            alt54=1;
                        }


                        } finally {dbg.exitDecision(54);}

                        switch (alt54) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:280:5: '[' ']'
                    	    {
                    	    dbg.location(280,5);
                    	    char_literal167=(Token)input.LT(1);
                    	    match(input,41,FOLLOW_41_in_variableDeclaratorRest1616); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_41.add(char_literal167);

                    	    dbg.location(280,9);
                    	    char_literal168=(Token)input.LT(1);
                    	    match(input,42,FOLLOW_42_in_variableDeclaratorRest1618); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_42.add(char_literal168);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt54 >= 1 ) break loop54;
                    	    if (backtracking>0) {failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(54, input);
                                dbg.recognitionException(eee);

                                throw eee;
                        }
                        cnt54++;
                    } while (true);
                    } finally {dbg.exitSubRule(54);}

                    dbg.location(280,15);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:280:15: ( '=' variableInitializer )?
                    int alt55=2;
                    try { dbg.enterSubRule(55);
                    try { dbg.enterDecision(55);

                    int LA55_0 = input.LA(1);

                    if ( (LA55_0==44) ) {
                        alt55=1;
                    }
                    } finally {dbg.exitDecision(55);}

                    switch (alt55) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:280:16: '=' variableInitializer
                            {
                            dbg.location(280,16);
                            char_literal169=(Token)input.LT(1);
                            match(input,44,FOLLOW_44_in_variableDeclaratorRest1623); if (failed) return retval;
                            if ( backtracking==0 ) stream_44.add(char_literal169);

                            dbg.location(280,20);
                            pushFollow(FOLLOW_variableInitializer_in_variableDeclaratorRest1625);
                            variableInitializer170=variableInitializer();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_variableInitializer.add(variableInitializer170.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(55);}

                    dbg.location(280,42);

                    // AST REWRITE
                    // elements: variableInitializer, 42, 44, 41
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 280:42: -> ( '[' ']' )+ ( '=' variableInitializer )?
                    {
                        dbg.location(280,45);
                        if ( !(stream_42.hasNext()||stream_41.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_42.hasNext()||stream_41.hasNext() ) {
                            dbg.location(280,46);
                            adaptor.addChild(root_0, stream_41.next());
                            dbg.location(280,50);
                            adaptor.addChild(root_0, stream_42.next());

                        }
                        stream_42.reset();
                        stream_41.reset();
                        dbg.location(280,56);
                        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:280:56: ( '=' variableInitializer )?
                        if ( stream_variableInitializer.hasNext()||stream_44.hasNext() ) {
                            dbg.location(280,57);
                            adaptor.addChild(root_0, stream_44.next());
                            dbg.location(280,61);
                            adaptor.addChild(root_0, stream_variableInitializer.next());

                        }
                        stream_variableInitializer.reset();
                        stream_44.reset();

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:281:4: '=' variableInitializer
                    {
                    dbg.location(281,4);
                    char_literal171=(Token)input.LT(1);
                    match(input,44,FOLLOW_44_in_variableDeclaratorRest1648); if (failed) return retval;
                    if ( backtracking==0 ) stream_44.add(char_literal171);

                    dbg.location(281,8);
                    pushFollow(FOLLOW_variableInitializer_in_variableDeclaratorRest1650);
                    variableInitializer172=variableInitializer();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_variableInitializer.add(variableInitializer172.getTree());
                    dbg.location(281,28);

                    // AST REWRITE
                    // elements: variableInitializer, 44
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 281:28: -> '=' variableInitializer
                    {
                        dbg.location(281,31);
                        adaptor.addChild(root_0, stream_44.next());
                        dbg.location(281,35);
                        adaptor.addChild(root_0, stream_variableInitializer.next());

                    }

                    }

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:283:2: 
                    {
                    root_0 = (Object)adaptor.nil();

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 40, variableDeclaratorRest_StartIndex); }
        }
        dbg.location(283, 2);

        }
        finally {
            dbg.exitRule("variableDeclaratorRest");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end variableDeclaratorRest

    public static class constantDeclaratorsRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start constantDeclaratorsRest
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:285:1: constantDeclaratorsRest : constantDeclaratorRest ( ',' constantDeclarator )* -> constantDeclaratorRest ( ',' constantDeclarator )* ;
    public final constantDeclaratorsRest_return constantDeclaratorsRest() throws RecognitionException {
        constantDeclaratorsRest_return retval = new constantDeclaratorsRest_return();
        retval.start = input.LT(1);
        int constantDeclaratorsRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal174=null;
        constantDeclaratorRest_return constantDeclaratorRest173 = null;

        constantDeclarator_return constantDeclarator175 = null;


        Object char_literal174_tree=null;
        RewriteRuleTokenStream stream_34=new RewriteRuleTokenStream(adaptor,"token 34");
        RewriteRuleSubtreeStream stream_constantDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule constantDeclaratorRest");
        RewriteRuleSubtreeStream stream_constantDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule constantDeclarator");
        try { dbg.enterRule("constantDeclaratorsRest");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(285, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:286:5: ( constantDeclaratorRest ( ',' constantDeclarator )* -> constantDeclaratorRest ( ',' constantDeclarator )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:286:9: constantDeclaratorRest ( ',' constantDeclarator )*
            {
            dbg.location(286,9);
            pushFollow(FOLLOW_constantDeclaratorRest_in_constantDeclaratorsRest1676);
            constantDeclaratorRest173=constantDeclaratorRest();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_constantDeclaratorRest.add(constantDeclaratorRest173.getTree());
            dbg.location(286,32);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:286:32: ( ',' constantDeclarator )*
            try { dbg.enterSubRule(57);

            loop57:
            do {
                int alt57=2;
                try { dbg.enterDecision(57);

                int LA57_0 = input.LA(1);

                if ( (LA57_0==34) ) {
                    alt57=1;
                }


                } finally {dbg.exitDecision(57);}

                switch (alt57) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:286:33: ',' constantDeclarator
            	    {
            	    dbg.location(286,33);
            	    char_literal174=(Token)input.LT(1);
            	    match(input,34,FOLLOW_34_in_constantDeclaratorsRest1679); if (failed) return retval;
            	    if ( backtracking==0 ) stream_34.add(char_literal174);

            	    dbg.location(286,37);
            	    pushFollow(FOLLOW_constantDeclarator_in_constantDeclaratorsRest1681);
            	    constantDeclarator175=constantDeclarator();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_constantDeclarator.add(constantDeclarator175.getTree());

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);
            } finally {dbg.exitSubRule(57);}

            dbg.location(286,58);

            // AST REWRITE
            // elements: constantDeclaratorRest, constantDeclarator, 34
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 286:58: -> constantDeclaratorRest ( ',' constantDeclarator )*
            {
                dbg.location(286,61);
                adaptor.addChild(root_0, stream_constantDeclaratorRest.next());
                dbg.location(286,84);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:286:84: ( ',' constantDeclarator )*
                while ( stream_constantDeclarator.hasNext()||stream_34.hasNext() ) {
                    dbg.location(286,85);
                    adaptor.addChild(root_0, stream_34.next());
                    dbg.location(286,89);
                    adaptor.addChild(root_0, stream_constantDeclarator.next());

                }
                stream_constantDeclarator.reset();
                stream_34.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 41, constantDeclaratorsRest_StartIndex); }
        }
        dbg.location(287, 5);

        }
        finally {
            dbg.exitRule("constantDeclaratorsRest");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end constantDeclaratorsRest

    public static class constantDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start constantDeclaratorRest
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:289:1: constantDeclaratorRest : ( '[' ']' )* '=' variableInitializer -> ( '[' ']' )* '=' variableInitializer ;
    public final constantDeclaratorRest_return constantDeclaratorRest() throws RecognitionException {
        constantDeclaratorRest_return retval = new constantDeclaratorRest_return();
        retval.start = input.LT(1);
        int constantDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal176=null;
        Token char_literal177=null;
        Token char_literal178=null;
        variableInitializer_return variableInitializer179 = null;


        Object char_literal176_tree=null;
        Object char_literal177_tree=null;
        Object char_literal178_tree=null;
        RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
        RewriteRuleTokenStream stream_44=new RewriteRuleTokenStream(adaptor,"token 44");
        RewriteRuleTokenStream stream_41=new RewriteRuleTokenStream(adaptor,"token 41");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try { dbg.enterRule("constantDeclaratorRest");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(289, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:290:2: ( ( '[' ']' )* '=' variableInitializer -> ( '[' ']' )* '=' variableInitializer )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:290:4: ( '[' ']' )* '=' variableInitializer
            {
            dbg.location(290,4);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:290:4: ( '[' ']' )*
            try { dbg.enterSubRule(58);

            loop58:
            do {
                int alt58=2;
                try { dbg.enterDecision(58);

                int LA58_0 = input.LA(1);

                if ( (LA58_0==41) ) {
                    alt58=1;
                }


                } finally {dbg.exitDecision(58);}

                switch (alt58) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:290:5: '[' ']'
            	    {
            	    dbg.location(290,5);
            	    char_literal176=(Token)input.LT(1);
            	    match(input,41,FOLLOW_41_in_constantDeclaratorRest1709); if (failed) return retval;
            	    if ( backtracking==0 ) stream_41.add(char_literal176);

            	    dbg.location(290,9);
            	    char_literal177=(Token)input.LT(1);
            	    match(input,42,FOLLOW_42_in_constantDeclaratorRest1711); if (failed) return retval;
            	    if ( backtracking==0 ) stream_42.add(char_literal177);


            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);
            } finally {dbg.exitSubRule(58);}

            dbg.location(290,15);
            char_literal178=(Token)input.LT(1);
            match(input,44,FOLLOW_44_in_constantDeclaratorRest1715); if (failed) return retval;
            if ( backtracking==0 ) stream_44.add(char_literal178);

            dbg.location(290,19);
            pushFollow(FOLLOW_variableInitializer_in_constantDeclaratorRest1717);
            variableInitializer179=variableInitializer();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_variableInitializer.add(variableInitializer179.getTree());
            dbg.location(290,39);

            // AST REWRITE
            // elements: 41, 44, 42, variableInitializer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 290:39: -> ( '[' ']' )* '=' variableInitializer
            {
                dbg.location(290,42);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:290:42: ( '[' ']' )*
                while ( stream_41.hasNext()||stream_42.hasNext() ) {
                    dbg.location(290,43);
                    adaptor.addChild(root_0, stream_41.next());
                    dbg.location(290,47);
                    adaptor.addChild(root_0, stream_42.next());

                }
                stream_41.reset();
                stream_42.reset();
                dbg.location(290,53);
                adaptor.addChild(root_0, stream_44.next());
                dbg.location(290,57);
                adaptor.addChild(root_0, stream_variableInitializer.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 42, constantDeclaratorRest_StartIndex); }
        }
        dbg.location(291, 2);

        }
        finally {
            dbg.exitRule("constantDeclaratorRest");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end constantDeclaratorRest

    public static class variableDeclaratorId_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start variableDeclaratorId
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:293:1: variableDeclaratorId : Identifier ( '[' ']' )* -> Identifier ( '[' ']' )* ;
    public final variableDeclaratorId_return variableDeclaratorId() throws RecognitionException {
        variableDeclaratorId_return retval = new variableDeclaratorId_return();
        retval.start = input.LT(1);
        int variableDeclaratorId_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier180=null;
        Token char_literal181=null;
        Token char_literal182=null;

        Object Identifier180_tree=null;
        Object char_literal181_tree=null;
        Object char_literal182_tree=null;
        RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
        RewriteRuleTokenStream stream_41=new RewriteRuleTokenStream(adaptor,"token 41");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

        try { dbg.enterRule("variableDeclaratorId");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(293, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:294:2: ( Identifier ( '[' ']' )* -> Identifier ( '[' ']' )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:294:4: Identifier ( '[' ']' )*
            {
            dbg.location(294,4);
            Identifier180=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_variableDeclaratorId1742); if (failed) return retval;
            if ( backtracking==0 ) stream_Identifier.add(Identifier180);

            dbg.location(294,15);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:294:15: ( '[' ']' )*
            try { dbg.enterSubRule(59);

            loop59:
            do {
                int alt59=2;
                try { dbg.enterDecision(59);

                int LA59_0 = input.LA(1);

                if ( (LA59_0==41) ) {
                    alt59=1;
                }


                } finally {dbg.exitDecision(59);}

                switch (alt59) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:294:16: '[' ']'
            	    {
            	    dbg.location(294,16);
            	    char_literal181=(Token)input.LT(1);
            	    match(input,41,FOLLOW_41_in_variableDeclaratorId1745); if (failed) return retval;
            	    if ( backtracking==0 ) stream_41.add(char_literal181);

            	    dbg.location(294,20);
            	    char_literal182=(Token)input.LT(1);
            	    match(input,42,FOLLOW_42_in_variableDeclaratorId1747); if (failed) return retval;
            	    if ( backtracking==0 ) stream_42.add(char_literal182);


            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);
            } finally {dbg.exitSubRule(59);}

            dbg.location(294,26);

            // AST REWRITE
            // elements: Identifier, 42, 41
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 294:26: -> Identifier ( '[' ']' )*
            {
                dbg.location(294,29);
                adaptor.addChild(root_0, stream_Identifier.next());
                dbg.location(294,40);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:294:40: ( '[' ']' )*
                while ( stream_42.hasNext()||stream_41.hasNext() ) {
                    dbg.location(294,41);
                    adaptor.addChild(root_0, stream_41.next());
                    dbg.location(294,45);
                    adaptor.addChild(root_0, stream_42.next());

                }
                stream_42.reset();
                stream_41.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 43, variableDeclaratorId_StartIndex); }
        }
        dbg.location(295, 2);

        }
        finally {
            dbg.exitRule("variableDeclaratorId");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end variableDeclaratorId

    public static class variableInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start variableInitializer
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:297:1: variableInitializer : ( arrayInitializer -> arrayInitializer | expression -> expression );
    public final variableInitializer_return variableInitializer() throws RecognitionException {
        variableInitializer_return retval = new variableInitializer_return();
        retval.start = input.LT(1);
        int variableInitializer_StartIndex = input.index();
        Object root_0 = null;

        arrayInitializer_return arrayInitializer183 = null;

        expression_return expression184 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_arrayInitializer=new RewriteRuleSubtreeStream(adaptor,"rule arrayInitializer");
        try { dbg.enterRule("variableInitializer");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(297, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:298:2: ( arrayInitializer -> arrayInitializer | expression -> expression )
            int alt60=2;
            try { dbg.enterDecision(60);

            int LA60_0 = input.LA(1);

            if ( (LA60_0==37) ) {
                alt60=1;
            }
            else if ( (LA60_0==Identifier||(LA60_0>=FloatingPointLiteral && LA60_0<=DecimalLiteral)||LA60_0==33||LA60_0==40||(LA60_0>=55 && LA60_0<=62)||(LA60_0>=64 && LA60_0<=65)||(LA60_0>=68 && LA60_0<=70)||(LA60_0>=104 && LA60_0<=105)||(LA60_0>=108 && LA60_0<=113)) ) {
                alt60=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("297:1: variableInitializer : ( arrayInitializer -> arrayInitializer | expression -> expression );", 60, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(60);}

            switch (alt60) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:298:4: arrayInitializer
                    {
                    dbg.location(298,4);
                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer1771);
                    arrayInitializer183=arrayInitializer();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_arrayInitializer.add(arrayInitializer183.getTree());
                    dbg.location(298,21);

                    // AST REWRITE
                    // elements: arrayInitializer
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 298:21: -> arrayInitializer
                    {
                        dbg.location(298,24);
                        adaptor.addChild(root_0, stream_arrayInitializer.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:299:9: expression
                    {
                    dbg.location(299,9);
                    pushFollow(FOLLOW_expression_in_variableInitializer1785);
                    expression184=expression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_expression.add(expression184.getTree());
                    dbg.location(299,20);

                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 299:20: -> expression
                    {
                        dbg.location(299,23);
                        adaptor.addChild(root_0, stream_expression.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 44, variableInitializer_StartIndex); }
        }
        dbg.location(300, 2);

        }
        finally {
            dbg.exitRule("variableInitializer");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end variableInitializer

    public static class arrayInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start arrayInitializer
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:302:1: arrayInitializer : '{' ( variableInitializer ( ',' variableInitializer )* ( ',' )? )? '}' -> '{' ( variableInitializer ( ',' variableInitializer )* ( ',' )? )? '}' ;
    public final arrayInitializer_return arrayInitializer() throws RecognitionException {
        arrayInitializer_return retval = new arrayInitializer_return();
        retval.start = input.LT(1);
        int arrayInitializer_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal185=null;
        Token char_literal187=null;
        Token char_literal189=null;
        Token char_literal190=null;
        variableInitializer_return variableInitializer186 = null;

        variableInitializer_return variableInitializer188 = null;


        Object char_literal185_tree=null;
        Object char_literal187_tree=null;
        Object char_literal189_tree=null;
        Object char_literal190_tree=null;
        RewriteRuleTokenStream stream_34=new RewriteRuleTokenStream(adaptor,"token 34");
        RewriteRuleTokenStream stream_37=new RewriteRuleTokenStream(adaptor,"token 37");
        RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try { dbg.enterRule("arrayInitializer");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(302, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:303:2: ( '{' ( variableInitializer ( ',' variableInitializer )* ( ',' )? )? '}' -> '{' ( variableInitializer ( ',' variableInitializer )* ( ',' )? )? '}' )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:303:4: '{' ( variableInitializer ( ',' variableInitializer )* ( ',' )? )? '}'
            {
            dbg.location(303,4);
            char_literal185=(Token)input.LT(1);
            match(input,37,FOLLOW_37_in_arrayInitializer1801); if (failed) return retval;
            if ( backtracking==0 ) stream_37.add(char_literal185);

            dbg.location(303,8);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:303:8: ( variableInitializer ( ',' variableInitializer )* ( ',' )? )?
            int alt63=2;
            try { dbg.enterSubRule(63);
            try { dbg.enterDecision(63);

            int LA63_0 = input.LA(1);

            if ( (LA63_0==Identifier||(LA63_0>=FloatingPointLiteral && LA63_0<=DecimalLiteral)||LA63_0==33||LA63_0==37||LA63_0==40||(LA63_0>=55 && LA63_0<=62)||(LA63_0>=64 && LA63_0<=65)||(LA63_0>=68 && LA63_0<=70)||(LA63_0>=104 && LA63_0<=105)||(LA63_0>=108 && LA63_0<=113)) ) {
                alt63=1;
            }
            } finally {dbg.exitDecision(63);}

            switch (alt63) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:303:9: variableInitializer ( ',' variableInitializer )* ( ',' )?
                    {
                    dbg.location(303,9);
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer1804);
                    variableInitializer186=variableInitializer();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_variableInitializer.add(variableInitializer186.getTree());
                    dbg.location(303,29);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:303:29: ( ',' variableInitializer )*
                    try { dbg.enterSubRule(61);

                    loop61:
                    do {
                        int alt61=2;
                        try { dbg.enterDecision(61);

                        int LA61_0 = input.LA(1);

                        if ( (LA61_0==34) ) {
                            int LA61_1 = input.LA(2);

                            if ( (LA61_1==Identifier||(LA61_1>=FloatingPointLiteral && LA61_1<=DecimalLiteral)||LA61_1==33||LA61_1==37||LA61_1==40||(LA61_1>=55 && LA61_1<=62)||(LA61_1>=64 && LA61_1<=65)||(LA61_1>=68 && LA61_1<=70)||(LA61_1>=104 && LA61_1<=105)||(LA61_1>=108 && LA61_1<=113)) ) {
                                alt61=1;
                            }


                        }


                        } finally {dbg.exitDecision(61);}

                        switch (alt61) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:303:30: ',' variableInitializer
                    	    {
                    	    dbg.location(303,30);
                    	    char_literal187=(Token)input.LT(1);
                    	    match(input,34,FOLLOW_34_in_arrayInitializer1807); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_34.add(char_literal187);

                    	    dbg.location(303,34);
                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer1809);
                    	    variableInitializer188=variableInitializer();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_variableInitializer.add(variableInitializer188.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop61;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(61);}

                    dbg.location(303,56);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:303:56: ( ',' )?
                    int alt62=2;
                    try { dbg.enterSubRule(62);
                    try { dbg.enterDecision(62);

                    int LA62_0 = input.LA(1);

                    if ( (LA62_0==34) ) {
                        alt62=1;
                    }
                    } finally {dbg.exitDecision(62);}

                    switch (alt62) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:303:57: ','
                            {
                            dbg.location(303,57);
                            char_literal189=(Token)input.LT(1);
                            match(input,34,FOLLOW_34_in_arrayInitializer1814); if (failed) return retval;
                            if ( backtracking==0 ) stream_34.add(char_literal189);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(62);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(63);}

            dbg.location(303,66);
            char_literal190=(Token)input.LT(1);
            match(input,38,FOLLOW_38_in_arrayInitializer1821); if (failed) return retval;
            if ( backtracking==0 ) stream_38.add(char_literal190);

            dbg.location(303,70);

            // AST REWRITE
            // elements: variableInitializer, variableInitializer, 37, 34, 34, 38
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 303:70: -> '{' ( variableInitializer ( ',' variableInitializer )* ( ',' )? )? '}'
            {
                dbg.location(303,73);
                adaptor.addChild(root_0, stream_37.next());
                dbg.location(303,77);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:303:77: ( variableInitializer ( ',' variableInitializer )* ( ',' )? )?
                if ( stream_variableInitializer.hasNext()||stream_variableInitializer.hasNext()||stream_34.hasNext()||stream_34.hasNext() ) {
                    dbg.location(303,78);
                    adaptor.addChild(root_0, stream_variableInitializer.next());
                    dbg.location(303,98);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:303:98: ( ',' variableInitializer )*
                    while ( stream_variableInitializer.hasNext()||stream_34.hasNext() ) {
                        dbg.location(303,99);
                        adaptor.addChild(root_0, stream_34.next());
                        dbg.location(303,103);
                        adaptor.addChild(root_0, stream_variableInitializer.next());

                    }
                    stream_variableInitializer.reset();
                    stream_34.reset();
                    dbg.location(303,125);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:303:125: ( ',' )?
                    if ( stream_34.hasNext() ) {
                        dbg.location(303,126);
                        adaptor.addChild(root_0, stream_34.next());

                    }
                    stream_34.reset();

                }
                stream_variableInitializer.reset();
                stream_variableInitializer.reset();
                stream_34.reset();
                stream_34.reset();
                dbg.location(303,135);
                adaptor.addChild(root_0, stream_38.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 45, arrayInitializer_StartIndex); }
        }
        dbg.location(304, 2);

        }
        finally {
            dbg.exitRule("arrayInitializer");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end arrayInitializer

    public static class modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start modifier
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:306:1: modifier : ( annotation -> annotation | 'public' -> 'public' | 'protected' -> 'protected' | 'private' -> 'private' | 'static' -> 'static' | 'abstract' -> 'abstract' | 'final' -> 'final' | 'native' -> 'native' | 'synchronized' -> 'synchronized' | 'transient' -> 'transient' | 'volatile' -> 'volatile' | 'strictfp' -> 'strictfp' );
    public final modifier_return modifier() throws RecognitionException {
        modifier_return retval = new modifier_return();
        retval.start = input.LT(1);
        int modifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal192=null;
        Token string_literal193=null;
        Token string_literal194=null;
        Token string_literal195=null;
        Token string_literal196=null;
        Token string_literal197=null;
        Token string_literal198=null;
        Token string_literal199=null;
        Token string_literal200=null;
        Token string_literal201=null;
        Token string_literal202=null;
        annotation_return annotation191 = null;


        Object string_literal192_tree=null;
        Object string_literal193_tree=null;
        Object string_literal194_tree=null;
        Object string_literal195_tree=null;
        Object string_literal196_tree=null;
        Object string_literal197_tree=null;
        Object string_literal198_tree=null;
        Object string_literal199_tree=null;
        Object string_literal200_tree=null;
        Object string_literal201_tree=null;
        Object string_literal202_tree=null;
        RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
        RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
        RewriteRuleTokenStream stream_45=new RewriteRuleTokenStream(adaptor,"token 45");
        RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
        RewriteRuleTokenStream stream_46=new RewriteRuleTokenStream(adaptor,"token 46");
        RewriteRuleTokenStream stream_51=new RewriteRuleTokenStream(adaptor,"token 51");
        RewriteRuleTokenStream stream_52=new RewriteRuleTokenStream(adaptor,"token 52");
        RewriteRuleTokenStream stream_53=new RewriteRuleTokenStream(adaptor,"token 53");
        RewriteRuleTokenStream stream_54=new RewriteRuleTokenStream(adaptor,"token 54");
        RewriteRuleTokenStream stream_27=new RewriteRuleTokenStream(adaptor,"token 27");
        RewriteRuleTokenStream stream_50=new RewriteRuleTokenStream(adaptor,"token 50");
        RewriteRuleSubtreeStream stream_annotation=new RewriteRuleSubtreeStream(adaptor,"rule annotation");
        try { dbg.enterRule("modifier");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(306, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:307:5: ( annotation -> annotation | 'public' -> 'public' | 'protected' -> 'protected' | 'private' -> 'private' | 'static' -> 'static' | 'abstract' -> 'abstract' | 'final' -> 'final' | 'native' -> 'native' | 'synchronized' -> 'synchronized' | 'transient' -> 'transient' | 'volatile' -> 'volatile' | 'strictfp' -> 'strictfp' )
            int alt64=12;
            try { dbg.enterDecision(64);

            switch ( input.LA(1) ) {
            case 71:
                {
                alt64=1;
                }
                break;
            case 45:
                {
                alt64=2;
                }
                break;
            case 46:
                {
                alt64=3;
                }
                break;
            case 47:
                {
                alt64=4;
                }
                break;
            case 27:
                {
                alt64=5;
                }
                break;
            case 48:
                {
                alt64=6;
                }
                break;
            case 49:
                {
                alt64=7;
                }
                break;
            case 50:
                {
                alt64=8;
                }
                break;
            case 51:
                {
                alt64=9;
                }
                break;
            case 52:
                {
                alt64=10;
                }
                break;
            case 53:
                {
                alt64=11;
                }
                break;
            case 54:
                {
                alt64=12;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("306:1: modifier : ( annotation -> annotation | 'public' -> 'public' | 'protected' -> 'protected' | 'private' -> 'private' | 'static' -> 'static' | 'abstract' -> 'abstract' | 'final' -> 'final' | 'native' -> 'native' | 'synchronized' -> 'synchronized' | 'transient' -> 'transient' | 'volatile' -> 'volatile' | 'strictfp' -> 'strictfp' );", 64, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(64);}

            switch (alt64) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:307:9: annotation
                    {
                    dbg.location(307,9);
                    pushFollow(FOLLOW_annotation_in_modifier1861);
                    annotation191=annotation();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_annotation.add(annotation191.getTree());
                    dbg.location(307,20);

                    // AST REWRITE
                    // elements: annotation
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 307:20: -> annotation
                    {
                        dbg.location(307,23);
                        adaptor.addChild(root_0, stream_annotation.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:308:9: 'public'
                    {
                    dbg.location(308,9);
                    string_literal192=(Token)input.LT(1);
                    match(input,45,FOLLOW_45_in_modifier1875); if (failed) return retval;
                    if ( backtracking==0 ) stream_45.add(string_literal192);

                    dbg.location(308,18);

                    // AST REWRITE
                    // elements: 45
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 308:18: -> 'public'
                    {
                        dbg.location(308,21);
                        adaptor.addChild(root_0, stream_45.next());

                    }

                    }

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:309:9: 'protected'
                    {
                    dbg.location(309,9);
                    string_literal193=(Token)input.LT(1);
                    match(input,46,FOLLOW_46_in_modifier1889); if (failed) return retval;
                    if ( backtracking==0 ) stream_46.add(string_literal193);

                    dbg.location(309,21);

                    // AST REWRITE
                    // elements: 46
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 309:21: -> 'protected'
                    {
                        dbg.location(309,24);
                        adaptor.addChild(root_0, stream_46.next());

                    }

                    }

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:310:9: 'private'
                    {
                    dbg.location(310,9);
                    string_literal194=(Token)input.LT(1);
                    match(input,47,FOLLOW_47_in_modifier1903); if (failed) return retval;
                    if ( backtracking==0 ) stream_47.add(string_literal194);

                    dbg.location(310,19);

                    // AST REWRITE
                    // elements: 47
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 310:19: -> 'private'
                    {
                        dbg.location(310,22);
                        adaptor.addChild(root_0, stream_47.next());

                    }

                    }

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:311:9: 'static'
                    {
                    dbg.location(311,9);
                    string_literal195=(Token)input.LT(1);
                    match(input,27,FOLLOW_27_in_modifier1917); if (failed) return retval;
                    if ( backtracking==0 ) stream_27.add(string_literal195);

                    dbg.location(311,18);

                    // AST REWRITE
                    // elements: 27
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 311:18: -> 'static'
                    {
                        dbg.location(311,21);
                        adaptor.addChild(root_0, stream_27.next());

                    }

                    }

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:312:9: 'abstract'
                    {
                    dbg.location(312,9);
                    string_literal196=(Token)input.LT(1);
                    match(input,48,FOLLOW_48_in_modifier1931); if (failed) return retval;
                    if ( backtracking==0 ) stream_48.add(string_literal196);

                    dbg.location(312,20);

                    // AST REWRITE
                    // elements: 48
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 312:20: -> 'abstract'
                    {
                        dbg.location(312,23);
                        adaptor.addChild(root_0, stream_48.next());

                    }

                    }

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:313:9: 'final'
                    {
                    dbg.location(313,9);
                    string_literal197=(Token)input.LT(1);
                    match(input,49,FOLLOW_49_in_modifier1945); if (failed) return retval;
                    if ( backtracking==0 ) stream_49.add(string_literal197);

                    dbg.location(313,17);

                    // AST REWRITE
                    // elements: 49
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 313:17: -> 'final'
                    {
                        dbg.location(313,20);
                        adaptor.addChild(root_0, stream_49.next());

                    }

                    }

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:314:9: 'native'
                    {
                    dbg.location(314,9);
                    string_literal198=(Token)input.LT(1);
                    match(input,50,FOLLOW_50_in_modifier1959); if (failed) return retval;
                    if ( backtracking==0 ) stream_50.add(string_literal198);

                    dbg.location(314,18);

                    // AST REWRITE
                    // elements: 50
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 314:18: -> 'native'
                    {
                        dbg.location(314,21);
                        adaptor.addChild(root_0, stream_50.next());

                    }

                    }

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:315:9: 'synchronized'
                    {
                    dbg.location(315,9);
                    string_literal199=(Token)input.LT(1);
                    match(input,51,FOLLOW_51_in_modifier1973); if (failed) return retval;
                    if ( backtracking==0 ) stream_51.add(string_literal199);

                    dbg.location(315,24);

                    // AST REWRITE
                    // elements: 51
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 315:24: -> 'synchronized'
                    {
                        dbg.location(315,27);
                        adaptor.addChild(root_0, stream_51.next());

                    }

                    }

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:316:9: 'transient'
                    {
                    dbg.location(316,9);
                    string_literal200=(Token)input.LT(1);
                    match(input,52,FOLLOW_52_in_modifier1987); if (failed) return retval;
                    if ( backtracking==0 ) stream_52.add(string_literal200);

                    dbg.location(316,21);

                    // AST REWRITE
                    // elements: 52
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 316:21: -> 'transient'
                    {
                        dbg.location(316,24);
                        adaptor.addChild(root_0, stream_52.next());

                    }

                    }

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:317:9: 'volatile'
                    {
                    dbg.location(317,9);
                    string_literal201=(Token)input.LT(1);
                    match(input,53,FOLLOW_53_in_modifier2001); if (failed) return retval;
                    if ( backtracking==0 ) stream_53.add(string_literal201);

                    dbg.location(317,20);

                    // AST REWRITE
                    // elements: 53
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 317:20: -> 'volatile'
                    {
                        dbg.location(317,23);
                        adaptor.addChild(root_0, stream_53.next());

                    }

                    }

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:318:9: 'strictfp'
                    {
                    dbg.location(318,9);
                    string_literal202=(Token)input.LT(1);
                    match(input,54,FOLLOW_54_in_modifier2015); if (failed) return retval;
                    if ( backtracking==0 ) stream_54.add(string_literal202);

                    dbg.location(318,20);

                    // AST REWRITE
                    // elements: 54
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 318:20: -> 'strictfp'
                    {
                        dbg.location(318,23);
                        adaptor.addChild(root_0, stream_54.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 46, modifier_StartIndex); }
        }
        dbg.location(319, 5);

        }
        finally {
            dbg.exitRule("modifier");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end modifier

    public static class packageOrTypeName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start packageOrTypeName
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:321:1: packageOrTypeName : Identifier ( '.' Identifier )* -> Identifier ( '.' Identifier )* ;
    public final packageOrTypeName_return packageOrTypeName() throws RecognitionException {
        packageOrTypeName_return retval = new packageOrTypeName_return();
        retval.start = input.LT(1);
        int packageOrTypeName_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier203=null;
        Token char_literal204=null;
        Token Identifier205=null;

        Object Identifier203_tree=null;
        Object char_literal204_tree=null;
        Object Identifier205_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_28=new RewriteRuleTokenStream(adaptor,"token 28");

        try { dbg.enterRule("packageOrTypeName");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(321, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:322:2: ( Identifier ( '.' Identifier )* -> Identifier ( '.' Identifier )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:322:4: Identifier ( '.' Identifier )*
            {
            dbg.location(322,4);
            Identifier203=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_packageOrTypeName2033); if (failed) return retval;
            if ( backtracking==0 ) stream_Identifier.add(Identifier203);

            dbg.location(322,15);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:322:15: ( '.' Identifier )*
            try { dbg.enterSubRule(65);

            loop65:
            do {
                int alt65=2;
                try { dbg.enterDecision(65);

                int LA65_0 = input.LA(1);

                if ( (LA65_0==28) ) {
                    int LA65_1 = input.LA(2);

                    if ( (LA65_1==Identifier) ) {
                        int LA65_2 = input.LA(3);

                        if ( (synpred86()) ) {
                            alt65=1;
                        }


                    }


                }


                } finally {dbg.exitDecision(65);}

                switch (alt65) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:322:16: '.' Identifier
            	    {
            	    dbg.location(322,16);
            	    char_literal204=(Token)input.LT(1);
            	    match(input,28,FOLLOW_28_in_packageOrTypeName2036); if (failed) return retval;
            	    if ( backtracking==0 ) stream_28.add(char_literal204);

            	    dbg.location(322,20);
            	    Identifier205=(Token)input.LT(1);
            	    match(input,Identifier,FOLLOW_Identifier_in_packageOrTypeName2038); if (failed) return retval;
            	    if ( backtracking==0 ) stream_Identifier.add(Identifier205);


            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);
            } finally {dbg.exitSubRule(65);}

            dbg.location(322,33);

            // AST REWRITE
            // elements: Identifier, Identifier, 28
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 322:33: -> Identifier ( '.' Identifier )*
            {
                dbg.location(322,36);
                adaptor.addChild(root_0, stream_Identifier.next());
                dbg.location(322,47);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:322:47: ( '.' Identifier )*
                while ( stream_Identifier.hasNext()||stream_28.hasNext() ) {
                    dbg.location(322,48);
                    adaptor.addChild(root_0, stream_28.next());
                    dbg.location(322,52);
                    adaptor.addChild(root_0, stream_Identifier.next());

                }
                stream_Identifier.reset();
                stream_28.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 47, packageOrTypeName_StartIndex); }
        }
        dbg.location(323, 2);

        }
        finally {
            dbg.exitRule("packageOrTypeName");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end packageOrTypeName

    public static class enumConstantName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start enumConstantName
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:325:1: enumConstantName : Identifier -> Identifier ;
    public final enumConstantName_return enumConstantName() throws RecognitionException {
        enumConstantName_return retval = new enumConstantName_return();
        retval.start = input.LT(1);
        int enumConstantName_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier206=null;

        Object Identifier206_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

        try { dbg.enterRule("enumConstantName");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(325, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:326:5: ( Identifier -> Identifier )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:326:9: Identifier
            {
            dbg.location(326,9);
            Identifier206=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_enumConstantName2067); if (failed) return retval;
            if ( backtracking==0 ) stream_Identifier.add(Identifier206);

            dbg.location(326,20);

            // AST REWRITE
            // elements: Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 326:20: -> Identifier
            {
                dbg.location(326,23);
                adaptor.addChild(root_0, stream_Identifier.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 48, enumConstantName_StartIndex); }
        }
        dbg.location(327, 5);

        }
        finally {
            dbg.exitRule("enumConstantName");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end enumConstantName

    public static class typeName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start typeName
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:329:1: typeName : ( Identifier -> Identifier | packageOrTypeName '.' Identifier -> packageOrTypeName '.' Identifier );
    public final typeName_return typeName() throws RecognitionException {
        typeName_return retval = new typeName_return();
        retval.start = input.LT(1);
        int typeName_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier207=null;
        Token char_literal209=null;
        Token Identifier210=null;
        packageOrTypeName_return packageOrTypeName208 = null;


        Object Identifier207_tree=null;
        Object char_literal209_tree=null;
        Object Identifier210_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_28=new RewriteRuleTokenStream(adaptor,"token 28");
        RewriteRuleSubtreeStream stream_packageOrTypeName=new RewriteRuleSubtreeStream(adaptor,"rule packageOrTypeName");
        try { dbg.enterRule("typeName");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(329, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:330:2: ( Identifier -> Identifier | packageOrTypeName '.' Identifier -> packageOrTypeName '.' Identifier )
            int alt66=2;
            try { dbg.enterDecision(66);

            int LA66_0 = input.LA(1);

            if ( (LA66_0==Identifier) ) {
                int LA66_1 = input.LA(2);

                if ( (LA66_1==EOF) ) {
                    alt66=1;
                }
                else if ( (LA66_1==28) ) {
                    alt66=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("329:1: typeName : ( Identifier -> Identifier | packageOrTypeName '.' Identifier -> packageOrTypeName '.' Identifier );", 66, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("329:1: typeName : ( Identifier -> Identifier | packageOrTypeName '.' Identifier -> packageOrTypeName '.' Identifier );", 66, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(66);}

            switch (alt66) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:330:6: Identifier
                    {
                    dbg.location(330,6);
                    Identifier207=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_typeName2087); if (failed) return retval;
                    if ( backtracking==0 ) stream_Identifier.add(Identifier207);

                    dbg.location(330,17);

                    // AST REWRITE
                    // elements: Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 330:17: -> Identifier
                    {
                        dbg.location(330,20);
                        adaptor.addChild(root_0, stream_Identifier.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:331:9: packageOrTypeName '.' Identifier
                    {
                    dbg.location(331,9);
                    pushFollow(FOLLOW_packageOrTypeName_in_typeName2101);
                    packageOrTypeName208=packageOrTypeName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_packageOrTypeName.add(packageOrTypeName208.getTree());
                    dbg.location(331,27);
                    char_literal209=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_typeName2103); if (failed) return retval;
                    if ( backtracking==0 ) stream_28.add(char_literal209);

                    dbg.location(331,31);
                    Identifier210=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_typeName2105); if (failed) return retval;
                    if ( backtracking==0 ) stream_Identifier.add(Identifier210);

                    dbg.location(331,42);

                    // AST REWRITE
                    // elements: packageOrTypeName, 28, Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 331:42: -> packageOrTypeName '.' Identifier
                    {
                        dbg.location(331,45);
                        adaptor.addChild(root_0, stream_packageOrTypeName.next());
                        dbg.location(331,63);
                        adaptor.addChild(root_0, stream_28.next());
                        dbg.location(331,67);
                        adaptor.addChild(root_0, stream_Identifier.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 49, typeName_StartIndex); }
        }
        dbg.location(332, 2);

        }
        finally {
            dbg.exitRule("typeName");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end typeName

    public static class type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start type
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:334:1: type : ( Identifier ( typeArguments )? ( '.' Identifier ( typeArguments )? )* ( '[' ']' )* -> Identifier ( typeArguments )? ( '.' Identifier ( typeArguments )? )* ( '[' ']' )* | primitiveType ( '[' ']' )* -> primitiveType ( '[' ']' )* );
    public final type_return type() throws RecognitionException {
        type_return retval = new type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier211=null;
        Token char_literal213=null;
        Token Identifier214=null;
        Token char_literal216=null;
        Token char_literal217=null;
        Token char_literal219=null;
        Token char_literal220=null;
        typeArguments_return typeArguments212 = null;

        typeArguments_return typeArguments215 = null;

        primitiveType_return primitiveType218 = null;


        Object Identifier211_tree=null;
        Object char_literal213_tree=null;
        Object Identifier214_tree=null;
        Object char_literal216_tree=null;
        Object char_literal217_tree=null;
        Object char_literal219_tree=null;
        Object char_literal220_tree=null;
        RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
        RewriteRuleTokenStream stream_41=new RewriteRuleTokenStream(adaptor,"token 41");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_28=new RewriteRuleTokenStream(adaptor,"token 28");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_typeArguments=new RewriteRuleSubtreeStream(adaptor,"rule typeArguments");
        try { dbg.enterRule("type");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(334, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:335:2: ( Identifier ( typeArguments )? ( '.' Identifier ( typeArguments )? )* ( '[' ']' )* -> Identifier ( typeArguments )? ( '.' Identifier ( typeArguments )? )* ( '[' ']' )* | primitiveType ( '[' ']' )* -> primitiveType ( '[' ']' )* )
            int alt72=2;
            try { dbg.enterDecision(72);

            int LA72_0 = input.LA(1);

            if ( (LA72_0==Identifier) ) {
                alt72=1;
            }
            else if ( ((LA72_0>=55 && LA72_0<=62)) ) {
                alt72=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("334:1: type : ( Identifier ( typeArguments )? ( '.' Identifier ( typeArguments )? )* ( '[' ']' )* -> Identifier ( typeArguments )? ( '.' Identifier ( typeArguments )? )* ( '[' ']' )* | primitiveType ( '[' ']' )* -> primitiveType ( '[' ']' )* );", 72, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(72);}

            switch (alt72) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:335:4: Identifier ( typeArguments )? ( '.' Identifier ( typeArguments )? )* ( '[' ']' )*
                    {
                    dbg.location(335,4);
                    Identifier211=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_type2124); if (failed) return retval;
                    if ( backtracking==0 ) stream_Identifier.add(Identifier211);

                    dbg.location(335,15);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:335:15: ( typeArguments )?
                    int alt67=2;
                    try { dbg.enterSubRule(67);
                    try { dbg.enterDecision(67);

                    int LA67_0 = input.LA(1);

                    if ( (LA67_0==33) ) {
                        int LA67_1 = input.LA(2);

                        if ( (LA67_1==Identifier||(LA67_1>=55 && LA67_1<=63)) ) {
                            alt67=1;
                        }
                    }
                    } finally {dbg.exitDecision(67);}

                    switch (alt67) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:335:16: typeArguments
                            {
                            dbg.location(335,16);
                            pushFollow(FOLLOW_typeArguments_in_type2127);
                            typeArguments212=typeArguments();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_typeArguments.add(typeArguments212.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(67);}

                    dbg.location(335,32);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:335:32: ( '.' Identifier ( typeArguments )? )*
                    try { dbg.enterSubRule(69);

                    loop69:
                    do {
                        int alt69=2;
                        try { dbg.enterDecision(69);

                        int LA69_0 = input.LA(1);

                        if ( (LA69_0==28) ) {
                            alt69=1;
                        }


                        } finally {dbg.exitDecision(69);}

                        switch (alt69) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:335:33: '.' Identifier ( typeArguments )?
                    	    {
                    	    dbg.location(335,33);
                    	    char_literal213=(Token)input.LT(1);
                    	    match(input,28,FOLLOW_28_in_type2132); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_28.add(char_literal213);

                    	    dbg.location(335,37);
                    	    Identifier214=(Token)input.LT(1);
                    	    match(input,Identifier,FOLLOW_Identifier_in_type2134); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_Identifier.add(Identifier214);

                    	    dbg.location(335,48);
                    	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:335:48: ( typeArguments )?
                    	    int alt68=2;
                    	    try { dbg.enterSubRule(68);
                    	    try { dbg.enterDecision(68);

                    	    int LA68_0 = input.LA(1);

                    	    if ( (LA68_0==33) ) {
                    	        int LA68_1 = input.LA(2);

                    	        if ( (LA68_1==Identifier||(LA68_1>=55 && LA68_1<=63)) ) {
                    	            alt68=1;
                    	        }
                    	    }
                    	    } finally {dbg.exitDecision(68);}

                    	    switch (alt68) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:335:49: typeArguments
                    	            {
                    	            dbg.location(335,49);
                    	            pushFollow(FOLLOW_typeArguments_in_type2137);
                    	            typeArguments215=typeArguments();
                    	            _fsp--;
                    	            if (failed) return retval;
                    	            if ( backtracking==0 ) stream_typeArguments.add(typeArguments215.getTree());

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(68);}


                    	    }
                    	    break;

                    	default :
                    	    break loop69;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(69);}

                    dbg.location(335,68);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:335:68: ( '[' ']' )*
                    try { dbg.enterSubRule(70);

                    loop70:
                    do {
                        int alt70=2;
                        try { dbg.enterDecision(70);

                        int LA70_0 = input.LA(1);

                        if ( (LA70_0==41) ) {
                            alt70=1;
                        }


                        } finally {dbg.exitDecision(70);}

                        switch (alt70) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:335:69: '[' ']'
                    	    {
                    	    dbg.location(335,69);
                    	    char_literal216=(Token)input.LT(1);
                    	    match(input,41,FOLLOW_41_in_type2145); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_41.add(char_literal216);

                    	    dbg.location(335,73);
                    	    char_literal217=(Token)input.LT(1);
                    	    match(input,42,FOLLOW_42_in_type2147); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_42.add(char_literal217);


                    	    }
                    	    break;

                    	default :
                    	    break loop70;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(70);}

                    dbg.location(335,79);

                    // AST REWRITE
                    // elements: typeArguments, typeArguments, Identifier, Identifier, 42, 28, 41
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 335:79: -> Identifier ( typeArguments )? ( '.' Identifier ( typeArguments )? )* ( '[' ']' )*
                    {
                        dbg.location(335,82);
                        adaptor.addChild(root_0, stream_Identifier.next());
                        dbg.location(335,93);
                        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:335:93: ( typeArguments )?
                        if ( stream_typeArguments.hasNext() ) {
                            dbg.location(335,94);
                            adaptor.addChild(root_0, stream_typeArguments.next());

                        }
                        stream_typeArguments.reset();
                        dbg.location(335,110);
                        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:335:110: ( '.' Identifier ( typeArguments )? )*
                        while ( stream_Identifier.hasNext()||stream_28.hasNext() ) {
                            dbg.location(335,111);
                            adaptor.addChild(root_0, stream_28.next());
                            dbg.location(335,115);
                            adaptor.addChild(root_0, stream_Identifier.next());
                            dbg.location(335,126);
                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:335:126: ( typeArguments )?
                            if ( stream_typeArguments.hasNext() ) {
                                dbg.location(335,127);
                                adaptor.addChild(root_0, stream_typeArguments.next());

                            }
                            stream_typeArguments.reset();

                        }
                        stream_Identifier.reset();
                        stream_28.reset();
                        dbg.location(335,146);
                        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:335:146: ( '[' ']' )*
                        while ( stream_42.hasNext()||stream_41.hasNext() ) {
                            dbg.location(335,147);
                            adaptor.addChild(root_0, stream_41.next());
                            dbg.location(335,151);
                            adaptor.addChild(root_0, stream_42.next());

                        }
                        stream_42.reset();
                        stream_41.reset();

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:336:4: primitiveType ( '[' ']' )*
                    {
                    dbg.location(336,4);
                    pushFollow(FOLLOW_primitiveType_in_type2183);
                    primitiveType218=primitiveType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_primitiveType.add(primitiveType218.getTree());
                    dbg.location(336,18);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:336:18: ( '[' ']' )*
                    try { dbg.enterSubRule(71);

                    loop71:
                    do {
                        int alt71=2;
                        try { dbg.enterDecision(71);

                        int LA71_0 = input.LA(1);

                        if ( (LA71_0==41) ) {
                            alt71=1;
                        }


                        } finally {dbg.exitDecision(71);}

                        switch (alt71) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:336:19: '[' ']'
                    	    {
                    	    dbg.location(336,19);
                    	    char_literal219=(Token)input.LT(1);
                    	    match(input,41,FOLLOW_41_in_type2186); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_41.add(char_literal219);

                    	    dbg.location(336,23);
                    	    char_literal220=(Token)input.LT(1);
                    	    match(input,42,FOLLOW_42_in_type2188); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_42.add(char_literal220);


                    	    }
                    	    break;

                    	default :
                    	    break loop71;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(71);}

                    dbg.location(336,29);

                    // AST REWRITE
                    // elements: 42, 41, primitiveType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 336:29: -> primitiveType ( '[' ']' )*
                    {
                        dbg.location(336,32);
                        adaptor.addChild(root_0, stream_primitiveType.next());
                        dbg.location(336,46);
                        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:336:46: ( '[' ']' )*
                        while ( stream_42.hasNext()||stream_41.hasNext() ) {
                            dbg.location(336,47);
                            adaptor.addChild(root_0, stream_41.next());
                            dbg.location(336,51);
                            adaptor.addChild(root_0, stream_42.next());

                        }
                        stream_42.reset();
                        stream_41.reset();

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 50, type_StartIndex); }
        }
        dbg.location(337, 2);

        }
        finally {
            dbg.exitRule("type");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end type

    public static class primitiveType_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start primitiveType
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:339:1: primitiveType : ( 'boolean' -> 'boolean' | 'char' -> 'char' | 'byte' -> 'byte' | 'short' -> 'short' | 'int' -> 'int' | 'long' -> 'long' | 'float' -> 'float' | 'double' -> 'double' );
    public final primitiveType_return primitiveType() throws RecognitionException {
        primitiveType_return retval = new primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal221=null;
        Token string_literal222=null;
        Token string_literal223=null;
        Token string_literal224=null;
        Token string_literal225=null;
        Token string_literal226=null;
        Token string_literal227=null;
        Token string_literal228=null;

        Object string_literal221_tree=null;
        Object string_literal222_tree=null;
        Object string_literal223_tree=null;
        Object string_literal224_tree=null;
        Object string_literal225_tree=null;
        Object string_literal226_tree=null;
        Object string_literal227_tree=null;
        Object string_literal228_tree=null;
        RewriteRuleTokenStream stream_59=new RewriteRuleTokenStream(adaptor,"token 59");
        RewriteRuleTokenStream stream_58=new RewriteRuleTokenStream(adaptor,"token 58");
        RewriteRuleTokenStream stream_57=new RewriteRuleTokenStream(adaptor,"token 57");
        RewriteRuleTokenStream stream_56=new RewriteRuleTokenStream(adaptor,"token 56");
        RewriteRuleTokenStream stream_55=new RewriteRuleTokenStream(adaptor,"token 55");
        RewriteRuleTokenStream stream_62=new RewriteRuleTokenStream(adaptor,"token 62");
        RewriteRuleTokenStream stream_60=new RewriteRuleTokenStream(adaptor,"token 60");
        RewriteRuleTokenStream stream_61=new RewriteRuleTokenStream(adaptor,"token 61");

        try { dbg.enterRule("primitiveType");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(339, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:340:5: ( 'boolean' -> 'boolean' | 'char' -> 'char' | 'byte' -> 'byte' | 'short' -> 'short' | 'int' -> 'int' | 'long' -> 'long' | 'float' -> 'float' | 'double' -> 'double' )
            int alt73=8;
            try { dbg.enterDecision(73);

            switch ( input.LA(1) ) {
            case 55:
                {
                alt73=1;
                }
                break;
            case 56:
                {
                alt73=2;
                }
                break;
            case 57:
                {
                alt73=3;
                }
                break;
            case 58:
                {
                alt73=4;
                }
                break;
            case 59:
                {
                alt73=5;
                }
                break;
            case 60:
                {
                alt73=6;
                }
                break;
            case 61:
                {
                alt73=7;
                }
                break;
            case 62:
                {
                alt73=8;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("339:1: primitiveType : ( 'boolean' -> 'boolean' | 'char' -> 'char' | 'byte' -> 'byte' | 'short' -> 'short' | 'int' -> 'int' | 'long' -> 'long' | 'float' -> 'float' | 'double' -> 'double' );", 73, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(73);}

            switch (alt73) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:340:9: 'boolean'
                    {
                    dbg.location(340,9);
                    string_literal221=(Token)input.LT(1);
                    match(input,55,FOLLOW_55_in_primitiveType2217); if (failed) return retval;
                    if ( backtracking==0 ) stream_55.add(string_literal221);

                    dbg.location(340,19);

                    // AST REWRITE
                    // elements: 55
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 340:19: -> 'boolean'
                    {
                        dbg.location(340,22);
                        adaptor.addChild(root_0, stream_55.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:341:7: 'char'
                    {
                    dbg.location(341,7);
                    string_literal222=(Token)input.LT(1);
                    match(input,56,FOLLOW_56_in_primitiveType2229); if (failed) return retval;
                    if ( backtracking==0 ) stream_56.add(string_literal222);

                    dbg.location(341,14);

                    // AST REWRITE
                    // elements: 56
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 341:14: -> 'char'
                    {
                        dbg.location(341,17);
                        adaptor.addChild(root_0, stream_56.next());

                    }

                    }

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:342:7: 'byte'
                    {
                    dbg.location(342,7);
                    string_literal223=(Token)input.LT(1);
                    match(input,57,FOLLOW_57_in_primitiveType2241); if (failed) return retval;
                    if ( backtracking==0 ) stream_57.add(string_literal223);

                    dbg.location(342,14);

                    // AST REWRITE
                    // elements: 57
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 342:14: -> 'byte'
                    {
                        dbg.location(342,17);
                        adaptor.addChild(root_0, stream_57.next());

                    }

                    }

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:343:7: 'short'
                    {
                    dbg.location(343,7);
                    string_literal224=(Token)input.LT(1);
                    match(input,58,FOLLOW_58_in_primitiveType2253); if (failed) return retval;
                    if ( backtracking==0 ) stream_58.add(string_literal224);

                    dbg.location(343,15);

                    // AST REWRITE
                    // elements: 58
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 343:15: -> 'short'
                    {
                        dbg.location(343,18);
                        adaptor.addChild(root_0, stream_58.next());

                    }

                    }

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:344:7: 'int'
                    {
                    dbg.location(344,7);
                    string_literal225=(Token)input.LT(1);
                    match(input,59,FOLLOW_59_in_primitiveType2265); if (failed) return retval;
                    if ( backtracking==0 ) stream_59.add(string_literal225);

                    dbg.location(344,13);

                    // AST REWRITE
                    // elements: 59
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 344:13: -> 'int'
                    {
                        dbg.location(344,16);
                        adaptor.addChild(root_0, stream_59.next());

                    }

                    }

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:345:7: 'long'
                    {
                    dbg.location(345,7);
                    string_literal226=(Token)input.LT(1);
                    match(input,60,FOLLOW_60_in_primitiveType2277); if (failed) return retval;
                    if ( backtracking==0 ) stream_60.add(string_literal226);

                    dbg.location(345,14);

                    // AST REWRITE
                    // elements: 60
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 345:14: -> 'long'
                    {
                        dbg.location(345,17);
                        adaptor.addChild(root_0, stream_60.next());

                    }

                    }

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:346:7: 'float'
                    {
                    dbg.location(346,7);
                    string_literal227=(Token)input.LT(1);
                    match(input,61,FOLLOW_61_in_primitiveType2289); if (failed) return retval;
                    if ( backtracking==0 ) stream_61.add(string_literal227);

                    dbg.location(346,15);

                    // AST REWRITE
                    // elements: 61
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 346:15: -> 'float'
                    {
                        dbg.location(346,18);
                        adaptor.addChild(root_0, stream_61.next());

                    }

                    }

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:347:7: 'double'
                    {
                    dbg.location(347,7);
                    string_literal228=(Token)input.LT(1);
                    match(input,62,FOLLOW_62_in_primitiveType2301); if (failed) return retval;
                    if ( backtracking==0 ) stream_62.add(string_literal228);

                    dbg.location(347,16);

                    // AST REWRITE
                    // elements: 62
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 347:16: -> 'double'
                    {
                        dbg.location(347,19);
                        adaptor.addChild(root_0, stream_62.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 51, primitiveType_StartIndex); }
        }
        dbg.location(348, 5);

        }
        finally {
            dbg.exitRule("primitiveType");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end primitiveType

    public static class variableModifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start variableModifier
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:350:1: variableModifier : ( 'final' -> 'final' | annotation -> annotation );
    public final variableModifier_return variableModifier() throws RecognitionException {
        variableModifier_return retval = new variableModifier_return();
        retval.start = input.LT(1);
        int variableModifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal229=null;
        annotation_return annotation230 = null;


        Object string_literal229_tree=null;
        RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
        RewriteRuleSubtreeStream stream_annotation=new RewriteRuleSubtreeStream(adaptor,"rule annotation");
        try { dbg.enterRule("variableModifier");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(350, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:351:2: ( 'final' -> 'final' | annotation -> annotation )
            int alt74=2;
            try { dbg.enterDecision(74);

            int LA74_0 = input.LA(1);

            if ( (LA74_0==49) ) {
                alt74=1;
            }
            else if ( (LA74_0==71) ) {
                alt74=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("350:1: variableModifier : ( 'final' -> 'final' | annotation -> annotation );", 74, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(74);}

            switch (alt74) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:351:4: 'final'
                    {
                    dbg.location(351,4);
                    string_literal229=(Token)input.LT(1);
                    match(input,49,FOLLOW_49_in_variableModifier2319); if (failed) return retval;
                    if ( backtracking==0 ) stream_49.add(string_literal229);

                    dbg.location(351,12);

                    // AST REWRITE
                    // elements: 49
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 351:12: -> 'final'
                    {
                        dbg.location(351,15);
                        adaptor.addChild(root_0, stream_49.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:352:9: annotation
                    {
                    dbg.location(352,9);
                    pushFollow(FOLLOW_annotation_in_variableModifier2333);
                    annotation230=annotation();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_annotation.add(annotation230.getTree());
                    dbg.location(352,20);

                    // AST REWRITE
                    // elements: annotation
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 352:20: -> annotation
                    {
                        dbg.location(352,23);
                        adaptor.addChild(root_0, stream_annotation.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 52, variableModifier_StartIndex); }
        }
        dbg.location(353, 2);

        }
        finally {
            dbg.exitRule("variableModifier");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end variableModifier

    public static class typeArguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start typeArguments
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:355:1: typeArguments : '<' typeArgument ( ',' typeArgument )* '>' -> '<' typeArgument ( ',' typeArgument )* '>' ;
    public final typeArguments_return typeArguments() throws RecognitionException {
        typeArguments_return retval = new typeArguments_return();
        retval.start = input.LT(1);
        int typeArguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal231=null;
        Token char_literal233=null;
        Token char_literal235=null;
        typeArgument_return typeArgument232 = null;

        typeArgument_return typeArgument234 = null;


        Object char_literal231_tree=null;
        Object char_literal233_tree=null;
        Object char_literal235_tree=null;
        RewriteRuleTokenStream stream_35=new RewriteRuleTokenStream(adaptor,"token 35");
        RewriteRuleTokenStream stream_33=new RewriteRuleTokenStream(adaptor,"token 33");
        RewriteRuleTokenStream stream_34=new RewriteRuleTokenStream(adaptor,"token 34");
        RewriteRuleSubtreeStream stream_typeArgument=new RewriteRuleSubtreeStream(adaptor,"rule typeArgument");
        try { dbg.enterRule("typeArguments");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(355, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:356:2: ( '<' typeArgument ( ',' typeArgument )* '>' -> '<' typeArgument ( ',' typeArgument )* '>' )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:356:4: '<' typeArgument ( ',' typeArgument )* '>'
            {
            dbg.location(356,4);
            char_literal231=(Token)input.LT(1);
            match(input,33,FOLLOW_33_in_typeArguments2348); if (failed) return retval;
            if ( backtracking==0 ) stream_33.add(char_literal231);

            dbg.location(356,8);
            pushFollow(FOLLOW_typeArgument_in_typeArguments2350);
            typeArgument232=typeArgument();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_typeArgument.add(typeArgument232.getTree());
            dbg.location(356,21);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:356:21: ( ',' typeArgument )*
            try { dbg.enterSubRule(75);

            loop75:
            do {
                int alt75=2;
                try { dbg.enterDecision(75);

                int LA75_0 = input.LA(1);

                if ( (LA75_0==34) ) {
                    alt75=1;
                }


                } finally {dbg.exitDecision(75);}

                switch (alt75) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:356:22: ',' typeArgument
            	    {
            	    dbg.location(356,22);
            	    char_literal233=(Token)input.LT(1);
            	    match(input,34,FOLLOW_34_in_typeArguments2353); if (failed) return retval;
            	    if ( backtracking==0 ) stream_34.add(char_literal233);

            	    dbg.location(356,26);
            	    pushFollow(FOLLOW_typeArgument_in_typeArguments2355);
            	    typeArgument234=typeArgument();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_typeArgument.add(typeArgument234.getTree());

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);
            } finally {dbg.exitSubRule(75);}

            dbg.location(356,41);
            char_literal235=(Token)input.LT(1);
            match(input,35,FOLLOW_35_in_typeArguments2359); if (failed) return retval;
            if ( backtracking==0 ) stream_35.add(char_literal235);

            dbg.location(356,45);

            // AST REWRITE
            // elements: 33, typeArgument, 34, 35, typeArgument
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 356:45: -> '<' typeArgument ( ',' typeArgument )* '>'
            {
                dbg.location(356,48);
                adaptor.addChild(root_0, stream_33.next());
                dbg.location(356,52);
                adaptor.addChild(root_0, stream_typeArgument.next());
                dbg.location(356,65);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:356:65: ( ',' typeArgument )*
                while ( stream_typeArgument.hasNext()||stream_34.hasNext() ) {
                    dbg.location(356,66);
                    adaptor.addChild(root_0, stream_34.next());
                    dbg.location(356,70);
                    adaptor.addChild(root_0, stream_typeArgument.next());

                }
                stream_typeArgument.reset();
                stream_34.reset();
                dbg.location(356,85);
                adaptor.addChild(root_0, stream_35.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 53, typeArguments_StartIndex); }
        }
        dbg.location(357, 2);

        }
        finally {
            dbg.exitRule("typeArguments");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end typeArguments

    public static class typeArgument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start typeArgument
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:359:1: typeArgument : ( type -> type | '?' ( ( 'extends' | 'super' ) type )? );
    public final typeArgument_return typeArgument() throws RecognitionException {
        typeArgument_return retval = new typeArgument_return();
        retval.start = input.LT(1);
        int typeArgument_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal237=null;
        Token set238=null;
        type_return type236 = null;

        type_return type239 = null;


        Object char_literal237_tree=null;
        Object set238_tree=null;
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try { dbg.enterRule("typeArgument");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(359, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:360:2: ( type -> type | '?' ( ( 'extends' | 'super' ) type )? )
            int alt77=2;
            try { dbg.enterDecision(77);

            int LA77_0 = input.LA(1);

            if ( (LA77_0==Identifier||(LA77_0>=55 && LA77_0<=62)) ) {
                alt77=1;
            }
            else if ( (LA77_0==63) ) {
                alt77=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("359:1: typeArgument : ( type -> type | '?' ( ( 'extends' | 'super' ) type )? );", 77, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(77);}

            switch (alt77) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:360:4: type
                    {
                    dbg.location(360,4);
                    pushFollow(FOLLOW_type_in_typeArgument2386);
                    type236=type();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_type.add(type236.getTree());
                    dbg.location(360,9);

                    // AST REWRITE
                    // elements: type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 360:9: -> type
                    {
                        dbg.location(360,12);
                        adaptor.addChild(root_0, stream_type.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:361:4: '?' ( ( 'extends' | 'super' ) type )?
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(361,4);
                    char_literal237=(Token)input.LT(1);
                    match(input,63,FOLLOW_63_in_typeArgument2395); if (failed) return retval;
                    if ( backtracking==0 ) {
                    char_literal237_tree = (Object)adaptor.create(char_literal237);
                    adaptor.addChild(root_0, char_literal237_tree);
                    }
                    dbg.location(361,8);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:361:8: ( ( 'extends' | 'super' ) type )?
                    int alt76=2;
                    try { dbg.enterSubRule(76);
                    try { dbg.enterDecision(76);

                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==31||LA76_0==64) ) {
                        alt76=1;
                    }
                    } finally {dbg.exitDecision(76);}

                    switch (alt76) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:361:9: ( 'extends' | 'super' ) type
                            {
                            dbg.location(361,9);
                            set238=(Token)input.LT(1);
                            if ( input.LA(1)==31||input.LA(1)==64 ) {
                                input.consume();
                                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set238));
                                errorRecovery=false;failed=false;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                MismatchedSetException mse =
                                    new MismatchedSetException(null,input);
                                dbg.recognitionException(mse);
                                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_typeArgument2398);    throw mse;
                            }

                            dbg.location(361,31);
                            pushFollow(FOLLOW_type_in_typeArgument2406);
                            type239=type();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, type239.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(76);}


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 54, typeArgument_StartIndex); }
        }
        dbg.location(362, 2);

        }
        finally {
            dbg.exitRule("typeArgument");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end typeArgument

    public static class qualifiedNameList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start qualifiedNameList
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:364:1: qualifiedNameList : qualifiedName ( ',' qualifiedName )* -> qualifiedName ( ',' qualifiedName )* ;
    public final qualifiedNameList_return qualifiedNameList() throws RecognitionException {
        qualifiedNameList_return retval = new qualifiedNameList_return();
        retval.start = input.LT(1);
        int qualifiedNameList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal241=null;
        qualifiedName_return qualifiedName240 = null;

        qualifiedName_return qualifiedName242 = null;


        Object char_literal241_tree=null;
        RewriteRuleTokenStream stream_34=new RewriteRuleTokenStream(adaptor,"token 34");
        RewriteRuleSubtreeStream stream_qualifiedName=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedName");
        try { dbg.enterRule("qualifiedNameList");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(364, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:365:2: ( qualifiedName ( ',' qualifiedName )* -> qualifiedName ( ',' qualifiedName )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:365:4: qualifiedName ( ',' qualifiedName )*
            {
            dbg.location(365,4);
            pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList2421);
            qualifiedName240=qualifiedName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_qualifiedName.add(qualifiedName240.getTree());
            dbg.location(365,18);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:365:18: ( ',' qualifiedName )*
            try { dbg.enterSubRule(78);

            loop78:
            do {
                int alt78=2;
                try { dbg.enterDecision(78);

                int LA78_0 = input.LA(1);

                if ( (LA78_0==34) ) {
                    alt78=1;
                }


                } finally {dbg.exitDecision(78);}

                switch (alt78) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:365:19: ',' qualifiedName
            	    {
            	    dbg.location(365,19);
            	    char_literal241=(Token)input.LT(1);
            	    match(input,34,FOLLOW_34_in_qualifiedNameList2424); if (failed) return retval;
            	    if ( backtracking==0 ) stream_34.add(char_literal241);

            	    dbg.location(365,23);
            	    pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList2426);
            	    qualifiedName242=qualifiedName();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_qualifiedName.add(qualifiedName242.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);
            } finally {dbg.exitSubRule(78);}

            dbg.location(365,39);

            // AST REWRITE
            // elements: qualifiedName, qualifiedName, 34
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 365:39: -> qualifiedName ( ',' qualifiedName )*
            {
                dbg.location(365,42);
                adaptor.addChild(root_0, stream_qualifiedName.next());
                dbg.location(365,56);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:365:56: ( ',' qualifiedName )*
                while ( stream_qualifiedName.hasNext()||stream_34.hasNext() ) {
                    dbg.location(365,57);
                    adaptor.addChild(root_0, stream_34.next());
                    dbg.location(365,61);
                    adaptor.addChild(root_0, stream_qualifiedName.next());

                }
                stream_qualifiedName.reset();
                stream_34.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 55, qualifiedNameList_StartIndex); }
        }
        dbg.location(366, 2);

        }
        finally {
            dbg.exitRule("qualifiedNameList");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end qualifiedNameList

    public static class formalParameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start formalParameters
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:368:1: formalParameters : '(' ( formalParameterDecls )? ')' -> '(' ( formalParameterDecls )? ')' ;
    public final formalParameters_return formalParameters() throws RecognitionException {
        formalParameters_return retval = new formalParameters_return();
        retval.start = input.LT(1);
        int formalParameters_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal243=null;
        Token char_literal245=null;
        formalParameterDecls_return formalParameterDecls244 = null;


        Object char_literal243_tree=null;
        Object char_literal245_tree=null;
        RewriteRuleTokenStream stream_66=new RewriteRuleTokenStream(adaptor,"token 66");
        RewriteRuleTokenStream stream_65=new RewriteRuleTokenStream(adaptor,"token 65");
        RewriteRuleSubtreeStream stream_formalParameterDecls=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterDecls");
        try { dbg.enterRule("formalParameters");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(368, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:369:2: ( '(' ( formalParameterDecls )? ')' -> '(' ( formalParameterDecls )? ')' )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:369:4: '(' ( formalParameterDecls )? ')'
            {
            dbg.location(369,4);
            char_literal243=(Token)input.LT(1);
            match(input,65,FOLLOW_65_in_formalParameters2451); if (failed) return retval;
            if ( backtracking==0 ) stream_65.add(char_literal243);

            dbg.location(369,8);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:369:8: ( formalParameterDecls )?
            int alt79=2;
            try { dbg.enterSubRule(79);
            try { dbg.enterDecision(79);

            int LA79_0 = input.LA(1);

            if ( (LA79_0==Identifier||LA79_0==49||(LA79_0>=55 && LA79_0<=62)||LA79_0==71) ) {
                alt79=1;
            }
            } finally {dbg.exitDecision(79);}

            switch (alt79) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: formalParameterDecls
                    {
                    dbg.location(369,8);
                    pushFollow(FOLLOW_formalParameterDecls_in_formalParameters2453);
                    formalParameterDecls244=formalParameterDecls();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_formalParameterDecls.add(formalParameterDecls244.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(79);}

            dbg.location(369,30);
            char_literal245=(Token)input.LT(1);
            match(input,66,FOLLOW_66_in_formalParameters2456); if (failed) return retval;
            if ( backtracking==0 ) stream_66.add(char_literal245);

            dbg.location(369,34);

            // AST REWRITE
            // elements: formalParameterDecls, 66, 65
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 369:34: -> '(' ( formalParameterDecls )? ')'
            {
                dbg.location(369,37);
                adaptor.addChild(root_0, stream_65.next());
                dbg.location(369,41);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:369:41: ( formalParameterDecls )?
                if ( stream_formalParameterDecls.hasNext() ) {
                    dbg.location(369,41);
                    adaptor.addChild(root_0, stream_formalParameterDecls.next());

                }
                stream_formalParameterDecls.reset();
                dbg.location(369,63);
                adaptor.addChild(root_0, stream_66.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 56, formalParameters_StartIndex); }
        }
        dbg.location(370, 2);

        }
        finally {
            dbg.exitRule("formalParameters");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end formalParameters

    public static class formalParameterDecls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start formalParameterDecls
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:372:1: formalParameterDecls : ( variableModifier )* type ( formalParameterDeclsRest )? -> ( variableModifier )* type ( formalParameterDeclsRest )? ;
    public final formalParameterDecls_return formalParameterDecls() throws RecognitionException {
        formalParameterDecls_return retval = new formalParameterDecls_return();
        retval.start = input.LT(1);
        int formalParameterDecls_StartIndex = input.index();
        Object root_0 = null;

        variableModifier_return variableModifier246 = null;

        type_return type247 = null;

        formalParameterDeclsRest_return formalParameterDeclsRest248 = null;


        RewriteRuleSubtreeStream stream_formalParameterDeclsRest=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterDeclsRest");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_variableModifier=new RewriteRuleSubtreeStream(adaptor,"rule variableModifier");
        try { dbg.enterRule("formalParameterDecls");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(372, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:373:2: ( ( variableModifier )* type ( formalParameterDeclsRest )? -> ( variableModifier )* type ( formalParameterDeclsRest )? )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:373:4: ( variableModifier )* type ( formalParameterDeclsRest )?
            {
            dbg.location(373,4);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:373:4: ( variableModifier )*
            try { dbg.enterSubRule(80);

            loop80:
            do {
                int alt80=2;
                try { dbg.enterDecision(80);

                int LA80_0 = input.LA(1);

                if ( (LA80_0==49||LA80_0==71) ) {
                    alt80=1;
                }


                } finally {dbg.exitDecision(80);}

                switch (alt80) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: variableModifier
            	    {
            	    dbg.location(373,4);
            	    pushFollow(FOLLOW_variableModifier_in_formalParameterDecls2477);
            	    variableModifier246=variableModifier();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_variableModifier.add(variableModifier246.getTree());

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);
            } finally {dbg.exitSubRule(80);}

            dbg.location(373,22);
            pushFollow(FOLLOW_type_in_formalParameterDecls2480);
            type247=type();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_type.add(type247.getTree());
            dbg.location(373,27);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:373:27: ( formalParameterDeclsRest )?
            int alt81=2;
            try { dbg.enterSubRule(81);
            try { dbg.enterDecision(81);

            int LA81_0 = input.LA(1);

            if ( (LA81_0==Identifier||LA81_0==67) ) {
                alt81=1;
            }
            } finally {dbg.exitDecision(81);}

            switch (alt81) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: formalParameterDeclsRest
                    {
                    dbg.location(373,27);
                    pushFollow(FOLLOW_formalParameterDeclsRest_in_formalParameterDecls2482);
                    formalParameterDeclsRest248=formalParameterDeclsRest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_formalParameterDeclsRest.add(formalParameterDeclsRest248.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(81);}

            dbg.location(373,53);

            // AST REWRITE
            // elements: formalParameterDeclsRest, type, variableModifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 373:53: -> ( variableModifier )* type ( formalParameterDeclsRest )?
            {
                dbg.location(373,56);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:373:56: ( variableModifier )*
                while ( stream_variableModifier.hasNext() ) {
                    dbg.location(373,56);
                    adaptor.addChild(root_0, stream_variableModifier.next());

                }
                stream_variableModifier.reset();
                dbg.location(373,74);
                adaptor.addChild(root_0, stream_type.next());
                dbg.location(373,79);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:373:79: ( formalParameterDeclsRest )?
                if ( stream_formalParameterDeclsRest.hasNext() ) {
                    dbg.location(373,79);
                    adaptor.addChild(root_0, stream_formalParameterDeclsRest.next());

                }
                stream_formalParameterDeclsRest.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 57, formalParameterDecls_StartIndex); }
        }
        dbg.location(374, 2);

        }
        finally {
            dbg.exitRule("formalParameterDecls");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end formalParameterDecls

    public static class formalParameterDeclsRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start formalParameterDeclsRest
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:376:1: formalParameterDeclsRest : ( variableDeclaratorId ( ',' formalParameterDecls )? -> variableDeclaratorId ( ',' formalParameterDecls )? | '...' variableDeclaratorId -> '...' variableDeclaratorId );
    public final formalParameterDeclsRest_return formalParameterDeclsRest() throws RecognitionException {
        formalParameterDeclsRest_return retval = new formalParameterDeclsRest_return();
        retval.start = input.LT(1);
        int formalParameterDeclsRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal250=null;
        Token string_literal252=null;
        variableDeclaratorId_return variableDeclaratorId249 = null;

        formalParameterDecls_return formalParameterDecls251 = null;

        variableDeclaratorId_return variableDeclaratorId253 = null;


        Object char_literal250_tree=null;
        Object string_literal252_tree=null;
        RewriteRuleTokenStream stream_67=new RewriteRuleTokenStream(adaptor,"token 67");
        RewriteRuleTokenStream stream_34=new RewriteRuleTokenStream(adaptor,"token 34");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_formalParameterDecls=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterDecls");
        try { dbg.enterRule("formalParameterDeclsRest");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(376, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:377:2: ( variableDeclaratorId ( ',' formalParameterDecls )? -> variableDeclaratorId ( ',' formalParameterDecls )? | '...' variableDeclaratorId -> '...' variableDeclaratorId )
            int alt83=2;
            try { dbg.enterDecision(83);

            int LA83_0 = input.LA(1);

            if ( (LA83_0==Identifier) ) {
                alt83=1;
            }
            else if ( (LA83_0==67) ) {
                alt83=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("376:1: formalParameterDeclsRest : ( variableDeclaratorId ( ',' formalParameterDecls )? -> variableDeclaratorId ( ',' formalParameterDecls )? | '...' variableDeclaratorId -> '...' variableDeclaratorId );", 83, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(83);}

            switch (alt83) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:377:4: variableDeclaratorId ( ',' formalParameterDecls )?
                    {
                    dbg.location(377,4);
                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest2505);
                    variableDeclaratorId249=variableDeclaratorId();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId249.getTree());
                    dbg.location(377,25);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:377:25: ( ',' formalParameterDecls )?
                    int alt82=2;
                    try { dbg.enterSubRule(82);
                    try { dbg.enterDecision(82);

                    int LA82_0 = input.LA(1);

                    if ( (LA82_0==34) ) {
                        alt82=1;
                    }
                    } finally {dbg.exitDecision(82);}

                    switch (alt82) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:377:26: ',' formalParameterDecls
                            {
                            dbg.location(377,26);
                            char_literal250=(Token)input.LT(1);
                            match(input,34,FOLLOW_34_in_formalParameterDeclsRest2508); if (failed) return retval;
                            if ( backtracking==0 ) stream_34.add(char_literal250);

                            dbg.location(377,30);
                            pushFollow(FOLLOW_formalParameterDecls_in_formalParameterDeclsRest2510);
                            formalParameterDecls251=formalParameterDecls();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_formalParameterDecls.add(formalParameterDecls251.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(82);}

                    dbg.location(377,53);

                    // AST REWRITE
                    // elements: 34, formalParameterDecls, variableDeclaratorId
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 377:53: -> variableDeclaratorId ( ',' formalParameterDecls )?
                    {
                        dbg.location(377,56);
                        adaptor.addChild(root_0, stream_variableDeclaratorId.next());
                        dbg.location(377,77);
                        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:377:77: ( ',' formalParameterDecls )?
                        if ( stream_34.hasNext()||stream_formalParameterDecls.hasNext() ) {
                            dbg.location(377,78);
                            adaptor.addChild(root_0, stream_34.next());
                            dbg.location(377,82);
                            adaptor.addChild(root_0, stream_formalParameterDecls.next());

                        }
                        stream_34.reset();
                        stream_formalParameterDecls.reset();

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:378:6: '...' variableDeclaratorId
                    {
                    dbg.location(378,6);
                    string_literal252=(Token)input.LT(1);
                    match(input,67,FOLLOW_67_in_formalParameterDeclsRest2530); if (failed) return retval;
                    if ( backtracking==0 ) stream_67.add(string_literal252);

                    dbg.location(378,12);
                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest2532);
                    variableDeclaratorId253=variableDeclaratorId();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId253.getTree());
                    dbg.location(378,33);

                    // AST REWRITE
                    // elements: 67, variableDeclaratorId
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 378:33: -> '...' variableDeclaratorId
                    {
                        dbg.location(378,36);
                        adaptor.addChild(root_0, stream_67.next());
                        dbg.location(378,42);
                        adaptor.addChild(root_0, stream_variableDeclaratorId.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 58, formalParameterDeclsRest_StartIndex); }
        }
        dbg.location(379, 2);

        }
        finally {
            dbg.exitRule("formalParameterDeclsRest");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end formalParameterDeclsRest

    public static class methodBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start methodBody
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:381:1: methodBody : block -> block ;
    public final methodBody_return methodBody() throws RecognitionException {
        methodBody_return retval = new methodBody_return();
        retval.start = input.LT(1);
        int methodBody_StartIndex = input.index();
        Object root_0 = null;

        block_return block254 = null;


        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try { dbg.enterRule("methodBody");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(381, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:382:2: ( block -> block )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:382:4: block
            {
            dbg.location(382,4);
            pushFollow(FOLLOW_block_in_methodBody2550);
            block254=block();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_block.add(block254.getTree());
            dbg.location(382,10);

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 382:10: -> block
            {
                dbg.location(382,13);
                adaptor.addChild(root_0, stream_block.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 59, methodBody_StartIndex); }
        }
        dbg.location(383, 2);

        }
        finally {
            dbg.exitRule("methodBody");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end methodBody

    public static class qualifiedName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start qualifiedName
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:385:1: qualifiedName : Identifier ( '.' Identifier )* -> Identifier ( '.' Identifier )* ;
    public final qualifiedName_return qualifiedName() throws RecognitionException {
        qualifiedName_return retval = new qualifiedName_return();
        retval.start = input.LT(1);
        int qualifiedName_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier255=null;
        Token char_literal256=null;
        Token Identifier257=null;

        Object Identifier255_tree=null;
        Object char_literal256_tree=null;
        Object Identifier257_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_28=new RewriteRuleTokenStream(adaptor,"token 28");

        try { dbg.enterRule("qualifiedName");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(385, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:386:2: ( Identifier ( '.' Identifier )* -> Identifier ( '.' Identifier )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:386:4: Identifier ( '.' Identifier )*
            {
            dbg.location(386,4);
            Identifier255=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_qualifiedName2565); if (failed) return retval;
            if ( backtracking==0 ) stream_Identifier.add(Identifier255);

            dbg.location(386,15);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:386:15: ( '.' Identifier )*
            try { dbg.enterSubRule(84);

            loop84:
            do {
                int alt84=2;
                try { dbg.enterDecision(84);

                int LA84_0 = input.LA(1);

                if ( (LA84_0==28) ) {
                    alt84=1;
                }


                } finally {dbg.exitDecision(84);}

                switch (alt84) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:386:16: '.' Identifier
            	    {
            	    dbg.location(386,16);
            	    char_literal256=(Token)input.LT(1);
            	    match(input,28,FOLLOW_28_in_qualifiedName2568); if (failed) return retval;
            	    if ( backtracking==0 ) stream_28.add(char_literal256);

            	    dbg.location(386,20);
            	    Identifier257=(Token)input.LT(1);
            	    match(input,Identifier,FOLLOW_Identifier_in_qualifiedName2570); if (failed) return retval;
            	    if ( backtracking==0 ) stream_Identifier.add(Identifier257);


            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);
            } finally {dbg.exitSubRule(84);}

            dbg.location(386,33);

            // AST REWRITE
            // elements: Identifier, 28, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 386:33: -> Identifier ( '.' Identifier )*
            {
                dbg.location(386,36);
                adaptor.addChild(root_0, stream_Identifier.next());
                dbg.location(386,47);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:386:47: ( '.' Identifier )*
                while ( stream_Identifier.hasNext()||stream_28.hasNext() ) {
                    dbg.location(386,48);
                    adaptor.addChild(root_0, stream_28.next());
                    dbg.location(386,52);
                    adaptor.addChild(root_0, stream_Identifier.next());

                }
                stream_Identifier.reset();
                stream_28.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 60, qualifiedName_StartIndex); }
        }
        dbg.location(387, 2);

        }
        finally {
            dbg.exitRule("qualifiedName");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end qualifiedName

    public static class literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start literal
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:389:1: literal : ( integerLiteral -> integerLiteral | FloatingPointLiteral -> FloatingPointLiteral | CharacterLiteral -> CharacterLiteral | StringLiteral -> StringLiteral | booleanLiteral -> booleanLiteral | 'null' -> 'null' );
    public final literal_return literal() throws RecognitionException {
        literal_return retval = new literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        Object root_0 = null;

        Token FloatingPointLiteral259=null;
        Token CharacterLiteral260=null;
        Token StringLiteral261=null;
        Token string_literal263=null;
        integerLiteral_return integerLiteral258 = null;

        booleanLiteral_return booleanLiteral262 = null;


        Object FloatingPointLiteral259_tree=null;
        Object CharacterLiteral260_tree=null;
        Object StringLiteral261_tree=null;
        Object string_literal263_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_68=new RewriteRuleTokenStream(adaptor,"token 68");
        RewriteRuleTokenStream stream_CharacterLiteral=new RewriteRuleTokenStream(adaptor,"token CharacterLiteral");
        RewriteRuleTokenStream stream_FloatingPointLiteral=new RewriteRuleTokenStream(adaptor,"token FloatingPointLiteral");
        RewriteRuleSubtreeStream stream_booleanLiteral=new RewriteRuleSubtreeStream(adaptor,"rule booleanLiteral");
        RewriteRuleSubtreeStream stream_integerLiteral=new RewriteRuleSubtreeStream(adaptor,"rule integerLiteral");
        try { dbg.enterRule("literal");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(389, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:390:2: ( integerLiteral -> integerLiteral | FloatingPointLiteral -> FloatingPointLiteral | CharacterLiteral -> CharacterLiteral | StringLiteral -> StringLiteral | booleanLiteral -> booleanLiteral | 'null' -> 'null' )
            int alt85=6;
            try { dbg.enterDecision(85);

            switch ( input.LA(1) ) {
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
                {
                alt85=1;
                }
                break;
            case FloatingPointLiteral:
                {
                alt85=2;
                }
                break;
            case CharacterLiteral:
                {
                alt85=3;
                }
                break;
            case StringLiteral:
                {
                alt85=4;
                }
                break;
            case 69:
            case 70:
                {
                alt85=5;
                }
                break;
            case 68:
                {
                alt85=6;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("389:1: literal : ( integerLiteral -> integerLiteral | FloatingPointLiteral -> FloatingPointLiteral | CharacterLiteral -> CharacterLiteral | StringLiteral -> StringLiteral | booleanLiteral -> booleanLiteral | 'null' -> 'null' );", 85, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(85);}

            switch (alt85) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:390:6: integerLiteral
                    {
                    dbg.location(390,6);
                    pushFollow(FOLLOW_integerLiteral_in_literal2598);
                    integerLiteral258=integerLiteral();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_integerLiteral.add(integerLiteral258.getTree());
                    dbg.location(390,21);

                    // AST REWRITE
                    // elements: integerLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 390:21: -> integerLiteral
                    {
                        dbg.location(390,24);
                        adaptor.addChild(root_0, stream_integerLiteral.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:391:9: FloatingPointLiteral
                    {
                    dbg.location(391,9);
                    FloatingPointLiteral259=(Token)input.LT(1);
                    match(input,FloatingPointLiteral,FOLLOW_FloatingPointLiteral_in_literal2612); if (failed) return retval;
                    if ( backtracking==0 ) stream_FloatingPointLiteral.add(FloatingPointLiteral259);

                    dbg.location(391,30);

                    // AST REWRITE
                    // elements: FloatingPointLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 391:30: -> FloatingPointLiteral
                    {
                        dbg.location(391,33);
                        adaptor.addChild(root_0, stream_FloatingPointLiteral.next());

                    }

                    }

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:392:9: CharacterLiteral
                    {
                    dbg.location(392,9);
                    CharacterLiteral260=(Token)input.LT(1);
                    match(input,CharacterLiteral,FOLLOW_CharacterLiteral_in_literal2626); if (failed) return retval;
                    if ( backtracking==0 ) stream_CharacterLiteral.add(CharacterLiteral260);

                    dbg.location(392,26);

                    // AST REWRITE
                    // elements: CharacterLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 392:26: -> CharacterLiteral
                    {
                        dbg.location(392,29);
                        adaptor.addChild(root_0, stream_CharacterLiteral.next());

                    }

                    }

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:393:9: StringLiteral
                    {
                    dbg.location(393,9);
                    StringLiteral261=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_literal2640); if (failed) return retval;
                    if ( backtracking==0 ) stream_StringLiteral.add(StringLiteral261);

                    dbg.location(393,23);

                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 393:23: -> StringLiteral
                    {
                        dbg.location(393,26);
                        adaptor.addChild(root_0, stream_StringLiteral.next());

                    }

                    }

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:394:9: booleanLiteral
                    {
                    dbg.location(394,9);
                    pushFollow(FOLLOW_booleanLiteral_in_literal2654);
                    booleanLiteral262=booleanLiteral();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_booleanLiteral.add(booleanLiteral262.getTree());
                    dbg.location(394,24);

                    // AST REWRITE
                    // elements: booleanLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 394:24: -> booleanLiteral
                    {
                        dbg.location(394,27);
                        adaptor.addChild(root_0, stream_booleanLiteral.next());

                    }

                    }

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:395:9: 'null'
                    {
                    dbg.location(395,9);
                    string_literal263=(Token)input.LT(1);
                    match(input,68,FOLLOW_68_in_literal2668); if (failed) return retval;
                    if ( backtracking==0 ) stream_68.add(string_literal263);

                    dbg.location(395,16);

                    // AST REWRITE
                    // elements: 68
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 395:16: -> 'null'
                    {
                        dbg.location(395,19);
                        adaptor.addChild(root_0, stream_68.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 61, literal_StartIndex); }
        }
        dbg.location(396, 2);

        }
        finally {
            dbg.exitRule("literal");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end literal

    public static class integerLiteral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start integerLiteral
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:398:1: integerLiteral : ( HexLiteral -> HexLiteral | OctalLiteral -> OctalLiteral | DecimalLiteral -> DecimalLiteral );
    public final integerLiteral_return integerLiteral() throws RecognitionException {
        integerLiteral_return retval = new integerLiteral_return();
        retval.start = input.LT(1);
        int integerLiteral_StartIndex = input.index();
        Object root_0 = null;

        Token HexLiteral264=null;
        Token OctalLiteral265=null;
        Token DecimalLiteral266=null;

        Object HexLiteral264_tree=null;
        Object OctalLiteral265_tree=null;
        Object DecimalLiteral266_tree=null;
        RewriteRuleTokenStream stream_HexLiteral=new RewriteRuleTokenStream(adaptor,"token HexLiteral");
        RewriteRuleTokenStream stream_DecimalLiteral=new RewriteRuleTokenStream(adaptor,"token DecimalLiteral");
        RewriteRuleTokenStream stream_OctalLiteral=new RewriteRuleTokenStream(adaptor,"token OctalLiteral");

        try { dbg.enterRule("integerLiteral");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(398, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:399:5: ( HexLiteral -> HexLiteral | OctalLiteral -> OctalLiteral | DecimalLiteral -> DecimalLiteral )
            int alt86=3;
            try { dbg.enterDecision(86);

            switch ( input.LA(1) ) {
            case HexLiteral:
                {
                alt86=1;
                }
                break;
            case OctalLiteral:
                {
                alt86=2;
                }
                break;
            case DecimalLiteral:
                {
                alt86=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("398:1: integerLiteral : ( HexLiteral -> HexLiteral | OctalLiteral -> OctalLiteral | DecimalLiteral -> DecimalLiteral );", 86, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(86);}

            switch (alt86) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:399:9: HexLiteral
                    {
                    dbg.location(399,9);
                    HexLiteral264=(Token)input.LT(1);
                    match(input,HexLiteral,FOLLOW_HexLiteral_in_integerLiteral2688); if (failed) return retval;
                    if ( backtracking==0 ) stream_HexLiteral.add(HexLiteral264);

                    dbg.location(399,20);

                    // AST REWRITE
                    // elements: HexLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 399:20: -> HexLiteral
                    {
                        dbg.location(399,23);
                        adaptor.addChild(root_0, stream_HexLiteral.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:400:9: OctalLiteral
                    {
                    dbg.location(400,9);
                    OctalLiteral265=(Token)input.LT(1);
                    match(input,OctalLiteral,FOLLOW_OctalLiteral_in_integerLiteral2702); if (failed) return retval;
                    if ( backtracking==0 ) stream_OctalLiteral.add(OctalLiteral265);

                    dbg.location(400,22);

                    // AST REWRITE
                    // elements: OctalLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 400:22: -> OctalLiteral
                    {
                        dbg.location(400,25);
                        adaptor.addChild(root_0, stream_OctalLiteral.next());

                    }

                    }

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:401:9: DecimalLiteral
                    {
                    dbg.location(401,9);
                    DecimalLiteral266=(Token)input.LT(1);
                    match(input,DecimalLiteral,FOLLOW_DecimalLiteral_in_integerLiteral2716); if (failed) return retval;
                    if ( backtracking==0 ) stream_DecimalLiteral.add(DecimalLiteral266);

                    dbg.location(401,24);

                    // AST REWRITE
                    // elements: DecimalLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 401:24: -> DecimalLiteral
                    {
                        dbg.location(401,27);
                        adaptor.addChild(root_0, stream_DecimalLiteral.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 62, integerLiteral_StartIndex); }
        }
        dbg.location(402, 5);

        }
        finally {
            dbg.exitRule("integerLiteral");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end integerLiteral

    public static class booleanLiteral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start booleanLiteral
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:404:1: booleanLiteral : ( 'true' -> 'true' | 'false' -> 'false' );
    public final booleanLiteral_return booleanLiteral() throws RecognitionException {
        booleanLiteral_return retval = new booleanLiteral_return();
        retval.start = input.LT(1);
        int booleanLiteral_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal267=null;
        Token string_literal268=null;

        Object string_literal267_tree=null;
        Object string_literal268_tree=null;
        RewriteRuleTokenStream stream_69=new RewriteRuleTokenStream(adaptor,"token 69");
        RewriteRuleTokenStream stream_70=new RewriteRuleTokenStream(adaptor,"token 70");

        try { dbg.enterRule("booleanLiteral");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(404, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:405:5: ( 'true' -> 'true' | 'false' -> 'false' )
            int alt87=2;
            try { dbg.enterDecision(87);

            int LA87_0 = input.LA(1);

            if ( (LA87_0==69) ) {
                alt87=1;
            }
            else if ( (LA87_0==70) ) {
                alt87=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("404:1: booleanLiteral : ( 'true' -> 'true' | 'false' -> 'false' );", 87, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(87);}

            switch (alt87) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:405:9: 'true'
                    {
                    dbg.location(405,9);
                    string_literal267=(Token)input.LT(1);
                    match(input,69,FOLLOW_69_in_booleanLiteral2739); if (failed) return retval;
                    if ( backtracking==0 ) stream_69.add(string_literal267);

                    dbg.location(405,16);

                    // AST REWRITE
                    // elements: 69
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 405:16: -> 'true'
                    {
                        dbg.location(405,19);
                        adaptor.addChild(root_0, stream_69.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:406:9: 'false'
                    {
                    dbg.location(406,9);
                    string_literal268=(Token)input.LT(1);
                    match(input,70,FOLLOW_70_in_booleanLiteral2753); if (failed) return retval;
                    if ( backtracking==0 ) stream_70.add(string_literal268);

                    dbg.location(406,17);

                    // AST REWRITE
                    // elements: 70
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 406:17: -> 'false'
                    {
                        dbg.location(406,20);
                        adaptor.addChild(root_0, stream_70.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 63, booleanLiteral_StartIndex); }
        }
        dbg.location(407, 5);

        }
        finally {
            dbg.exitRule("booleanLiteral");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end booleanLiteral

    public static class annotations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start annotations
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:411:1: annotations : ( annotation )+ -> ( annotation )+ ;
    public final annotations_return annotations() throws RecognitionException {
        annotations_return retval = new annotations_return();
        retval.start = input.LT(1);
        int annotations_StartIndex = input.index();
        Object root_0 = null;

        annotation_return annotation269 = null;


        RewriteRuleSubtreeStream stream_annotation=new RewriteRuleSubtreeStream(adaptor,"rule annotation");
        try { dbg.enterRule("annotations");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(411, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:412:2: ( ( annotation )+ -> ( annotation )+ )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:412:4: ( annotation )+
            {
            dbg.location(412,4);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:412:4: ( annotation )+
            int cnt88=0;
            try { dbg.enterSubRule(88);

            loop88:
            do {
                int alt88=2;
                try { dbg.enterDecision(88);

                int LA88_0 = input.LA(1);

                if ( (LA88_0==71) ) {
                    int LA88_3 = input.LA(2);

                    if ( (LA88_3==Identifier) ) {
                        int LA88_22 = input.LA(3);

                        if ( (synpred121()) ) {
                            alt88=1;
                        }


                    }


                }


                } finally {dbg.exitDecision(88);}

                switch (alt88) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: annotation
            	    {
            	    dbg.location(412,4);
            	    pushFollow(FOLLOW_annotation_in_annotations2773);
            	    annotation269=annotation();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_annotation.add(annotation269.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt88 >= 1 ) break loop88;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(88, input);
                        dbg.recognitionException(eee);

                        throw eee;
                }
                cnt88++;
            } while (true);
            } finally {dbg.exitSubRule(88);}

            dbg.location(412,16);

            // AST REWRITE
            // elements: annotation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 412:16: -> ( annotation )+
            {
                dbg.location(412,19);
                if ( !(stream_annotation.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_annotation.hasNext() ) {
                    dbg.location(412,19);
                    adaptor.addChild(root_0, stream_annotation.next());

                }
                stream_annotation.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 64, annotations_StartIndex); }
        }
        dbg.location(413, 2);

        }
        finally {
            dbg.exitRule("annotations");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end annotations

    public static class annotation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start annotation
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:415:1: annotation : '@' annotationName ( '(' ( elementValuePairs )? ')' )? -> '@' annotationName ( '(' ( elementValuePairs )? ')' )? ;
    public final annotation_return annotation() throws RecognitionException {
        annotation_return retval = new annotation_return();
        retval.start = input.LT(1);
        int annotation_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal270=null;
        Token char_literal272=null;
        Token char_literal274=null;
        annotationName_return annotationName271 = null;

        elementValuePairs_return elementValuePairs273 = null;


        Object char_literal270_tree=null;
        Object char_literal272_tree=null;
        Object char_literal274_tree=null;
        RewriteRuleTokenStream stream_66=new RewriteRuleTokenStream(adaptor,"token 66");
        RewriteRuleTokenStream stream_65=new RewriteRuleTokenStream(adaptor,"token 65");
        RewriteRuleTokenStream stream_71=new RewriteRuleTokenStream(adaptor,"token 71");
        RewriteRuleSubtreeStream stream_annotationName=new RewriteRuleSubtreeStream(adaptor,"rule annotationName");
        RewriteRuleSubtreeStream stream_elementValuePairs=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairs");
        try { dbg.enterRule("annotation");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(415, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:416:2: ( '@' annotationName ( '(' ( elementValuePairs )? ')' )? -> '@' annotationName ( '(' ( elementValuePairs )? ')' )? )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:416:4: '@' annotationName ( '(' ( elementValuePairs )? ')' )?
            {
            dbg.location(416,4);
            char_literal270=(Token)input.LT(1);
            match(input,71,FOLLOW_71_in_annotation2790); if (failed) return retval;
            if ( backtracking==0 ) stream_71.add(char_literal270);

            dbg.location(416,8);
            pushFollow(FOLLOW_annotationName_in_annotation2792);
            annotationName271=annotationName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_annotationName.add(annotationName271.getTree());
            dbg.location(416,23);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:416:23: ( '(' ( elementValuePairs )? ')' )?
            int alt90=2;
            try { dbg.enterSubRule(90);
            try { dbg.enterDecision(90);

            int LA90_0 = input.LA(1);

            if ( (LA90_0==65) ) {
                alt90=1;
            }
            } finally {dbg.exitDecision(90);}

            switch (alt90) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:416:24: '(' ( elementValuePairs )? ')'
                    {
                    dbg.location(416,24);
                    char_literal272=(Token)input.LT(1);
                    match(input,65,FOLLOW_65_in_annotation2795); if (failed) return retval;
                    if ( backtracking==0 ) stream_65.add(char_literal272);

                    dbg.location(416,28);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:416:28: ( elementValuePairs )?
                    int alt89=2;
                    try { dbg.enterSubRule(89);
                    try { dbg.enterDecision(89);

                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==Identifier||(LA89_0>=FloatingPointLiteral && LA89_0<=DecimalLiteral)||LA89_0==33||LA89_0==37||LA89_0==40||(LA89_0>=55 && LA89_0<=62)||(LA89_0>=64 && LA89_0<=65)||(LA89_0>=68 && LA89_0<=71)||(LA89_0>=104 && LA89_0<=105)||(LA89_0>=108 && LA89_0<=113)) ) {
                        alt89=1;
                    }
                    } finally {dbg.exitDecision(89);}

                    switch (alt89) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: elementValuePairs
                            {
                            dbg.location(416,28);
                            pushFollow(FOLLOW_elementValuePairs_in_annotation2797);
                            elementValuePairs273=elementValuePairs();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_elementValuePairs.add(elementValuePairs273.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(89);}

                    dbg.location(416,47);
                    char_literal274=(Token)input.LT(1);
                    match(input,66,FOLLOW_66_in_annotation2800); if (failed) return retval;
                    if ( backtracking==0 ) stream_66.add(char_literal274);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(90);}

            dbg.location(416,53);

            // AST REWRITE
            // elements: annotationName, 65, 66, elementValuePairs, 71
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 416:53: -> '@' annotationName ( '(' ( elementValuePairs )? ')' )?
            {
                dbg.location(416,56);
                adaptor.addChild(root_0, stream_71.next());
                dbg.location(416,60);
                adaptor.addChild(root_0, stream_annotationName.next());
                dbg.location(416,75);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:416:75: ( '(' ( elementValuePairs )? ')' )?
                if ( stream_65.hasNext()||stream_66.hasNext()||stream_elementValuePairs.hasNext() ) {
                    dbg.location(416,76);
                    adaptor.addChild(root_0, stream_65.next());
                    dbg.location(416,80);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:416:80: ( elementValuePairs )?
                    if ( stream_elementValuePairs.hasNext() ) {
                        dbg.location(416,80);
                        adaptor.addChild(root_0, stream_elementValuePairs.next());

                    }
                    stream_elementValuePairs.reset();
                    dbg.location(416,99);
                    adaptor.addChild(root_0, stream_66.next());

                }
                stream_65.reset();
                stream_66.reset();
                stream_elementValuePairs.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 65, annotation_StartIndex); }
        }
        dbg.location(417, 2);

        }
        finally {
            dbg.exitRule("annotation");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end annotation

    public static class annotationName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start annotationName
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:419:1: annotationName : Identifier ( '.' Identifier )* -> Identifier ( '.' Identifier )* ;
    public final annotationName_return annotationName() throws RecognitionException {
        annotationName_return retval = new annotationName_return();
        retval.start = input.LT(1);
        int annotationName_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier275=null;
        Token char_literal276=null;
        Token Identifier277=null;

        Object Identifier275_tree=null;
        Object char_literal276_tree=null;
        Object Identifier277_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_28=new RewriteRuleTokenStream(adaptor,"token 28");

        try { dbg.enterRule("annotationName");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(419, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:420:2: ( Identifier ( '.' Identifier )* -> Identifier ( '.' Identifier )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:420:4: Identifier ( '.' Identifier )*
            {
            dbg.location(420,4);
            Identifier275=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_annotationName2830); if (failed) return retval;
            if ( backtracking==0 ) stream_Identifier.add(Identifier275);

            dbg.location(420,15);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:420:15: ( '.' Identifier )*
            try { dbg.enterSubRule(91);

            loop91:
            do {
                int alt91=2;
                try { dbg.enterDecision(91);

                int LA91_0 = input.LA(1);

                if ( (LA91_0==28) ) {
                    alt91=1;
                }


                } finally {dbg.exitDecision(91);}

                switch (alt91) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:420:16: '.' Identifier
            	    {
            	    dbg.location(420,16);
            	    char_literal276=(Token)input.LT(1);
            	    match(input,28,FOLLOW_28_in_annotationName2833); if (failed) return retval;
            	    if ( backtracking==0 ) stream_28.add(char_literal276);

            	    dbg.location(420,20);
            	    Identifier277=(Token)input.LT(1);
            	    match(input,Identifier,FOLLOW_Identifier_in_annotationName2835); if (failed) return retval;
            	    if ( backtracking==0 ) stream_Identifier.add(Identifier277);


            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);
            } finally {dbg.exitSubRule(91);}

            dbg.location(420,33);

            // AST REWRITE
            // elements: 28, Identifier, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 420:33: -> Identifier ( '.' Identifier )*
            {
                dbg.location(420,36);
                adaptor.addChild(root_0, stream_Identifier.next());
                dbg.location(420,47);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:420:47: ( '.' Identifier )*
                while ( stream_28.hasNext()||stream_Identifier.hasNext() ) {
                    dbg.location(420,48);
                    adaptor.addChild(root_0, stream_28.next());
                    dbg.location(420,52);
                    adaptor.addChild(root_0, stream_Identifier.next());

                }
                stream_28.reset();
                stream_Identifier.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 66, annotationName_StartIndex); }
        }
        dbg.location(421, 2);

        }
        finally {
            dbg.exitRule("annotationName");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end annotationName

    public static class elementValuePairs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start elementValuePairs
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:423:1: elementValuePairs : elementValuePair ( ',' elementValuePair )* -> elementValuePair ( ',' elementValuePair )* ;
    public final elementValuePairs_return elementValuePairs() throws RecognitionException {
        elementValuePairs_return retval = new elementValuePairs_return();
        retval.start = input.LT(1);
        int elementValuePairs_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal279=null;
        elementValuePair_return elementValuePair278 = null;

        elementValuePair_return elementValuePair280 = null;


        Object char_literal279_tree=null;
        RewriteRuleTokenStream stream_34=new RewriteRuleTokenStream(adaptor,"token 34");
        RewriteRuleSubtreeStream stream_elementValuePair=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePair");
        try { dbg.enterRule("elementValuePairs");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(423, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:424:2: ( elementValuePair ( ',' elementValuePair )* -> elementValuePair ( ',' elementValuePair )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:424:4: elementValuePair ( ',' elementValuePair )*
            {
            dbg.location(424,4);
            pushFollow(FOLLOW_elementValuePair_in_elementValuePairs2860);
            elementValuePair278=elementValuePair();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_elementValuePair.add(elementValuePair278.getTree());
            dbg.location(424,21);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:424:21: ( ',' elementValuePair )*
            try { dbg.enterSubRule(92);

            loop92:
            do {
                int alt92=2;
                try { dbg.enterDecision(92);

                int LA92_0 = input.LA(1);

                if ( (LA92_0==34) ) {
                    alt92=1;
                }


                } finally {dbg.exitDecision(92);}

                switch (alt92) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:424:22: ',' elementValuePair
            	    {
            	    dbg.location(424,22);
            	    char_literal279=(Token)input.LT(1);
            	    match(input,34,FOLLOW_34_in_elementValuePairs2863); if (failed) return retval;
            	    if ( backtracking==0 ) stream_34.add(char_literal279);

            	    dbg.location(424,26);
            	    pushFollow(FOLLOW_elementValuePair_in_elementValuePairs2865);
            	    elementValuePair280=elementValuePair();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_elementValuePair.add(elementValuePair280.getTree());

            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);
            } finally {dbg.exitSubRule(92);}

            dbg.location(424,45);

            // AST REWRITE
            // elements: elementValuePair, 34, elementValuePair
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 424:45: -> elementValuePair ( ',' elementValuePair )*
            {
                dbg.location(424,48);
                adaptor.addChild(root_0, stream_elementValuePair.next());
                dbg.location(424,65);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:424:65: ( ',' elementValuePair )*
                while ( stream_elementValuePair.hasNext()||stream_34.hasNext() ) {
                    dbg.location(424,66);
                    adaptor.addChild(root_0, stream_34.next());
                    dbg.location(424,70);
                    adaptor.addChild(root_0, stream_elementValuePair.next());

                }
                stream_elementValuePair.reset();
                stream_34.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 67, elementValuePairs_StartIndex); }
        }
        dbg.location(425, 2);

        }
        finally {
            dbg.exitRule("elementValuePairs");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end elementValuePairs

    public static class elementValuePair_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start elementValuePair
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:427:1: elementValuePair : ( Identifier '=' )? elementValue -> ( Identifier '=' )? elementValue ;
    public final elementValuePair_return elementValuePair() throws RecognitionException {
        elementValuePair_return retval = new elementValuePair_return();
        retval.start = input.LT(1);
        int elementValuePair_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier281=null;
        Token char_literal282=null;
        elementValue_return elementValue283 = null;


        Object Identifier281_tree=null;
        Object char_literal282_tree=null;
        RewriteRuleTokenStream stream_44=new RewriteRuleTokenStream(adaptor,"token 44");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_elementValue=new RewriteRuleSubtreeStream(adaptor,"rule elementValue");
        try { dbg.enterRule("elementValuePair");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(427, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:428:2: ( ( Identifier '=' )? elementValue -> ( Identifier '=' )? elementValue )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:428:4: ( Identifier '=' )? elementValue
            {
            dbg.location(428,4);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:428:4: ( Identifier '=' )?
            int alt93=2;
            try { dbg.enterSubRule(93);
            try { dbg.enterDecision(93);

            int LA93_0 = input.LA(1);

            if ( (LA93_0==Identifier) ) {
                int LA93_1 = input.LA(2);

                if ( (LA93_1==44) ) {
                    alt93=1;
                }
            }
            } finally {dbg.exitDecision(93);}

            switch (alt93) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:428:5: Identifier '='
                    {
                    dbg.location(428,5);
                    Identifier281=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_elementValuePair2891); if (failed) return retval;
                    if ( backtracking==0 ) stream_Identifier.add(Identifier281);

                    dbg.location(428,16);
                    char_literal282=(Token)input.LT(1);
                    match(input,44,FOLLOW_44_in_elementValuePair2893); if (failed) return retval;
                    if ( backtracking==0 ) stream_44.add(char_literal282);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(93);}

            dbg.location(428,22);
            pushFollow(FOLLOW_elementValue_in_elementValuePair2897);
            elementValue283=elementValue();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_elementValue.add(elementValue283.getTree());
            dbg.location(428,35);

            // AST REWRITE
            // elements: Identifier, elementValue, 44
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 428:35: -> ( Identifier '=' )? elementValue
            {
                dbg.location(428,38);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:428:38: ( Identifier '=' )?
                if ( stream_Identifier.hasNext()||stream_44.hasNext() ) {
                    dbg.location(428,39);
                    adaptor.addChild(root_0, stream_Identifier.next());
                    dbg.location(428,50);
                    adaptor.addChild(root_0, stream_44.next());

                }
                stream_Identifier.reset();
                stream_44.reset();
                dbg.location(428,56);
                adaptor.addChild(root_0, stream_elementValue.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 68, elementValuePair_StartIndex); }
        }
        dbg.location(429, 2);

        }
        finally {
            dbg.exitRule("elementValuePair");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end elementValuePair

    public static class elementValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start elementValue
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:431:1: elementValue : ( conditionalExpression -> conditionalExpression | annotation -> annotation | elementValueArrayInitializer -> elementValueArrayInitializer );
    public final elementValue_return elementValue() throws RecognitionException {
        elementValue_return retval = new elementValue_return();
        retval.start = input.LT(1);
        int elementValue_StartIndex = input.index();
        Object root_0 = null;

        conditionalExpression_return conditionalExpression284 = null;

        annotation_return annotation285 = null;

        elementValueArrayInitializer_return elementValueArrayInitializer286 = null;


        RewriteRuleSubtreeStream stream_elementValueArrayInitializer=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayInitializer");
        RewriteRuleSubtreeStream stream_annotation=new RewriteRuleSubtreeStream(adaptor,"rule annotation");
        RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
        try { dbg.enterRule("elementValue");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(431, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:432:2: ( conditionalExpression -> conditionalExpression | annotation -> annotation | elementValueArrayInitializer -> elementValueArrayInitializer )
            int alt94=3;
            try { dbg.enterDecision(94);

            switch ( input.LA(1) ) {
            case Identifier:
            case FloatingPointLiteral:
            case CharacterLiteral:
            case StringLiteral:
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
            case 33:
            case 40:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 64:
            case 65:
            case 68:
            case 69:
            case 70:
            case 104:
            case 105:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
                {
                alt94=1;
                }
                break;
            case 71:
                {
                alt94=2;
                }
                break;
            case 37:
                {
                alt94=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("431:1: elementValue : ( conditionalExpression -> conditionalExpression | annotation -> annotation | elementValueArrayInitializer -> elementValueArrayInitializer );", 94, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(94);}

            switch (alt94) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:432:4: conditionalExpression
                    {
                    dbg.location(432,4);
                    pushFollow(FOLLOW_conditionalExpression_in_elementValue2920);
                    conditionalExpression284=conditionalExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_conditionalExpression.add(conditionalExpression284.getTree());
                    dbg.location(432,26);

                    // AST REWRITE
                    // elements: conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 432:26: -> conditionalExpression
                    {
                        dbg.location(432,29);
                        adaptor.addChild(root_0, stream_conditionalExpression.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:433:6: annotation
                    {
                    dbg.location(433,6);
                    pushFollow(FOLLOW_annotation_in_elementValue2931);
                    annotation285=annotation();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_annotation.add(annotation285.getTree());
                    dbg.location(433,17);

                    // AST REWRITE
                    // elements: annotation
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 433:17: -> annotation
                    {
                        dbg.location(433,20);
                        adaptor.addChild(root_0, stream_annotation.next());

                    }

                    }

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:434:6: elementValueArrayInitializer
                    {
                    dbg.location(434,6);
                    pushFollow(FOLLOW_elementValueArrayInitializer_in_elementValue2942);
                    elementValueArrayInitializer286=elementValueArrayInitializer();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_elementValueArrayInitializer.add(elementValueArrayInitializer286.getTree());
                    dbg.location(434,35);

                    // AST REWRITE
                    // elements: elementValueArrayInitializer
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 434:35: -> elementValueArrayInitializer
                    {
                        dbg.location(434,38);
                        adaptor.addChild(root_0, stream_elementValueArrayInitializer.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 69, elementValue_StartIndex); }
        }
        dbg.location(435, 2);

        }
        finally {
            dbg.exitRule("elementValue");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end elementValue

    public static class elementValueArrayInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start elementValueArrayInitializer
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:437:1: elementValueArrayInitializer : '{' ( elementValue ( ',' elementValue )* )? '}' -> '{' ( elementValue ( ',' elementValue )* )? '}' ;
    public final elementValueArrayInitializer_return elementValueArrayInitializer() throws RecognitionException {
        elementValueArrayInitializer_return retval = new elementValueArrayInitializer_return();
        retval.start = input.LT(1);
        int elementValueArrayInitializer_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal287=null;
        Token char_literal289=null;
        Token char_literal291=null;
        elementValue_return elementValue288 = null;

        elementValue_return elementValue290 = null;


        Object char_literal287_tree=null;
        Object char_literal289_tree=null;
        Object char_literal291_tree=null;
        RewriteRuleTokenStream stream_34=new RewriteRuleTokenStream(adaptor,"token 34");
        RewriteRuleTokenStream stream_37=new RewriteRuleTokenStream(adaptor,"token 37");
        RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");
        RewriteRuleSubtreeStream stream_elementValue=new RewriteRuleSubtreeStream(adaptor,"rule elementValue");
        try { dbg.enterRule("elementValueArrayInitializer");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(437, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:438:2: ( '{' ( elementValue ( ',' elementValue )* )? '}' -> '{' ( elementValue ( ',' elementValue )* )? '}' )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:438:4: '{' ( elementValue ( ',' elementValue )* )? '}'
            {
            dbg.location(438,4);
            char_literal287=(Token)input.LT(1);
            match(input,37,FOLLOW_37_in_elementValueArrayInitializer2958); if (failed) return retval;
            if ( backtracking==0 ) stream_37.add(char_literal287);

            dbg.location(438,8);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:438:8: ( elementValue ( ',' elementValue )* )?
            int alt96=2;
            try { dbg.enterSubRule(96);
            try { dbg.enterDecision(96);

            int LA96_0 = input.LA(1);

            if ( (LA96_0==Identifier||(LA96_0>=FloatingPointLiteral && LA96_0<=DecimalLiteral)||LA96_0==33||LA96_0==37||LA96_0==40||(LA96_0>=55 && LA96_0<=62)||(LA96_0>=64 && LA96_0<=65)||(LA96_0>=68 && LA96_0<=71)||(LA96_0>=104 && LA96_0<=105)||(LA96_0>=108 && LA96_0<=113)) ) {
                alt96=1;
            }
            } finally {dbg.exitDecision(96);}

            switch (alt96) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:438:9: elementValue ( ',' elementValue )*
                    {
                    dbg.location(438,9);
                    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer2961);
                    elementValue288=elementValue();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_elementValue.add(elementValue288.getTree());
                    dbg.location(438,22);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:438:22: ( ',' elementValue )*
                    try { dbg.enterSubRule(95);

                    loop95:
                    do {
                        int alt95=2;
                        try { dbg.enterDecision(95);

                        int LA95_0 = input.LA(1);

                        if ( (LA95_0==34) ) {
                            alt95=1;
                        }


                        } finally {dbg.exitDecision(95);}

                        switch (alt95) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:438:23: ',' elementValue
                    	    {
                    	    dbg.location(438,23);
                    	    char_literal289=(Token)input.LT(1);
                    	    match(input,34,FOLLOW_34_in_elementValueArrayInitializer2964); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_34.add(char_literal289);

                    	    dbg.location(438,27);
                    	    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer2966);
                    	    elementValue290=elementValue();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_elementValue.add(elementValue290.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop95;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(95);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(96);}

            dbg.location(438,45);
            char_literal291=(Token)input.LT(1);
            match(input,38,FOLLOW_38_in_elementValueArrayInitializer2973); if (failed) return retval;
            if ( backtracking==0 ) stream_38.add(char_literal291);

            dbg.location(438,49);

            // AST REWRITE
            // elements: elementValue, 37, 34, 38, elementValue
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 438:49: -> '{' ( elementValue ( ',' elementValue )* )? '}'
            {
                dbg.location(438,52);
                adaptor.addChild(root_0, stream_37.next());
                dbg.location(438,56);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:438:56: ( elementValue ( ',' elementValue )* )?
                if ( stream_elementValue.hasNext()||stream_34.hasNext()||stream_elementValue.hasNext() ) {
                    dbg.location(438,57);
                    adaptor.addChild(root_0, stream_elementValue.next());
                    dbg.location(438,70);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:438:70: ( ',' elementValue )*
                    while ( stream_34.hasNext()||stream_elementValue.hasNext() ) {
                        dbg.location(438,71);
                        adaptor.addChild(root_0, stream_34.next());
                        dbg.location(438,75);
                        adaptor.addChild(root_0, stream_elementValue.next());

                    }
                    stream_34.reset();
                    stream_elementValue.reset();

                }
                stream_elementValue.reset();
                stream_34.reset();
                stream_elementValue.reset();
                dbg.location(438,93);
                adaptor.addChild(root_0, stream_38.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 70, elementValueArrayInitializer_StartIndex); }
        }
        dbg.location(439, 2);

        }
        finally {
            dbg.exitRule("elementValueArrayInitializer");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end elementValueArrayInitializer

    public static class annotationTypeDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start annotationTypeDeclaration
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:441:1: annotationTypeDeclaration : '@' 'interface' Identifier annotationTypeBody -> '@' 'interface' Identifier annotationTypeBody ;
    public final annotationTypeDeclaration_return annotationTypeDeclaration() throws RecognitionException {
        annotationTypeDeclaration_return retval = new annotationTypeDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal292=null;
        Token string_literal293=null;
        Token Identifier294=null;
        annotationTypeBody_return annotationTypeBody295 = null;


        Object char_literal292_tree=null;
        Object string_literal293_tree=null;
        Object Identifier294_tree=null;
        RewriteRuleTokenStream stream_71=new RewriteRuleTokenStream(adaptor,"token 71");
        RewriteRuleTokenStream stream_39=new RewriteRuleTokenStream(adaptor,"token 39");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_annotationTypeBody=new RewriteRuleSubtreeStream(adaptor,"rule annotationTypeBody");
        try { dbg.enterRule("annotationTypeDeclaration");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(441, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:442:2: ( '@' 'interface' Identifier annotationTypeBody -> '@' 'interface' Identifier annotationTypeBody )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:442:4: '@' 'interface' Identifier annotationTypeBody
            {
            dbg.location(442,4);
            char_literal292=(Token)input.LT(1);
            match(input,71,FOLLOW_71_in_annotationTypeDeclaration3004); if (failed) return retval;
            if ( backtracking==0 ) stream_71.add(char_literal292);

            dbg.location(442,8);
            string_literal293=(Token)input.LT(1);
            match(input,39,FOLLOW_39_in_annotationTypeDeclaration3006); if (failed) return retval;
            if ( backtracking==0 ) stream_39.add(string_literal293);

            dbg.location(442,20);
            Identifier294=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_annotationTypeDeclaration3008); if (failed) return retval;
            if ( backtracking==0 ) stream_Identifier.add(Identifier294);

            dbg.location(442,31);
            pushFollow(FOLLOW_annotationTypeBody_in_annotationTypeDeclaration3010);
            annotationTypeBody295=annotationTypeBody();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_annotationTypeBody.add(annotationTypeBody295.getTree());
            dbg.location(442,50);

            // AST REWRITE
            // elements: Identifier, annotationTypeBody, 71, 39
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 442:50: -> '@' 'interface' Identifier annotationTypeBody
            {
                dbg.location(442,53);
                adaptor.addChild(root_0, stream_71.next());
                dbg.location(442,57);
                adaptor.addChild(root_0, stream_39.next());
                dbg.location(442,69);
                adaptor.addChild(root_0, stream_Identifier.next());
                dbg.location(442,80);
                adaptor.addChild(root_0, stream_annotationTypeBody.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 71, annotationTypeDeclaration_StartIndex); }
        }
        dbg.location(443, 2);

        }
        finally {
            dbg.exitRule("annotationTypeDeclaration");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end annotationTypeDeclaration

    public static class annotationTypeBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start annotationTypeBody
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:445:1: annotationTypeBody : '{' ( annotationTypeElementDeclarations )? '}' -> '{' ( annotationTypeElementDeclarations )? '}' ;
    public final annotationTypeBody_return annotationTypeBody() throws RecognitionException {
        annotationTypeBody_return retval = new annotationTypeBody_return();
        retval.start = input.LT(1);
        int annotationTypeBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal296=null;
        Token char_literal298=null;
        annotationTypeElementDeclarations_return annotationTypeElementDeclarations297 = null;


        Object char_literal296_tree=null;
        Object char_literal298_tree=null;
        RewriteRuleTokenStream stream_37=new RewriteRuleTokenStream(adaptor,"token 37");
        RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");
        RewriteRuleSubtreeStream stream_annotationTypeElementDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule annotationTypeElementDeclarations");
        try { dbg.enterRule("annotationTypeBody");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(445, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:446:2: ( '{' ( annotationTypeElementDeclarations )? '}' -> '{' ( annotationTypeElementDeclarations )? '}' )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:446:4: '{' ( annotationTypeElementDeclarations )? '}'
            {
            dbg.location(446,4);
            char_literal296=(Token)input.LT(1);
            match(input,37,FOLLOW_37_in_annotationTypeBody3032); if (failed) return retval;
            if ( backtracking==0 ) stream_37.add(char_literal296);

            dbg.location(446,8);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:446:8: ( annotationTypeElementDeclarations )?
            int alt97=2;
            try { dbg.enterSubRule(97);
            try { dbg.enterDecision(97);

            int LA97_0 = input.LA(1);

            if ( ((LA97_0>=Identifier && LA97_0<=ENUM)||LA97_0==27||LA97_0==30||LA97_0==39||(LA97_0>=45 && LA97_0<=62)||LA97_0==71) ) {
                alt97=1;
            }
            } finally {dbg.exitDecision(97);}

            switch (alt97) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:446:9: annotationTypeElementDeclarations
                    {
                    dbg.location(446,9);
                    pushFollow(FOLLOW_annotationTypeElementDeclarations_in_annotationTypeBody3035);
                    annotationTypeElementDeclarations297=annotationTypeElementDeclarations();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_annotationTypeElementDeclarations.add(annotationTypeElementDeclarations297.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(97);}

            dbg.location(446,45);
            char_literal298=(Token)input.LT(1);
            match(input,38,FOLLOW_38_in_annotationTypeBody3039); if (failed) return retval;
            if ( backtracking==0 ) stream_38.add(char_literal298);

            dbg.location(446,49);

            // AST REWRITE
            // elements: 37, annotationTypeElementDeclarations, 38
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 446:49: -> '{' ( annotationTypeElementDeclarations )? '}'
            {
                dbg.location(446,52);
                adaptor.addChild(root_0, stream_37.next());
                dbg.location(446,56);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:446:56: ( annotationTypeElementDeclarations )?
                if ( stream_annotationTypeElementDeclarations.hasNext() ) {
                    dbg.location(446,57);
                    adaptor.addChild(root_0, stream_annotationTypeElementDeclarations.next());

                }
                stream_annotationTypeElementDeclarations.reset();
                dbg.location(446,93);
                adaptor.addChild(root_0, stream_38.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 72, annotationTypeBody_StartIndex); }
        }
        dbg.location(447, 2);

        }
        finally {
            dbg.exitRule("annotationTypeBody");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end annotationTypeBody

    public static class annotationTypeElementDeclarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start annotationTypeElementDeclarations
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:449:1: annotationTypeElementDeclarations : annotationTypeElementDeclaration ( annotationTypeElementDeclaration )* -> annotationTypeElementDeclaration ( annotationTypeElementDeclaration )* ;
    public final annotationTypeElementDeclarations_return annotationTypeElementDeclarations() throws RecognitionException {
        annotationTypeElementDeclarations_return retval = new annotationTypeElementDeclarations_return();
        retval.start = input.LT(1);
        int annotationTypeElementDeclarations_StartIndex = input.index();
        Object root_0 = null;

        annotationTypeElementDeclaration_return annotationTypeElementDeclaration299 = null;

        annotationTypeElementDeclaration_return annotationTypeElementDeclaration300 = null;


        RewriteRuleSubtreeStream stream_annotationTypeElementDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule annotationTypeElementDeclaration");
        try { dbg.enterRule("annotationTypeElementDeclarations");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(449, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:450:2: ( annotationTypeElementDeclaration ( annotationTypeElementDeclaration )* -> annotationTypeElementDeclaration ( annotationTypeElementDeclaration )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:450:4: annotationTypeElementDeclaration ( annotationTypeElementDeclaration )*
            {
            dbg.location(450,4);
            pushFollow(FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3062);
            annotationTypeElementDeclaration299=annotationTypeElementDeclaration();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_annotationTypeElementDeclaration.add(annotationTypeElementDeclaration299.getTree());
            dbg.location(450,37);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:450:37: ( annotationTypeElementDeclaration )*
            try { dbg.enterSubRule(98);

            loop98:
            do {
                int alt98=2;
                try { dbg.enterDecision(98);

                int LA98_0 = input.LA(1);

                if ( ((LA98_0>=Identifier && LA98_0<=ENUM)||LA98_0==27||LA98_0==30||LA98_0==39||(LA98_0>=45 && LA98_0<=62)||LA98_0==71) ) {
                    alt98=1;
                }


                } finally {dbg.exitDecision(98);}

                switch (alt98) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:450:38: annotationTypeElementDeclaration
            	    {
            	    dbg.location(450,38);
            	    pushFollow(FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3065);
            	    annotationTypeElementDeclaration300=annotationTypeElementDeclaration();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_annotationTypeElementDeclaration.add(annotationTypeElementDeclaration300.getTree());

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);
            } finally {dbg.exitSubRule(98);}

            dbg.location(450,73);

            // AST REWRITE
            // elements: annotationTypeElementDeclaration, annotationTypeElementDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 450:73: -> annotationTypeElementDeclaration ( annotationTypeElementDeclaration )*
            {
                dbg.location(450,76);
                adaptor.addChild(root_0, stream_annotationTypeElementDeclaration.next());
                dbg.location(450,109);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:450:109: ( annotationTypeElementDeclaration )*
                while ( stream_annotationTypeElementDeclaration.hasNext() ) {
                    dbg.location(450,110);
                    adaptor.addChild(root_0, stream_annotationTypeElementDeclaration.next());

                }
                stream_annotationTypeElementDeclaration.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 73, annotationTypeElementDeclarations_StartIndex); }
        }
        dbg.location(451, 2);

        }
        finally {
            dbg.exitRule("annotationTypeElementDeclarations");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end annotationTypeElementDeclarations

    public static class annotationTypeElementDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start annotationTypeElementDeclaration
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:453:1: annotationTypeElementDeclaration : ( modifier )* annotationTypeElementRest -> ( modifier )* annotationTypeElementRest ;
    public final annotationTypeElementDeclaration_return annotationTypeElementDeclaration() throws RecognitionException {
        annotationTypeElementDeclaration_return retval = new annotationTypeElementDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeElementDeclaration_StartIndex = input.index();
        Object root_0 = null;

        modifier_return modifier301 = null;

        annotationTypeElementRest_return annotationTypeElementRest302 = null;


        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        RewriteRuleSubtreeStream stream_annotationTypeElementRest=new RewriteRuleSubtreeStream(adaptor,"rule annotationTypeElementRest");
        try { dbg.enterRule("annotationTypeElementDeclaration");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(453, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:454:2: ( ( modifier )* annotationTypeElementRest -> ( modifier )* annotationTypeElementRest )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:454:4: ( modifier )* annotationTypeElementRest
            {
            dbg.location(454,4);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:454:4: ( modifier )*
            try { dbg.enterSubRule(99);

            loop99:
            do {
                int alt99=2;
                try { dbg.enterDecision(99);

                int LA99_0 = input.LA(1);

                if ( (LA99_0==71) ) {
                    int LA99_13 = input.LA(2);

                    if ( (LA99_13==Identifier) ) {
                        alt99=1;
                    }


                }
                else if ( (LA99_0==27||(LA99_0>=45 && LA99_0<=54)) ) {
                    alt99=1;
                }


                } finally {dbg.exitDecision(99);}

                switch (alt99) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:454:5: modifier
            	    {
            	    dbg.location(454,5);
            	    pushFollow(FOLLOW_modifier_in_annotationTypeElementDeclaration3089);
            	    modifier301=modifier();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_modifier.add(modifier301.getTree());

            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);
            } finally {dbg.exitSubRule(99);}

            dbg.location(454,16);
            pushFollow(FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration3093);
            annotationTypeElementRest302=annotationTypeElementRest();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_annotationTypeElementRest.add(annotationTypeElementRest302.getTree());
            dbg.location(454,42);

            // AST REWRITE
            // elements: annotationTypeElementRest, modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 454:42: -> ( modifier )* annotationTypeElementRest
            {
                dbg.location(454,45);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:454:45: ( modifier )*
                while ( stream_modifier.hasNext() ) {
                    dbg.location(454,46);
                    adaptor.addChild(root_0, stream_modifier.next());

                }
                stream_modifier.reset();
                dbg.location(454,57);
                adaptor.addChild(root_0, stream_annotationTypeElementRest.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 74, annotationTypeElementDeclaration_StartIndex); }
        }
        dbg.location(455, 2);

        }
        finally {
            dbg.exitRule("annotationTypeElementDeclaration");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end annotationTypeElementDeclaration

    public static class annotationTypeElementRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start annotationTypeElementRest
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:457:1: annotationTypeElementRest : ( type annotationMethodOrConstantRest ';' -> type annotationMethodOrConstantRest ';' | classDeclaration ( ';' )? -> classDeclaration ( ';' )? | interfaceDeclaration ( ';' )? -> interfaceDeclaration ( ';' )? | enumDeclaration ( ';' )? -> enumDeclaration ( ';' )? | annotationTypeDeclaration ( ';' )? -> annotationTypeDeclaration ( ';' )? );
    public final annotationTypeElementRest_return annotationTypeElementRest() throws RecognitionException {
        annotationTypeElementRest_return retval = new annotationTypeElementRest_return();
        retval.start = input.LT(1);
        int annotationTypeElementRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal305=null;
        Token char_literal307=null;
        Token char_literal309=null;
        Token char_literal311=null;
        Token char_literal313=null;
        type_return type303 = null;

        annotationMethodOrConstantRest_return annotationMethodOrConstantRest304 = null;

        classDeclaration_return classDeclaration306 = null;

        interfaceDeclaration_return interfaceDeclaration308 = null;

        enumDeclaration_return enumDeclaration310 = null;

        annotationTypeDeclaration_return annotationTypeDeclaration312 = null;


        Object char_literal305_tree=null;
        Object char_literal307_tree=null;
        Object char_literal309_tree=null;
        Object char_literal311_tree=null;
        Object char_literal313_tree=null;
        RewriteRuleTokenStream stream_25=new RewriteRuleTokenStream(adaptor,"token 25");
        RewriteRuleSubtreeStream stream_annotationTypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule annotationTypeDeclaration");
        RewriteRuleSubtreeStream stream_interfaceDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule interfaceDeclaration");
        RewriteRuleSubtreeStream stream_classDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classDeclaration");
        RewriteRuleSubtreeStream stream_enumDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule enumDeclaration");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_annotationMethodOrConstantRest=new RewriteRuleSubtreeStream(adaptor,"rule annotationMethodOrConstantRest");
        try { dbg.enterRule("annotationTypeElementRest");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(457, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:458:2: ( type annotationMethodOrConstantRest ';' -> type annotationMethodOrConstantRest ';' | classDeclaration ( ';' )? -> classDeclaration ( ';' )? | interfaceDeclaration ( ';' )? -> interfaceDeclaration ( ';' )? | enumDeclaration ( ';' )? -> enumDeclaration ( ';' )? | annotationTypeDeclaration ( ';' )? -> annotationTypeDeclaration ( ';' )? )
            int alt104=5;
            try { dbg.enterDecision(104);

            switch ( input.LA(1) ) {
            case Identifier:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
                {
                alt104=1;
                }
                break;
            case 30:
                {
                alt104=2;
                }
                break;
            case ENUM:
                {
                int LA104_11 = input.LA(2);

                if ( (LA104_11==Identifier) ) {
                    int LA104_14 = input.LA(3);

                    if ( (synpred136()) ) {
                        alt104=2;
                    }
                    else if ( (synpred140()) ) {
                        alt104=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("457:1: annotationTypeElementRest : ( type annotationMethodOrConstantRest ';' -> type annotationMethodOrConstantRest ';' | classDeclaration ( ';' )? -> classDeclaration ( ';' )? | interfaceDeclaration ( ';' )? -> interfaceDeclaration ( ';' )? | enumDeclaration ( ';' )? -> enumDeclaration ( ';' )? | annotationTypeDeclaration ( ';' )? -> annotationTypeDeclaration ( ';' )? );", 104, 14, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("457:1: annotationTypeElementRest : ( type annotationMethodOrConstantRest ';' -> type annotationMethodOrConstantRest ';' | classDeclaration ( ';' )? -> classDeclaration ( ';' )? | interfaceDeclaration ( ';' )? -> interfaceDeclaration ( ';' )? | enumDeclaration ( ';' )? -> enumDeclaration ( ';' )? | annotationTypeDeclaration ( ';' )? -> annotationTypeDeclaration ( ';' )? );", 104, 11, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                }
                break;
            case 39:
                {
                alt104=3;
                }
                break;
            case 71:
                {
                int LA104_13 = input.LA(2);

                if ( (LA104_13==39) ) {
                    int LA104_15 = input.LA(3);

                    if ( (synpred138()) ) {
                        alt104=3;
                    }
                    else if ( (true) ) {
                        alt104=5;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("457:1: annotationTypeElementRest : ( type annotationMethodOrConstantRest ';' -> type annotationMethodOrConstantRest ';' | classDeclaration ( ';' )? -> classDeclaration ( ';' )? | interfaceDeclaration ( ';' )? -> interfaceDeclaration ( ';' )? | enumDeclaration ( ';' )? -> enumDeclaration ( ';' )? | annotationTypeDeclaration ( ';' )? -> annotationTypeDeclaration ( ';' )? );", 104, 15, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("457:1: annotationTypeElementRest : ( type annotationMethodOrConstantRest ';' -> type annotationMethodOrConstantRest ';' | classDeclaration ( ';' )? -> classDeclaration ( ';' )? | interfaceDeclaration ( ';' )? -> interfaceDeclaration ( ';' )? | enumDeclaration ( ';' )? -> enumDeclaration ( ';' )? | annotationTypeDeclaration ( ';' )? -> annotationTypeDeclaration ( ';' )? );", 104, 13, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("457:1: annotationTypeElementRest : ( type annotationMethodOrConstantRest ';' -> type annotationMethodOrConstantRest ';' | classDeclaration ( ';' )? -> classDeclaration ( ';' )? | interfaceDeclaration ( ';' )? -> interfaceDeclaration ( ';' )? | enumDeclaration ( ';' )? -> enumDeclaration ( ';' )? | annotationTypeDeclaration ( ';' )? -> annotationTypeDeclaration ( ';' )? );", 104, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(104);}

            switch (alt104) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:458:4: type annotationMethodOrConstantRest ';'
                    {
                    dbg.location(458,4);
                    pushFollow(FOLLOW_type_in_annotationTypeElementRest3114);
                    type303=type();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_type.add(type303.getTree());
                    dbg.location(458,9);
                    pushFollow(FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest3116);
                    annotationMethodOrConstantRest304=annotationMethodOrConstantRest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_annotationMethodOrConstantRest.add(annotationMethodOrConstantRest304.getTree());
                    dbg.location(458,40);
                    char_literal305=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_annotationTypeElementRest3118); if (failed) return retval;
                    if ( backtracking==0 ) stream_25.add(char_literal305);

                    dbg.location(458,44);

                    // AST REWRITE
                    // elements: 25, type, annotationMethodOrConstantRest
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 458:44: -> type annotationMethodOrConstantRest ';'
                    {
                        dbg.location(458,47);
                        adaptor.addChild(root_0, stream_type.next());
                        dbg.location(458,52);
                        adaptor.addChild(root_0, stream_annotationMethodOrConstantRest.next());
                        dbg.location(458,83);
                        adaptor.addChild(root_0, stream_25.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:459:6: classDeclaration ( ';' )?
                    {
                    dbg.location(459,6);
                    pushFollow(FOLLOW_classDeclaration_in_annotationTypeElementRest3133);
                    classDeclaration306=classDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_classDeclaration.add(classDeclaration306.getTree());
                    dbg.location(459,23);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:459:23: ( ';' )?
                    int alt100=2;
                    try { dbg.enterSubRule(100);
                    try { dbg.enterDecision(100);

                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==25) ) {
                        alt100=1;
                    }
                    } finally {dbg.exitDecision(100);}

                    switch (alt100) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: ';'
                            {
                            dbg.location(459,23);
                            char_literal307=(Token)input.LT(1);
                            match(input,25,FOLLOW_25_in_annotationTypeElementRest3135); if (failed) return retval;
                            if ( backtracking==0 ) stream_25.add(char_literal307);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(100);}

                    dbg.location(459,28);

                    // AST REWRITE
                    // elements: 25, classDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 459:28: -> classDeclaration ( ';' )?
                    {
                        dbg.location(459,31);
                        adaptor.addChild(root_0, stream_classDeclaration.next());
                        dbg.location(459,48);
                        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:459:48: ( ';' )?
                        if ( stream_25.hasNext() ) {
                            dbg.location(459,48);
                            adaptor.addChild(root_0, stream_25.next());

                        }
                        stream_25.reset();

                    }

                    }

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:460:6: interfaceDeclaration ( ';' )?
                    {
                    dbg.location(460,6);
                    pushFollow(FOLLOW_interfaceDeclaration_in_annotationTypeElementRest3150);
                    interfaceDeclaration308=interfaceDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_interfaceDeclaration.add(interfaceDeclaration308.getTree());
                    dbg.location(460,27);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:460:27: ( ';' )?
                    int alt101=2;
                    try { dbg.enterSubRule(101);
                    try { dbg.enterDecision(101);

                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==25) ) {
                        alt101=1;
                    }
                    } finally {dbg.exitDecision(101);}

                    switch (alt101) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: ';'
                            {
                            dbg.location(460,27);
                            char_literal309=(Token)input.LT(1);
                            match(input,25,FOLLOW_25_in_annotationTypeElementRest3152); if (failed) return retval;
                            if ( backtracking==0 ) stream_25.add(char_literal309);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(101);}

                    dbg.location(460,32);

                    // AST REWRITE
                    // elements: 25, interfaceDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 460:32: -> interfaceDeclaration ( ';' )?
                    {
                        dbg.location(460,35);
                        adaptor.addChild(root_0, stream_interfaceDeclaration.next());
                        dbg.location(460,56);
                        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:460:56: ( ';' )?
                        if ( stream_25.hasNext() ) {
                            dbg.location(460,56);
                            adaptor.addChild(root_0, stream_25.next());

                        }
                        stream_25.reset();

                    }

                    }

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:461:6: enumDeclaration ( ';' )?
                    {
                    dbg.location(461,6);
                    pushFollow(FOLLOW_enumDeclaration_in_annotationTypeElementRest3167);
                    enumDeclaration310=enumDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_enumDeclaration.add(enumDeclaration310.getTree());
                    dbg.location(461,22);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:461:22: ( ';' )?
                    int alt102=2;
                    try { dbg.enterSubRule(102);
                    try { dbg.enterDecision(102);

                    int LA102_0 = input.LA(1);

                    if ( (LA102_0==25) ) {
                        alt102=1;
                    }
                    } finally {dbg.exitDecision(102);}

                    switch (alt102) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: ';'
                            {
                            dbg.location(461,22);
                            char_literal311=(Token)input.LT(1);
                            match(input,25,FOLLOW_25_in_annotationTypeElementRest3169); if (failed) return retval;
                            if ( backtracking==0 ) stream_25.add(char_literal311);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(102);}

                    dbg.location(461,27);

                    // AST REWRITE
                    // elements: 25, enumDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 461:27: -> enumDeclaration ( ';' )?
                    {
                        dbg.location(461,30);
                        adaptor.addChild(root_0, stream_enumDeclaration.next());
                        dbg.location(461,46);
                        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:461:46: ( ';' )?
                        if ( stream_25.hasNext() ) {
                            dbg.location(461,46);
                            adaptor.addChild(root_0, stream_25.next());

                        }
                        stream_25.reset();

                    }

                    }

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:462:6: annotationTypeDeclaration ( ';' )?
                    {
                    dbg.location(462,6);
                    pushFollow(FOLLOW_annotationTypeDeclaration_in_annotationTypeElementRest3184);
                    annotationTypeDeclaration312=annotationTypeDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_annotationTypeDeclaration.add(annotationTypeDeclaration312.getTree());
                    dbg.location(462,32);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:462:32: ( ';' )?
                    int alt103=2;
                    try { dbg.enterSubRule(103);
                    try { dbg.enterDecision(103);

                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==25) ) {
                        alt103=1;
                    }
                    } finally {dbg.exitDecision(103);}

                    switch (alt103) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: ';'
                            {
                            dbg.location(462,32);
                            char_literal313=(Token)input.LT(1);
                            match(input,25,FOLLOW_25_in_annotationTypeElementRest3186); if (failed) return retval;
                            if ( backtracking==0 ) stream_25.add(char_literal313);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(103);}

                    dbg.location(462,37);

                    // AST REWRITE
                    // elements: 25, annotationTypeDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 462:37: -> annotationTypeDeclaration ( ';' )?
                    {
                        dbg.location(462,40);
                        adaptor.addChild(root_0, stream_annotationTypeDeclaration.next());
                        dbg.location(462,66);
                        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:462:66: ( ';' )?
                        if ( stream_25.hasNext() ) {
                            dbg.location(462,66);
                            adaptor.addChild(root_0, stream_25.next());

                        }
                        stream_25.reset();

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 75, annotationTypeElementRest_StartIndex); }
        }
        dbg.location(463, 2);

        }
        finally {
            dbg.exitRule("annotationTypeElementRest");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end annotationTypeElementRest

    public static class annotationMethodOrConstantRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start annotationMethodOrConstantRest
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:465:1: annotationMethodOrConstantRest : ( annotationMethodRest -> annotationMethodRest | annotationConstantRest -> annotationConstantRest );
    public final annotationMethodOrConstantRest_return annotationMethodOrConstantRest() throws RecognitionException {
        annotationMethodOrConstantRest_return retval = new annotationMethodOrConstantRest_return();
        retval.start = input.LT(1);
        int annotationMethodOrConstantRest_StartIndex = input.index();
        Object root_0 = null;

        annotationMethodRest_return annotationMethodRest314 = null;

        annotationConstantRest_return annotationConstantRest315 = null;


        RewriteRuleSubtreeStream stream_annotationMethodRest=new RewriteRuleSubtreeStream(adaptor,"rule annotationMethodRest");
        RewriteRuleSubtreeStream stream_annotationConstantRest=new RewriteRuleSubtreeStream(adaptor,"rule annotationConstantRest");
        try { dbg.enterRule("annotationMethodOrConstantRest");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(465, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:466:2: ( annotationMethodRest -> annotationMethodRest | annotationConstantRest -> annotationConstantRest )
            int alt105=2;
            try { dbg.enterDecision(105);

            int LA105_0 = input.LA(1);

            if ( (LA105_0==Identifier) ) {
                int LA105_1 = input.LA(2);

                if ( (LA105_1==65) ) {
                    alt105=1;
                }
                else if ( (LA105_1==25||LA105_1==34||LA105_1==41||LA105_1==44) ) {
                    alt105=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("465:1: annotationMethodOrConstantRest : ( annotationMethodRest -> annotationMethodRest | annotationConstantRest -> annotationConstantRest );", 105, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("465:1: annotationMethodOrConstantRest : ( annotationMethodRest -> annotationMethodRest | annotationConstantRest -> annotationConstantRest );", 105, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(105);}

            switch (alt105) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:466:4: annotationMethodRest
                    {
                    dbg.location(466,4);
                    pushFollow(FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest3206);
                    annotationMethodRest314=annotationMethodRest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_annotationMethodRest.add(annotationMethodRest314.getTree());
                    dbg.location(466,25);

                    // AST REWRITE
                    // elements: annotationMethodRest
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 466:25: -> annotationMethodRest
                    {
                        dbg.location(466,28);
                        adaptor.addChild(root_0, stream_annotationMethodRest.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:467:6: annotationConstantRest
                    {
                    dbg.location(467,6);
                    pushFollow(FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest3217);
                    annotationConstantRest315=annotationConstantRest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_annotationConstantRest.add(annotationConstantRest315.getTree());
                    dbg.location(467,29);

                    // AST REWRITE
                    // elements: annotationConstantRest
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 467:29: -> annotationConstantRest
                    {
                        dbg.location(467,32);
                        adaptor.addChild(root_0, stream_annotationConstantRest.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 76, annotationMethodOrConstantRest_StartIndex); }
        }
        dbg.location(468, 2);

        }
        finally {
            dbg.exitRule("annotationMethodOrConstantRest");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end annotationMethodOrConstantRest

    public static class annotationMethodRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start annotationMethodRest
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:470:1: annotationMethodRest : Identifier '(' ')' ( defaultValue )? -> Identifier '(' ')' ( defaultValue )? ;
    public final annotationMethodRest_return annotationMethodRest() throws RecognitionException {
        annotationMethodRest_return retval = new annotationMethodRest_return();
        retval.start = input.LT(1);
        int annotationMethodRest_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier316=null;
        Token char_literal317=null;
        Token char_literal318=null;
        defaultValue_return defaultValue319 = null;


        Object Identifier316_tree=null;
        Object char_literal317_tree=null;
        Object char_literal318_tree=null;
        RewriteRuleTokenStream stream_66=new RewriteRuleTokenStream(adaptor,"token 66");
        RewriteRuleTokenStream stream_65=new RewriteRuleTokenStream(adaptor,"token 65");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_defaultValue=new RewriteRuleSubtreeStream(adaptor,"rule defaultValue");
        try { dbg.enterRule("annotationMethodRest");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(470, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:471:3: ( Identifier '(' ')' ( defaultValue )? -> Identifier '(' ')' ( defaultValue )? )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:471:5: Identifier '(' ')' ( defaultValue )?
            {
            dbg.location(471,5);
            Identifier316=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_annotationMethodRest3234); if (failed) return retval;
            if ( backtracking==0 ) stream_Identifier.add(Identifier316);

            dbg.location(471,16);
            char_literal317=(Token)input.LT(1);
            match(input,65,FOLLOW_65_in_annotationMethodRest3236); if (failed) return retval;
            if ( backtracking==0 ) stream_65.add(char_literal317);

            dbg.location(471,20);
            char_literal318=(Token)input.LT(1);
            match(input,66,FOLLOW_66_in_annotationMethodRest3238); if (failed) return retval;
            if ( backtracking==0 ) stream_66.add(char_literal318);

            dbg.location(471,24);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:471:24: ( defaultValue )?
            int alt106=2;
            try { dbg.enterSubRule(106);
            try { dbg.enterDecision(106);

            int LA106_0 = input.LA(1);

            if ( (LA106_0==72) ) {
                alt106=1;
            }
            } finally {dbg.exitDecision(106);}

            switch (alt106) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:471:25: defaultValue
                    {
                    dbg.location(471,25);
                    pushFollow(FOLLOW_defaultValue_in_annotationMethodRest3241);
                    defaultValue319=defaultValue();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_defaultValue.add(defaultValue319.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(106);}

            dbg.location(471,40);

            // AST REWRITE
            // elements: defaultValue, 66, 65, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 471:40: -> Identifier '(' ')' ( defaultValue )?
            {
                dbg.location(471,43);
                adaptor.addChild(root_0, stream_Identifier.next());
                dbg.location(471,54);
                adaptor.addChild(root_0, stream_65.next());
                dbg.location(471,58);
                adaptor.addChild(root_0, stream_66.next());
                dbg.location(471,62);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:471:62: ( defaultValue )?
                if ( stream_defaultValue.hasNext() ) {
                    dbg.location(471,63);
                    adaptor.addChild(root_0, stream_defaultValue.next());

                }
                stream_defaultValue.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 77, annotationMethodRest_StartIndex); }
        }
        dbg.location(472, 3);

        }
        finally {
            dbg.exitRule("annotationMethodRest");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end annotationMethodRest

    public static class annotationConstantRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start annotationConstantRest
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:474:1: annotationConstantRest : variableDeclarators -> variableDeclarators ;
    public final annotationConstantRest_return annotationConstantRest() throws RecognitionException {
        annotationConstantRest_return retval = new annotationConstantRest_return();
        retval.start = input.LT(1);
        int annotationConstantRest_StartIndex = input.index();
        Object root_0 = null;

        variableDeclarators_return variableDeclarators320 = null;


        RewriteRuleSubtreeStream stream_variableDeclarators=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarators");
        try { dbg.enterRule("annotationConstantRest");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(474, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:475:3: ( variableDeclarators -> variableDeclarators )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:475:5: variableDeclarators
            {
            dbg.location(475,5);
            pushFollow(FOLLOW_variableDeclarators_in_annotationConstantRest3271);
            variableDeclarators320=variableDeclarators();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_variableDeclarators.add(variableDeclarators320.getTree());
            dbg.location(475,25);

            // AST REWRITE
            // elements: variableDeclarators
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 475:25: -> variableDeclarators
            {
                dbg.location(475,28);
                adaptor.addChild(root_0, stream_variableDeclarators.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 78, annotationConstantRest_StartIndex); }
        }
        dbg.location(476, 3);

        }
        finally {
            dbg.exitRule("annotationConstantRest");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end annotationConstantRest

    public static class defaultValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start defaultValue
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:478:1: defaultValue : 'default' elementValue -> 'default' elementValue ;
    public final defaultValue_return defaultValue() throws RecognitionException {
        defaultValue_return retval = new defaultValue_return();
        retval.start = input.LT(1);
        int defaultValue_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal321=null;
        elementValue_return elementValue322 = null;


        Object string_literal321_tree=null;
        RewriteRuleTokenStream stream_72=new RewriteRuleTokenStream(adaptor,"token 72");
        RewriteRuleSubtreeStream stream_elementValue=new RewriteRuleSubtreeStream(adaptor,"rule elementValue");
        try { dbg.enterRule("defaultValue");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(478, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:479:3: ( 'default' elementValue -> 'default' elementValue )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:479:5: 'default' elementValue
            {
            dbg.location(479,5);
            string_literal321=(Token)input.LT(1);
            match(input,72,FOLLOW_72_in_defaultValue3290); if (failed) return retval;
            if ( backtracking==0 ) stream_72.add(string_literal321);

            dbg.location(479,15);
            pushFollow(FOLLOW_elementValue_in_defaultValue3292);
            elementValue322=elementValue();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_elementValue.add(elementValue322.getTree());
            dbg.location(479,28);

            // AST REWRITE
            // elements: 72, elementValue
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 479:28: -> 'default' elementValue
            {
                dbg.location(479,31);
                adaptor.addChild(root_0, stream_72.next());
                dbg.location(479,41);
                adaptor.addChild(root_0, stream_elementValue.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 79, defaultValue_StartIndex); }
        }
        dbg.location(480, 3);

        }
        finally {
            dbg.exitRule("defaultValue");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end defaultValue

    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start block
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:484:1: block : '{' ( blockStatement )* '}' -> '{' ( blockStatement )* '}' ;
    public final block_return block() throws RecognitionException {
        block_return retval = new block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal323=null;
        Token char_literal325=null;
        blockStatement_return blockStatement324 = null;


        Object char_literal323_tree=null;
        Object char_literal325_tree=null;
        RewriteRuleTokenStream stream_37=new RewriteRuleTokenStream(adaptor,"token 37");
        RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");
        RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
        try { dbg.enterRule("block");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(484, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:485:2: ( '{' ( blockStatement )* '}' -> '{' ( blockStatement )* '}' )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:485:4: '{' ( blockStatement )* '}'
            {
            dbg.location(485,4);
            char_literal323=(Token)input.LT(1);
            match(input,37,FOLLOW_37_in_block3312); if (failed) return retval;
            if ( backtracking==0 ) stream_37.add(char_literal323);

            dbg.location(485,8);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:485:8: ( blockStatement )*
            try { dbg.enterSubRule(107);

            loop107:
            do {
                int alt107=2;
                try { dbg.enterDecision(107);

                int LA107_0 = input.LA(1);

                if ( ((LA107_0>=Identifier && LA107_0<=DecimalLiteral)||LA107_0==25||LA107_0==27||LA107_0==30||LA107_0==33||LA107_0==37||(LA107_0>=39 && LA107_0<=40)||(LA107_0>=45 && LA107_0<=62)||(LA107_0>=64 && LA107_0<=65)||(LA107_0>=68 && LA107_0<=71)||LA107_0==73||LA107_0==75||(LA107_0>=77 && LA107_0<=80)||(LA107_0>=82 && LA107_0<=86)||(LA107_0>=104 && LA107_0<=105)||(LA107_0>=108 && LA107_0<=113)) ) {
                    alt107=1;
                }


                } finally {dbg.exitDecision(107);}

                switch (alt107) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: blockStatement
            	    {
            	    dbg.location(485,8);
            	    pushFollow(FOLLOW_blockStatement_in_block3314);
            	    blockStatement324=blockStatement();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_blockStatement.add(blockStatement324.getTree());

            	    }
            	    break;

            	default :
            	    break loop107;
                }
            } while (true);
            } finally {dbg.exitSubRule(107);}

            dbg.location(485,24);
            char_literal325=(Token)input.LT(1);
            match(input,38,FOLLOW_38_in_block3317); if (failed) return retval;
            if ( backtracking==0 ) stream_38.add(char_literal325);

            dbg.location(485,28);

            // AST REWRITE
            // elements: 37, 38, blockStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 485:28: -> '{' ( blockStatement )* '}'
            {
                dbg.location(485,31);
                adaptor.addChild(root_0, stream_37.next());
                dbg.location(485,35);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:485:35: ( blockStatement )*
                while ( stream_blockStatement.hasNext() ) {
                    dbg.location(485,35);
                    adaptor.addChild(root_0, stream_blockStatement.next());

                }
                stream_blockStatement.reset();
                dbg.location(485,51);
                adaptor.addChild(root_0, stream_38.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 80, block_StartIndex); }
        }
        dbg.location(486, 2);

        }
        finally {
            dbg.exitRule("block");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end block

    public static class blockStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start blockStatement
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );
    public final blockStatement_return blockStatement() throws RecognitionException {
        blockStatement_return retval = new blockStatement_return();
        retval.start = input.LT(1);
        int blockStatement_StartIndex = input.index();
        Object root_0 = null;

        localVariableDeclaration_return localVariableDeclaration326 = null;

        classOrInterfaceDeclaration_return classOrInterfaceDeclaration327 = null;

        statement_return statement328 = null;


        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_classOrInterfaceDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classOrInterfaceDeclaration");
        RewriteRuleSubtreeStream stream_localVariableDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule localVariableDeclaration");
        try { dbg.enterRule("blockStatement");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(488, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:489:2: ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement )
            int alt108=3;
            try { dbg.enterDecision(108);

            switch ( input.LA(1) ) {
            case 49:
                {
                switch ( input.LA(2) ) {
                case ENUM:
                case 27:
                case 30:
                case 39:
                case 45:
                case 46:
                case 47:
                case 48:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                    {
                    alt108=2;
                    }
                    break;
                case 71:
                    {
                    int LA108_60 = input.LA(3);

                    if ( (synpred145()) ) {
                        alt108=1;
                    }
                    else if ( (synpred146()) ) {
                        alt108=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 60, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 49:
                    {
                    int LA108_66 = input.LA(3);

                    if ( (synpred145()) ) {
                        alt108=1;
                    }
                    else if ( (synpred146()) ) {
                        alt108=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 66, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                    {
                    alt108=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 71:
                {
                int LA108_2 = input.LA(2);

                if ( (LA108_2==39) ) {
                    alt108=2;
                }
                else if ( (LA108_2==Identifier) ) {
                    int LA108_84 = input.LA(3);

                    if ( (synpred145()) ) {
                        alt108=1;
                    }
                    else if ( (synpred146()) ) {
                        alt108=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 84, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                }
                break;
            case Identifier:
                {
                switch ( input.LA(2) ) {
                case 25:
                case 29:
                case 35:
                case 36:
                case 44:
                case 63:
                case 65:
                case 74:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                    {
                    alt108=3;
                    }
                    break;
                case 28:
                    {
                    int LA108_86 = input.LA(3);

                    if ( (synpred145()) ) {
                        alt108=1;
                    }
                    else if ( (true) ) {
                        alt108=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 86, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 41:
                    {
                    int LA108_87 = input.LA(3);

                    if ( (synpred145()) ) {
                        alt108=1;
                    }
                    else if ( (true) ) {
                        alt108=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 87, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 33:
                    {
                    int LA108_92 = input.LA(3);

                    if ( (synpred145()) ) {
                        alt108=1;
                    }
                    else if ( (true) ) {
                        alt108=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 92, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    alt108=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 3, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 55:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA108_113 = input.LA(3);

                    if ( (synpred145()) ) {
                        alt108=1;
                    }
                    else if ( (true) ) {
                        alt108=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 113, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt108=3;
                    }
                    break;
                case Identifier:
                    {
                    alt108=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 4, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 56:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA108_116 = input.LA(3);

                    if ( (synpred145()) ) {
                        alt108=1;
                    }
                    else if ( (true) ) {
                        alt108=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 116, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    alt108=1;
                    }
                    break;
                case 28:
                    {
                    alt108=3;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 5, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 57:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA108_119 = input.LA(3);

                    if ( (synpred145()) ) {
                        alt108=1;
                    }
                    else if ( (true) ) {
                        alt108=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 119, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    alt108=1;
                    }
                    break;
                case 28:
                    {
                    alt108=3;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 6, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 58:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA108_122 = input.LA(3);

                    if ( (synpred145()) ) {
                        alt108=1;
                    }
                    else if ( (true) ) {
                        alt108=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 122, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt108=3;
                    }
                    break;
                case Identifier:
                    {
                    alt108=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 7, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 59:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA108_125 = input.LA(3);

                    if ( (synpred145()) ) {
                        alt108=1;
                    }
                    else if ( (true) ) {
                        alt108=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 125, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt108=3;
                    }
                    break;
                case Identifier:
                    {
                    alt108=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 8, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 60:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA108_128 = input.LA(3);

                    if ( (synpred145()) ) {
                        alt108=1;
                    }
                    else if ( (true) ) {
                        alt108=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 128, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    alt108=1;
                    }
                    break;
                case 28:
                    {
                    alt108=3;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 9, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 61:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA108_131 = input.LA(3);

                    if ( (synpred145()) ) {
                        alt108=1;
                    }
                    else if ( (true) ) {
                        alt108=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 131, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    alt108=1;
                    }
                    break;
                case 28:
                    {
                    alt108=3;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 10, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 62:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA108_134 = input.LA(3);

                    if ( (synpred145()) ) {
                        alt108=1;
                    }
                    else if ( (true) ) {
                        alt108=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 134, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    alt108=1;
                    }
                    break;
                case 28:
                    {
                    alt108=3;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 11, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case ENUM:
            case 27:
            case 30:
            case 39:
            case 45:
            case 46:
            case 47:
            case 48:
            case 50:
            case 52:
            case 53:
            case 54:
                {
                alt108=2;
                }
                break;
            case 51:
                {
                int LA108_18 = input.LA(2);

                if ( (LA108_18==65) ) {
                    alt108=3;
                }
                else if ( (LA108_18==ENUM||LA108_18==27||LA108_18==30||LA108_18==39||(LA108_18>=45 && LA108_18<=54)||LA108_18==71) ) {
                    alt108=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 18, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                }
                break;
            case FloatingPointLiteral:
            case CharacterLiteral:
            case StringLiteral:
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
            case 25:
            case 33:
            case 37:
            case 40:
            case 64:
            case 65:
            case 68:
            case 69:
            case 70:
            case 73:
            case 75:
            case 77:
            case 78:
            case 79:
            case 80:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 104:
            case 105:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
                {
                alt108=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("488:1: blockStatement : ( localVariableDeclaration -> localVariableDeclaration | classOrInterfaceDeclaration -> classOrInterfaceDeclaration | statement -> statement );", 108, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(108);}

            switch (alt108) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:489:4: localVariableDeclaration
                    {
                    dbg.location(489,4);
                    pushFollow(FOLLOW_localVariableDeclaration_in_blockStatement3338);
                    localVariableDeclaration326=localVariableDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_localVariableDeclaration.add(localVariableDeclaration326.getTree());
                    dbg.location(489,29);

                    // AST REWRITE
                    // elements: localVariableDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 489:29: -> localVariableDeclaration
                    {
                        dbg.location(489,32);
                        adaptor.addChild(root_0, stream_localVariableDeclaration.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:490:4: classOrInterfaceDeclaration
                    {
                    dbg.location(490,4);
                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_blockStatement3347);
                    classOrInterfaceDeclaration327=classOrInterfaceDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_classOrInterfaceDeclaration.add(classOrInterfaceDeclaration327.getTree());
                    dbg.location(490,32);

                    // AST REWRITE
                    // elements: classOrInterfaceDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 490:32: -> classOrInterfaceDeclaration
                    {
                        dbg.location(490,35);
                        adaptor.addChild(root_0, stream_classOrInterfaceDeclaration.next());

                    }

                    }

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:491:8: statement
                    {
                    dbg.location(491,8);
                    pushFollow(FOLLOW_statement_in_blockStatement3360);
                    statement328=statement();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_statement.add(statement328.getTree());
                    dbg.location(491,18);

                    // AST REWRITE
                    // elements: statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 491:18: -> statement
                    {
                        dbg.location(491,21);
                        adaptor.addChild(root_0, stream_statement.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 81, blockStatement_StartIndex); }
        }
        dbg.location(492, 2);

        }
        finally {
            dbg.exitRule("blockStatement");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end blockStatement

    public static class localVariableDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start localVariableDeclaration
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:494:1: localVariableDeclaration : ( variableModifier )* type variableDeclarators ';' -> ( variableModifier )* type variableDeclarators ';' ;
    public final localVariableDeclaration_return localVariableDeclaration() throws RecognitionException {
        localVariableDeclaration_return retval = new localVariableDeclaration_return();
        retval.start = input.LT(1);
        int localVariableDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal332=null;
        variableModifier_return variableModifier329 = null;

        type_return type330 = null;

        variableDeclarators_return variableDeclarators331 = null;


        Object char_literal332_tree=null;
        RewriteRuleTokenStream stream_25=new RewriteRuleTokenStream(adaptor,"token 25");
        RewriteRuleSubtreeStream stream_variableDeclarators=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarators");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_variableModifier=new RewriteRuleSubtreeStream(adaptor,"rule variableModifier");
        try { dbg.enterRule("localVariableDeclaration");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(494, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:495:2: ( ( variableModifier )* type variableDeclarators ';' -> ( variableModifier )* type variableDeclarators ';' )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:495:4: ( variableModifier )* type variableDeclarators ';'
            {
            dbg.location(495,4);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:495:4: ( variableModifier )*
            try { dbg.enterSubRule(109);

            loop109:
            do {
                int alt109=2;
                try { dbg.enterDecision(109);

                int LA109_0 = input.LA(1);

                if ( (LA109_0==49||LA109_0==71) ) {
                    alt109=1;
                }


                } finally {dbg.exitDecision(109);}

                switch (alt109) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: variableModifier
            	    {
            	    dbg.location(495,4);
            	    pushFollow(FOLLOW_variableModifier_in_localVariableDeclaration3376);
            	    variableModifier329=variableModifier();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_variableModifier.add(variableModifier329.getTree());

            	    }
            	    break;

            	default :
            	    break loop109;
                }
            } while (true);
            } finally {dbg.exitSubRule(109);}

            dbg.location(495,22);
            pushFollow(FOLLOW_type_in_localVariableDeclaration3379);
            type330=type();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_type.add(type330.getTree());
            dbg.location(495,27);
            pushFollow(FOLLOW_variableDeclarators_in_localVariableDeclaration3381);
            variableDeclarators331=variableDeclarators();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_variableDeclarators.add(variableDeclarators331.getTree());
            dbg.location(495,47);
            char_literal332=(Token)input.LT(1);
            match(input,25,FOLLOW_25_in_localVariableDeclaration3383); if (failed) return retval;
            if ( backtracking==0 ) stream_25.add(char_literal332);

            dbg.location(495,51);

            // AST REWRITE
            // elements: variableDeclarators, 25, variableModifier, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 495:51: -> ( variableModifier )* type variableDeclarators ';'
            {
                dbg.location(495,54);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:495:54: ( variableModifier )*
                while ( stream_variableModifier.hasNext() ) {
                    dbg.location(495,54);
                    adaptor.addChild(root_0, stream_variableModifier.next());

                }
                stream_variableModifier.reset();
                dbg.location(495,72);
                adaptor.addChild(root_0, stream_type.next());
                dbg.location(495,77);
                adaptor.addChild(root_0, stream_variableDeclarators.next());
                dbg.location(495,97);
                adaptor.addChild(root_0, stream_25.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 82, localVariableDeclaration_StartIndex); }
        }
        dbg.location(496, 2);

        }
        finally {
            dbg.exitRule("localVariableDeclaration");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end localVariableDeclaration

    public static class statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start statement
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:498:1: statement : ( block -> block | 'assert' expression ( ':' expression )? ';' -> 'assert' expression ( ':' expression )? ';' | 'if' parExpression statement ( options {k=1; } : 'else' statement )? -> 'if' parExpression statement ( 'else' statement )? | 'for' '(' forControl ')' statement -> 'for' '(' forControl ')' statement | 'while' parExpression statement -> 'while' parExpression statement | 'do' statement 'while' parExpression ';' -> 'do' statement 'while' parExpression ';' | 'try' block catches 'finally' block -> 'try' block catches 'finally' block | 'try' block catches -> 'try' block catches | 'try' 'finally' block -> 'try' 'finally' block | 'switch' parExpression '{' switchBlockStatementGroups '}' -> 'switch' parExpression '{' switchBlockStatementGroups '}' | 'synchronized' parExpression block -> 'synchronized' parExpression block | 'return' ( expression )? ';' -> 'return' ( expression )? ';' | 'throw' expression ';' -> 'throw' expression ';' | 'break' ( Identifier )? ';' -> 'break' ( Identifier )? ';' | 'continue' ( Identifier )? ';' -> 'continue' ( Identifier )? ';' | ';' -> ';' | statementExpression ';' -> statementExpression ';' | Identifier ':' statement -> Identifier ':' statement );
    public final statement_return statement() throws RecognitionException {
        statement_return retval = new statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal334=null;
        Token char_literal336=null;
        Token char_literal338=null;
        Token string_literal339=null;
        Token string_literal342=null;
        Token string_literal344=null;
        Token char_literal345=null;
        Token char_literal347=null;
        Token string_literal349=null;
        Token string_literal352=null;
        Token string_literal354=null;
        Token char_literal356=null;
        Token string_literal357=null;
        Token string_literal360=null;
        Token string_literal362=null;
        Token string_literal365=null;
        Token string_literal366=null;
        Token string_literal368=null;
        Token char_literal370=null;
        Token char_literal372=null;
        Token string_literal373=null;
        Token string_literal376=null;
        Token char_literal378=null;
        Token string_literal379=null;
        Token char_literal381=null;
        Token string_literal382=null;
        Token Identifier383=null;
        Token char_literal384=null;
        Token string_literal385=null;
        Token Identifier386=null;
        Token char_literal387=null;
        Token char_literal388=null;
        Token char_literal390=null;
        Token Identifier391=null;
        Token char_literal392=null;
        block_return block333 = null;

        expression_return expression335 = null;

        expression_return expression337 = null;

        parExpression_return parExpression340 = null;

        statement_return statement341 = null;

        statement_return statement343 = null;

        forControl_return forControl346 = null;

        statement_return statement348 = null;

        parExpression_return parExpression350 = null;

        statement_return statement351 = null;

        statement_return statement353 = null;

        parExpression_return parExpression355 = null;

        block_return block358 = null;

        catches_return catches359 = null;

        block_return block361 = null;

        block_return block363 = null;

        catches_return catches364 = null;

        block_return block367 = null;

        parExpression_return parExpression369 = null;

        switchBlockStatementGroups_return switchBlockStatementGroups371 = null;

        parExpression_return parExpression374 = null;

        block_return block375 = null;

        expression_return expression377 = null;

        expression_return expression380 = null;

        statementExpression_return statementExpression389 = null;

        statement_return statement393 = null;


        Object string_literal334_tree=null;
        Object char_literal336_tree=null;
        Object char_literal338_tree=null;
        Object string_literal339_tree=null;
        Object string_literal342_tree=null;
        Object string_literal344_tree=null;
        Object char_literal345_tree=null;
        Object char_literal347_tree=null;
        Object string_literal349_tree=null;
        Object string_literal352_tree=null;
        Object string_literal354_tree=null;
        Object char_literal356_tree=null;
        Object string_literal357_tree=null;
        Object string_literal360_tree=null;
        Object string_literal362_tree=null;
        Object string_literal365_tree=null;
        Object string_literal366_tree=null;
        Object string_literal368_tree=null;
        Object char_literal370_tree=null;
        Object char_literal372_tree=null;
        Object string_literal373_tree=null;
        Object string_literal376_tree=null;
        Object char_literal378_tree=null;
        Object string_literal379_tree=null;
        Object char_literal381_tree=null;
        Object string_literal382_tree=null;
        Object Identifier383_tree=null;
        Object char_literal384_tree=null;
        Object string_literal385_tree=null;
        Object Identifier386_tree=null;
        Object char_literal387_tree=null;
        Object char_literal388_tree=null;
        Object char_literal390_tree=null;
        Object Identifier391_tree=null;
        Object char_literal392_tree=null;
        RewriteRuleTokenStream stream_66=new RewriteRuleTokenStream(adaptor,"token 66");
        RewriteRuleTokenStream stream_79=new RewriteRuleTokenStream(adaptor,"token 79");
        RewriteRuleTokenStream stream_78=new RewriteRuleTokenStream(adaptor,"token 78");
        RewriteRuleTokenStream stream_77=new RewriteRuleTokenStream(adaptor,"token 77");
        RewriteRuleTokenStream stream_25=new RewriteRuleTokenStream(adaptor,"token 25");
        RewriteRuleTokenStream stream_37=new RewriteRuleTokenStream(adaptor,"token 37");
        RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");
        RewriteRuleTokenStream stream_51=new RewriteRuleTokenStream(adaptor,"token 51");
        RewriteRuleTokenStream stream_82=new RewriteRuleTokenStream(adaptor,"token 82");
        RewriteRuleTokenStream stream_83=new RewriteRuleTokenStream(adaptor,"token 83");
        RewriteRuleTokenStream stream_65=new RewriteRuleTokenStream(adaptor,"token 65");
        RewriteRuleTokenStream stream_80=new RewriteRuleTokenStream(adaptor,"token 80");
        RewriteRuleTokenStream stream_81=new RewriteRuleTokenStream(adaptor,"token 81");
        RewriteRuleTokenStream stream_86=new RewriteRuleTokenStream(adaptor,"token 86");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_73=new RewriteRuleTokenStream(adaptor,"token 73");
        RewriteRuleTokenStream stream_74=new RewriteRuleTokenStream(adaptor,"token 74");
        RewriteRuleTokenStream stream_84=new RewriteRuleTokenStream(adaptor,"token 84");
        RewriteRuleTokenStream stream_75=new RewriteRuleTokenStream(adaptor,"token 75");
        RewriteRuleTokenStream stream_85=new RewriteRuleTokenStream(adaptor,"token 85");
        RewriteRuleTokenStream stream_76=new RewriteRuleTokenStream(adaptor,"token 76");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_parExpression=new RewriteRuleSubtreeStream(adaptor,"rule parExpression");
        RewriteRuleSubtreeStream stream_switchBlockStatementGroups=new RewriteRuleSubtreeStream(adaptor,"rule switchBlockStatementGroups");
        RewriteRuleSubtreeStream stream_catches=new RewriteRuleSubtreeStream(adaptor,"rule catches");
        RewriteRuleSubtreeStream stream_statementExpression=new RewriteRuleSubtreeStream(adaptor,"rule statementExpression");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_forControl=new RewriteRuleSubtreeStream(adaptor,"rule forControl");
        try { dbg.enterRule("statement");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(498, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:499:2: ( block -> block | 'assert' expression ( ':' expression )? ';' -> 'assert' expression ( ':' expression )? ';' | 'if' parExpression statement ( options {k=1; } : 'else' statement )? -> 'if' parExpression statement ( 'else' statement )? | 'for' '(' forControl ')' statement -> 'for' '(' forControl ')' statement | 'while' parExpression statement -> 'while' parExpression statement | 'do' statement 'while' parExpression ';' -> 'do' statement 'while' parExpression ';' | 'try' block catches 'finally' block -> 'try' block catches 'finally' block | 'try' block catches -> 'try' block catches | 'try' 'finally' block -> 'try' 'finally' block | 'switch' parExpression '{' switchBlockStatementGroups '}' -> 'switch' parExpression '{' switchBlockStatementGroups '}' | 'synchronized' parExpression block -> 'synchronized' parExpression block | 'return' ( expression )? ';' -> 'return' ( expression )? ';' | 'throw' expression ';' -> 'throw' expression ';' | 'break' ( Identifier )? ';' -> 'break' ( Identifier )? ';' | 'continue' ( Identifier )? ';' -> 'continue' ( Identifier )? ';' | ';' -> ';' | statementExpression ';' -> statementExpression ';' | Identifier ':' statement -> Identifier ':' statement )
            int alt115=18;
            try { dbg.enterDecision(115);

            switch ( input.LA(1) ) {
            case 37:
                {
                alt115=1;
                }
                break;
            case 73:
                {
                alt115=2;
                }
                break;
            case 75:
                {
                alt115=3;
                }
                break;
            case 77:
                {
                alt115=4;
                }
                break;
            case 78:
                {
                alt115=5;
                }
                break;
            case 79:
                {
                alt115=6;
                }
                break;
            case 80:
                {
                int LA115_7 = input.LA(2);

                if ( (LA115_7==81) ) {
                    alt115=9;
                }
                else if ( (LA115_7==37) ) {
                    int LA115_46 = input.LA(3);

                    if ( (synpred156()) ) {
                        alt115=7;
                    }
                    else if ( (synpred157()) ) {
                        alt115=8;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("498:1: statement : ( block -> block | 'assert' expression ( ':' expression )? ';' -> 'assert' expression ( ':' expression )? ';' | 'if' parExpression statement ( options {k=1; } : 'else' statement )? -> 'if' parExpression statement ( 'else' statement )? | 'for' '(' forControl ')' statement -> 'for' '(' forControl ')' statement | 'while' parExpression statement -> 'while' parExpression statement | 'do' statement 'while' parExpression ';' -> 'do' statement 'while' parExpression ';' | 'try' block catches 'finally' block -> 'try' block catches 'finally' block | 'try' block catches -> 'try' block catches | 'try' 'finally' block -> 'try' 'finally' block | 'switch' parExpression '{' switchBlockStatementGroups '}' -> 'switch' parExpression '{' switchBlockStatementGroups '}' | 'synchronized' parExpression block -> 'synchronized' parExpression block | 'return' ( expression )? ';' -> 'return' ( expression )? ';' | 'throw' expression ';' -> 'throw' expression ';' | 'break' ( Identifier )? ';' -> 'break' ( Identifier )? ';' | 'continue' ( Identifier )? ';' -> 'continue' ( Identifier )? ';' | ';' -> ';' | statementExpression ';' -> statementExpression ';' | Identifier ':' statement -> Identifier ':' statement );", 115, 46, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("498:1: statement : ( block -> block | 'assert' expression ( ':' expression )? ';' -> 'assert' expression ( ':' expression )? ';' | 'if' parExpression statement ( options {k=1; } : 'else' statement )? -> 'if' parExpression statement ( 'else' statement )? | 'for' '(' forControl ')' statement -> 'for' '(' forControl ')' statement | 'while' parExpression statement -> 'while' parExpression statement | 'do' statement 'while' parExpression ';' -> 'do' statement 'while' parExpression ';' | 'try' block catches 'finally' block -> 'try' block catches 'finally' block | 'try' block catches -> 'try' block catches | 'try' 'finally' block -> 'try' 'finally' block | 'switch' parExpression '{' switchBlockStatementGroups '}' -> 'switch' parExpression '{' switchBlockStatementGroups '}' | 'synchronized' parExpression block -> 'synchronized' parExpression block | 'return' ( expression )? ';' -> 'return' ( expression )? ';' | 'throw' expression ';' -> 'throw' expression ';' | 'break' ( Identifier )? ';' -> 'break' ( Identifier )? ';' | 'continue' ( Identifier )? ';' -> 'continue' ( Identifier )? ';' | ';' -> ';' | statementExpression ';' -> statementExpression ';' | Identifier ':' statement -> Identifier ':' statement );", 115, 7, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                }
                break;
            case 82:
                {
                alt115=10;
                }
                break;
            case 51:
                {
                alt115=11;
                }
                break;
            case 83:
                {
                alt115=12;
                }
                break;
            case 84:
                {
                alt115=13;
                }
                break;
            case 85:
                {
                alt115=14;
                }
                break;
            case 86:
                {
                alt115=15;
                }
                break;
            case 25:
                {
                alt115=16;
                }
                break;
            case FloatingPointLiteral:
            case CharacterLiteral:
            case StringLiteral:
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
            case 33:
            case 40:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 64:
            case 65:
            case 68:
            case 69:
            case 70:
            case 104:
            case 105:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
                {
                alt115=17;
                }
                break;
            case Identifier:
                {
                int LA115_35 = input.LA(2);

                if ( (LA115_35==74) ) {
                    alt115=18;
                }
                else if ( (LA115_35==25||(LA115_35>=28 && LA115_35<=29)||LA115_35==33||(LA115_35>=35 && LA115_35<=36)||LA115_35==41||LA115_35==44||LA115_35==63||LA115_35==65||(LA115_35>=89 && LA115_35<=109)) ) {
                    alt115=17;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("498:1: statement : ( block -> block | 'assert' expression ( ':' expression )? ';' -> 'assert' expression ( ':' expression )? ';' | 'if' parExpression statement ( options {k=1; } : 'else' statement )? -> 'if' parExpression statement ( 'else' statement )? | 'for' '(' forControl ')' statement -> 'for' '(' forControl ')' statement | 'while' parExpression statement -> 'while' parExpression statement | 'do' statement 'while' parExpression ';' -> 'do' statement 'while' parExpression ';' | 'try' block catches 'finally' block -> 'try' block catches 'finally' block | 'try' block catches -> 'try' block catches | 'try' 'finally' block -> 'try' 'finally' block | 'switch' parExpression '{' switchBlockStatementGroups '}' -> 'switch' parExpression '{' switchBlockStatementGroups '}' | 'synchronized' parExpression block -> 'synchronized' parExpression block | 'return' ( expression )? ';' -> 'return' ( expression )? ';' | 'throw' expression ';' -> 'throw' expression ';' | 'break' ( Identifier )? ';' -> 'break' ( Identifier )? ';' | 'continue' ( Identifier )? ';' -> 'continue' ( Identifier )? ';' | ';' -> ';' | statementExpression ';' -> statementExpression ';' | Identifier ':' statement -> Identifier ':' statement );", 115, 35, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("498:1: statement : ( block -> block | 'assert' expression ( ':' expression )? ';' -> 'assert' expression ( ':' expression )? ';' | 'if' parExpression statement ( options {k=1; } : 'else' statement )? -> 'if' parExpression statement ( 'else' statement )? | 'for' '(' forControl ')' statement -> 'for' '(' forControl ')' statement | 'while' parExpression statement -> 'while' parExpression statement | 'do' statement 'while' parExpression ';' -> 'do' statement 'while' parExpression ';' | 'try' block catches 'finally' block -> 'try' block catches 'finally' block | 'try' block catches -> 'try' block catches | 'try' 'finally' block -> 'try' 'finally' block | 'switch' parExpression '{' switchBlockStatementGroups '}' -> 'switch' parExpression '{' switchBlockStatementGroups '}' | 'synchronized' parExpression block -> 'synchronized' parExpression block | 'return' ( expression )? ';' -> 'return' ( expression )? ';' | 'throw' expression ';' -> 'throw' expression ';' | 'break' ( Identifier )? ';' -> 'break' ( Identifier )? ';' | 'continue' ( Identifier )? ';' -> 'continue' ( Identifier )? ';' | ';' -> ';' | statementExpression ';' -> statementExpression ';' | Identifier ':' statement -> Identifier ':' statement );", 115, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(115);}

            switch (alt115) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:499:4: block
                    {
                    dbg.location(499,4);
                    pushFollow(FOLLOW_block_in_statement3406);
                    block333=block();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_block.add(block333.getTree());
                    dbg.location(499,10);

                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 499:10: -> block
                    {
                        dbg.location(499,13);
                        adaptor.addChild(root_0, stream_block.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:500:7: 'assert' expression ( ':' expression )? ';'
                    {
                    dbg.location(500,7);
                    string_literal334=(Token)input.LT(1);
                    match(input,73,FOLLOW_73_in_statement3418); if (failed) return retval;
                    if ( backtracking==0 ) stream_73.add(string_literal334);

                    dbg.location(500,16);
                    pushFollow(FOLLOW_expression_in_statement3420);
                    expression335=expression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_expression.add(expression335.getTree());
                    dbg.location(500,27);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:500:27: ( ':' expression )?
                    int alt110=2;
                    try { dbg.enterSubRule(110);
                    try { dbg.enterDecision(110);

                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==74) ) {
                        alt110=1;
                    }
                    } finally {dbg.exitDecision(110);}

                    switch (alt110) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:500:28: ':' expression
                            {
                            dbg.location(500,28);
                            char_literal336=(Token)input.LT(1);
                            match(input,74,FOLLOW_74_in_statement3423); if (failed) return retval;
                            if ( backtracking==0 ) stream_74.add(char_literal336);

                            dbg.location(500,32);
                            pushFollow(FOLLOW_expression_in_statement3425);
                            expression337=expression();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_expression.add(expression337.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(110);}

                    dbg.location(500,45);
                    char_literal338=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_statement3429); if (failed) return retval;
                    if ( backtracking==0 ) stream_25.add(char_literal338);

                    dbg.location(500,49);

                    // AST REWRITE
                    // elements: expression, 74, 25, expression, 73
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 500:49: -> 'assert' expression ( ':' expression )? ';'
                    {
                        dbg.location(500,52);
                        adaptor.addChild(root_0, stream_73.next());
                        dbg.location(500,61);
                        adaptor.addChild(root_0, stream_expression.next());
                        dbg.location(500,72);
                        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:500:72: ( ':' expression )?
                        if ( stream_expression.hasNext()||stream_74.hasNext() ) {
                            dbg.location(500,73);
                            adaptor.addChild(root_0, stream_74.next());
                            dbg.location(500,77);
                            adaptor.addChild(root_0, stream_expression.next());

                        }
                        stream_expression.reset();
                        stream_74.reset();
                        dbg.location(500,90);
                        adaptor.addChild(root_0, stream_25.next());

                    }

                    }

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:501:7: 'if' parExpression statement ( options {k=1; } : 'else' statement )?
                    {
                    dbg.location(501,7);
                    string_literal339=(Token)input.LT(1);
                    match(input,75,FOLLOW_75_in_statement3452); if (failed) return retval;
                    if ( backtracking==0 ) stream_75.add(string_literal339);

                    dbg.location(501,12);
                    pushFollow(FOLLOW_parExpression_in_statement3454);
                    parExpression340=parExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_parExpression.add(parExpression340.getTree());
                    dbg.location(501,26);
                    pushFollow(FOLLOW_statement_in_statement3456);
                    statement341=statement();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_statement.add(statement341.getTree());
                    dbg.location(501,36);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:501:36: ( options {k=1; } : 'else' statement )?
                    int alt111=2;
                    try { dbg.enterSubRule(111);
                    try { dbg.enterDecision(111);

                    int LA111_0 = input.LA(1);

                    if ( (LA111_0==76) ) {
                        int LA111_1 = input.LA(2);

                        if ( (synpred151()) ) {
                            alt111=1;
                        }
                    }
                    } finally {dbg.exitDecision(111);}

                    switch (alt111) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:501:52: 'else' statement
                            {
                            dbg.location(501,52);
                            string_literal342=(Token)input.LT(1);
                            match(input,76,FOLLOW_76_in_statement3466); if (failed) return retval;
                            if ( backtracking==0 ) stream_76.add(string_literal342);

                            dbg.location(501,59);
                            pushFollow(FOLLOW_statement_in_statement3468);
                            statement343=statement();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_statement.add(statement343.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(111);}

                    dbg.location(501,71);

                    // AST REWRITE
                    // elements: 76, statement, parExpression, statement, 75
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 501:71: -> 'if' parExpression statement ( 'else' statement )?
                    {
                        dbg.location(501,74);
                        adaptor.addChild(root_0, stream_75.next());
                        dbg.location(501,79);
                        adaptor.addChild(root_0, stream_parExpression.next());
                        dbg.location(501,93);
                        adaptor.addChild(root_0, stream_statement.next());
                        dbg.location(501,103);
                        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:501:103: ( 'else' statement )?
                        if ( stream_76.hasNext()||stream_statement.hasNext() ) {
                            dbg.location(501,104);
                            adaptor.addChild(root_0, stream_76.next());
                            dbg.location(501,111);
                            adaptor.addChild(root_0, stream_statement.next());

                        }
                        stream_76.reset();
                        stream_statement.reset();

                    }

                    }

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:502:7: 'for' '(' forControl ')' statement
                    {
                    dbg.location(502,7);
                    string_literal344=(Token)input.LT(1);
                    match(input,77,FOLLOW_77_in_statement3493); if (failed) return retval;
                    if ( backtracking==0 ) stream_77.add(string_literal344);

                    dbg.location(502,13);
                    char_literal345=(Token)input.LT(1);
                    match(input,65,FOLLOW_65_in_statement3495); if (failed) return retval;
                    if ( backtracking==0 ) stream_65.add(char_literal345);

                    dbg.location(502,17);
                    pushFollow(FOLLOW_forControl_in_statement3497);
                    forControl346=forControl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_forControl.add(forControl346.getTree());
                    dbg.location(502,28);
                    char_literal347=(Token)input.LT(1);
                    match(input,66,FOLLOW_66_in_statement3499); if (failed) return retval;
                    if ( backtracking==0 ) stream_66.add(char_literal347);

                    dbg.location(502,32);
                    pushFollow(FOLLOW_statement_in_statement3501);
                    statement348=statement();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_statement.add(statement348.getTree());
                    dbg.location(502,42);

                    // AST REWRITE
                    // elements: statement, forControl, 77, 65, 66
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 502:42: -> 'for' '(' forControl ')' statement
                    {
                        dbg.location(502,45);
                        adaptor.addChild(root_0, stream_77.next());
                        dbg.location(502,51);
                        adaptor.addChild(root_0, stream_65.next());
                        dbg.location(502,55);
                        adaptor.addChild(root_0, stream_forControl.next());
                        dbg.location(502,66);
                        adaptor.addChild(root_0, stream_66.next());
                        dbg.location(502,70);
                        adaptor.addChild(root_0, stream_statement.next());

                    }

                    }

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:503:7: 'while' parExpression statement
                    {
                    dbg.location(503,7);
                    string_literal349=(Token)input.LT(1);
                    match(input,78,FOLLOW_78_in_statement3521); if (failed) return retval;
                    if ( backtracking==0 ) stream_78.add(string_literal349);

                    dbg.location(503,15);
                    pushFollow(FOLLOW_parExpression_in_statement3523);
                    parExpression350=parExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_parExpression.add(parExpression350.getTree());
                    dbg.location(503,29);
                    pushFollow(FOLLOW_statement_in_statement3525);
                    statement351=statement();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_statement.add(statement351.getTree());
                    dbg.location(503,39);

                    // AST REWRITE
                    // elements: parExpression, 78, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 503:39: -> 'while' parExpression statement
                    {
                        dbg.location(503,42);
                        adaptor.addChild(root_0, stream_78.next());
                        dbg.location(503,50);
                        adaptor.addChild(root_0, stream_parExpression.next());
                        dbg.location(503,64);
                        adaptor.addChild(root_0, stream_statement.next());

                    }

                    }

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:504:7: 'do' statement 'while' parExpression ';'
                    {
                    dbg.location(504,7);
                    string_literal352=(Token)input.LT(1);
                    match(input,79,FOLLOW_79_in_statement3541); if (failed) return retval;
                    if ( backtracking==0 ) stream_79.add(string_literal352);

                    dbg.location(504,12);
                    pushFollow(FOLLOW_statement_in_statement3543);
                    statement353=statement();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_statement.add(statement353.getTree());
                    dbg.location(504,22);
                    string_literal354=(Token)input.LT(1);
                    match(input,78,FOLLOW_78_in_statement3545); if (failed) return retval;
                    if ( backtracking==0 ) stream_78.add(string_literal354);

                    dbg.location(504,30);
                    pushFollow(FOLLOW_parExpression_in_statement3547);
                    parExpression355=parExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_parExpression.add(parExpression355.getTree());
                    dbg.location(504,44);
                    char_literal356=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_statement3549); if (failed) return retval;
                    if ( backtracking==0 ) stream_25.add(char_literal356);

                    dbg.location(504,48);

                    // AST REWRITE
                    // elements: 79, statement, 78, parExpression, 25
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 504:48: -> 'do' statement 'while' parExpression ';'
                    {
                        dbg.location(504,51);
                        adaptor.addChild(root_0, stream_79.next());
                        dbg.location(504,56);
                        adaptor.addChild(root_0, stream_statement.next());
                        dbg.location(504,66);
                        adaptor.addChild(root_0, stream_78.next());
                        dbg.location(504,74);
                        adaptor.addChild(root_0, stream_parExpression.next());
                        dbg.location(504,88);
                        adaptor.addChild(root_0, stream_25.next());

                    }

                    }

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:505:7: 'try' block catches 'finally' block
                    {
                    dbg.location(505,7);
                    string_literal357=(Token)input.LT(1);
                    match(input,80,FOLLOW_80_in_statement3569); if (failed) return retval;
                    if ( backtracking==0 ) stream_80.add(string_literal357);

                    dbg.location(505,13);
                    pushFollow(FOLLOW_block_in_statement3571);
                    block358=block();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_block.add(block358.getTree());
                    dbg.location(505,19);
                    pushFollow(FOLLOW_catches_in_statement3573);
                    catches359=catches();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_catches.add(catches359.getTree());
                    dbg.location(505,27);
                    string_literal360=(Token)input.LT(1);
                    match(input,81,FOLLOW_81_in_statement3575); if (failed) return retval;
                    if ( backtracking==0 ) stream_81.add(string_literal360);

                    dbg.location(505,37);
                    pushFollow(FOLLOW_block_in_statement3577);
                    block361=block();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_block.add(block361.getTree());
                    dbg.location(505,43);

                    // AST REWRITE
                    // elements: 81, 80, block, block, catches
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 505:43: -> 'try' block catches 'finally' block
                    {
                        dbg.location(505,46);
                        adaptor.addChild(root_0, stream_80.next());
                        dbg.location(505,52);
                        adaptor.addChild(root_0, stream_block.next());
                        dbg.location(505,58);
                        adaptor.addChild(root_0, stream_catches.next());
                        dbg.location(505,66);
                        adaptor.addChild(root_0, stream_81.next());
                        dbg.location(505,76);
                        adaptor.addChild(root_0, stream_block.next());

                    }

                    }

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:506:9: 'try' block catches
                    {
                    dbg.location(506,9);
                    string_literal362=(Token)input.LT(1);
                    match(input,80,FOLLOW_80_in_statement3599); if (failed) return retval;
                    if ( backtracking==0 ) stream_80.add(string_literal362);

                    dbg.location(506,15);
                    pushFollow(FOLLOW_block_in_statement3601);
                    block363=block();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_block.add(block363.getTree());
                    dbg.location(506,21);
                    pushFollow(FOLLOW_catches_in_statement3603);
                    catches364=catches();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_catches.add(catches364.getTree());
                    dbg.location(506,29);

                    // AST REWRITE
                    // elements: catches, 80, block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 506:29: -> 'try' block catches
                    {
                        dbg.location(506,32);
                        adaptor.addChild(root_0, stream_80.next());
                        dbg.location(506,38);
                        adaptor.addChild(root_0, stream_block.next());
                        dbg.location(506,44);
                        adaptor.addChild(root_0, stream_catches.next());

                    }

                    }

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:507:9: 'try' 'finally' block
                    {
                    dbg.location(507,9);
                    string_literal365=(Token)input.LT(1);
                    match(input,80,FOLLOW_80_in_statement3621); if (failed) return retval;
                    if ( backtracking==0 ) stream_80.add(string_literal365);

                    dbg.location(507,15);
                    string_literal366=(Token)input.LT(1);
                    match(input,81,FOLLOW_81_in_statement3623); if (failed) return retval;
                    if ( backtracking==0 ) stream_81.add(string_literal366);

                    dbg.location(507,25);
                    pushFollow(FOLLOW_block_in_statement3625);
                    block367=block();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_block.add(block367.getTree());
                    dbg.location(507,31);

                    // AST REWRITE
                    // elements: block, 81, 80
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 507:31: -> 'try' 'finally' block
                    {
                        dbg.location(507,34);
                        adaptor.addChild(root_0, stream_80.next());
                        dbg.location(507,40);
                        adaptor.addChild(root_0, stream_81.next());
                        dbg.location(507,50);
                        adaptor.addChild(root_0, stream_block.next());

                    }

                    }

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:508:7: 'switch' parExpression '{' switchBlockStatementGroups '}'
                    {
                    dbg.location(508,7);
                    string_literal368=(Token)input.LT(1);
                    match(input,82,FOLLOW_82_in_statement3641); if (failed) return retval;
                    if ( backtracking==0 ) stream_82.add(string_literal368);

                    dbg.location(508,16);
                    pushFollow(FOLLOW_parExpression_in_statement3643);
                    parExpression369=parExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_parExpression.add(parExpression369.getTree());
                    dbg.location(508,30);
                    char_literal370=(Token)input.LT(1);
                    match(input,37,FOLLOW_37_in_statement3645); if (failed) return retval;
                    if ( backtracking==0 ) stream_37.add(char_literal370);

                    dbg.location(508,34);
                    pushFollow(FOLLOW_switchBlockStatementGroups_in_statement3647);
                    switchBlockStatementGroups371=switchBlockStatementGroups();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_switchBlockStatementGroups.add(switchBlockStatementGroups371.getTree());
                    dbg.location(508,61);
                    char_literal372=(Token)input.LT(1);
                    match(input,38,FOLLOW_38_in_statement3649); if (failed) return retval;
                    if ( backtracking==0 ) stream_38.add(char_literal372);

                    dbg.location(508,65);

                    // AST REWRITE
                    // elements: 37, 82, switchBlockStatementGroups, 38, parExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 508:65: -> 'switch' parExpression '{' switchBlockStatementGroups '}'
                    {
                        dbg.location(508,68);
                        adaptor.addChild(root_0, stream_82.next());
                        dbg.location(508,77);
                        adaptor.addChild(root_0, stream_parExpression.next());
                        dbg.location(508,91);
                        adaptor.addChild(root_0, stream_37.next());
                        dbg.location(508,95);
                        adaptor.addChild(root_0, stream_switchBlockStatementGroups.next());
                        dbg.location(508,122);
                        adaptor.addChild(root_0, stream_38.next());

                    }

                    }

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:509:7: 'synchronized' parExpression block
                    {
                    dbg.location(509,7);
                    string_literal373=(Token)input.LT(1);
                    match(input,51,FOLLOW_51_in_statement3669); if (failed) return retval;
                    if ( backtracking==0 ) stream_51.add(string_literal373);

                    dbg.location(509,22);
                    pushFollow(FOLLOW_parExpression_in_statement3671);
                    parExpression374=parExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_parExpression.add(parExpression374.getTree());
                    dbg.location(509,36);
                    pushFollow(FOLLOW_block_in_statement3673);
                    block375=block();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_block.add(block375.getTree());
                    dbg.location(509,42);

                    // AST REWRITE
                    // elements: 51, parExpression, block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 509:42: -> 'synchronized' parExpression block
                    {
                        dbg.location(509,45);
                        adaptor.addChild(root_0, stream_51.next());
                        dbg.location(509,60);
                        adaptor.addChild(root_0, stream_parExpression.next());
                        dbg.location(509,74);
                        adaptor.addChild(root_0, stream_block.next());

                    }

                    }

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:510:7: 'return' ( expression )? ';'
                    {
                    dbg.location(510,7);
                    string_literal376=(Token)input.LT(1);
                    match(input,83,FOLLOW_83_in_statement3689); if (failed) return retval;
                    if ( backtracking==0 ) stream_83.add(string_literal376);

                    dbg.location(510,16);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:510:16: ( expression )?
                    int alt112=2;
                    try { dbg.enterSubRule(112);
                    try { dbg.enterDecision(112);

                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==Identifier||(LA112_0>=FloatingPointLiteral && LA112_0<=DecimalLiteral)||LA112_0==33||LA112_0==40||(LA112_0>=55 && LA112_0<=62)||(LA112_0>=64 && LA112_0<=65)||(LA112_0>=68 && LA112_0<=70)||(LA112_0>=104 && LA112_0<=105)||(LA112_0>=108 && LA112_0<=113)) ) {
                        alt112=1;
                    }
                    } finally {dbg.exitDecision(112);}

                    switch (alt112) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: expression
                            {
                            dbg.location(510,16);
                            pushFollow(FOLLOW_expression_in_statement3691);
                            expression377=expression();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_expression.add(expression377.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(112);}

                    dbg.location(510,28);
                    char_literal378=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_statement3694); if (failed) return retval;
                    if ( backtracking==0 ) stream_25.add(char_literal378);

                    dbg.location(510,32);

                    // AST REWRITE
                    // elements: 25, expression, 83
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 510:32: -> 'return' ( expression )? ';'
                    {
                        dbg.location(510,35);
                        adaptor.addChild(root_0, stream_83.next());
                        dbg.location(510,44);
                        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:510:44: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            dbg.location(510,44);
                            adaptor.addChild(root_0, stream_expression.next());

                        }
                        stream_expression.reset();
                        dbg.location(510,56);
                        adaptor.addChild(root_0, stream_25.next());

                    }

                    }

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:511:7: 'throw' expression ';'
                    {
                    dbg.location(511,7);
                    string_literal379=(Token)input.LT(1);
                    match(input,84,FOLLOW_84_in_statement3711); if (failed) return retval;
                    if ( backtracking==0 ) stream_84.add(string_literal379);

                    dbg.location(511,15);
                    pushFollow(FOLLOW_expression_in_statement3713);
                    expression380=expression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_expression.add(expression380.getTree());
                    dbg.location(511,26);
                    char_literal381=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_statement3715); if (failed) return retval;
                    if ( backtracking==0 ) stream_25.add(char_literal381);

                    dbg.location(511,30);

                    // AST REWRITE
                    // elements: expression, 84, 25
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 511:30: -> 'throw' expression ';'
                    {
                        dbg.location(511,33);
                        adaptor.addChild(root_0, stream_84.next());
                        dbg.location(511,41);
                        adaptor.addChild(root_0, stream_expression.next());
                        dbg.location(511,52);
                        adaptor.addChild(root_0, stream_25.next());

                    }

                    }

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:512:7: 'break' ( Identifier )? ';'
                    {
                    dbg.location(512,7);
                    string_literal382=(Token)input.LT(1);
                    match(input,85,FOLLOW_85_in_statement3731); if (failed) return retval;
                    if ( backtracking==0 ) stream_85.add(string_literal382);

                    dbg.location(512,15);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:512:15: ( Identifier )?
                    int alt113=2;
                    try { dbg.enterSubRule(113);
                    try { dbg.enterDecision(113);

                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==Identifier) ) {
                        alt113=1;
                    }
                    } finally {dbg.exitDecision(113);}

                    switch (alt113) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: Identifier
                            {
                            dbg.location(512,15);
                            Identifier383=(Token)input.LT(1);
                            match(input,Identifier,FOLLOW_Identifier_in_statement3733); if (failed) return retval;
                            if ( backtracking==0 ) stream_Identifier.add(Identifier383);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(113);}

                    dbg.location(512,27);
                    char_literal384=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_statement3736); if (failed) return retval;
                    if ( backtracking==0 ) stream_25.add(char_literal384);

                    dbg.location(512,31);

                    // AST REWRITE
                    // elements: Identifier, 85, 25
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 512:31: -> 'break' ( Identifier )? ';'
                    {
                        dbg.location(512,34);
                        adaptor.addChild(root_0, stream_85.next());
                        dbg.location(512,42);
                        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:512:42: ( Identifier )?
                        if ( stream_Identifier.hasNext() ) {
                            dbg.location(512,42);
                            adaptor.addChild(root_0, stream_Identifier.next());

                        }
                        stream_Identifier.reset();
                        dbg.location(512,54);
                        adaptor.addChild(root_0, stream_25.next());

                    }

                    }

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:513:7: 'continue' ( Identifier )? ';'
                    {
                    dbg.location(513,7);
                    string_literal385=(Token)input.LT(1);
                    match(input,86,FOLLOW_86_in_statement3753); if (failed) return retval;
                    if ( backtracking==0 ) stream_86.add(string_literal385);

                    dbg.location(513,18);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:513:18: ( Identifier )?
                    int alt114=2;
                    try { dbg.enterSubRule(114);
                    try { dbg.enterDecision(114);

                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==Identifier) ) {
                        alt114=1;
                    }
                    } finally {dbg.exitDecision(114);}

                    switch (alt114) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: Identifier
                            {
                            dbg.location(513,18);
                            Identifier386=(Token)input.LT(1);
                            match(input,Identifier,FOLLOW_Identifier_in_statement3755); if (failed) return retval;
                            if ( backtracking==0 ) stream_Identifier.add(Identifier386);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(114);}

                    dbg.location(513,30);
                    char_literal387=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_statement3758); if (failed) return retval;
                    if ( backtracking==0 ) stream_25.add(char_literal387);

                    dbg.location(513,34);

                    // AST REWRITE
                    // elements: 86, Identifier, 25
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 513:34: -> 'continue' ( Identifier )? ';'
                    {
                        dbg.location(513,37);
                        adaptor.addChild(root_0, stream_86.next());
                        dbg.location(513,48);
                        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:513:48: ( Identifier )?
                        if ( stream_Identifier.hasNext() ) {
                            dbg.location(513,48);
                            adaptor.addChild(root_0, stream_Identifier.next());

                        }
                        stream_Identifier.reset();
                        dbg.location(513,60);
                        adaptor.addChild(root_0, stream_25.next());

                    }

                    }

                    }
                    break;
                case 16 :
                    dbg.enterAlt(16);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:514:7: ';'
                    {
                    dbg.location(514,7);
                    char_literal388=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_statement3775); if (failed) return retval;
                    if ( backtracking==0 ) stream_25.add(char_literal388);

                    dbg.location(514,11);

                    // AST REWRITE
                    // elements: 25
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 514:11: -> ';'
                    {
                        dbg.location(514,14);
                        adaptor.addChild(root_0, stream_25.next());

                    }

                    }

                    }
                    break;
                case 17 :
                    dbg.enterAlt(17);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:515:7: statementExpression ';'
                    {
                    dbg.location(515,7);
                    pushFollow(FOLLOW_statementExpression_in_statement3787);
                    statementExpression389=statementExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_statementExpression.add(statementExpression389.getTree());
                    dbg.location(515,27);
                    char_literal390=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_statement3789); if (failed) return retval;
                    if ( backtracking==0 ) stream_25.add(char_literal390);

                    dbg.location(515,31);

                    // AST REWRITE
                    // elements: statementExpression, 25
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 515:31: -> statementExpression ';'
                    {
                        dbg.location(515,34);
                        adaptor.addChild(root_0, stream_statementExpression.next());
                        dbg.location(515,54);
                        adaptor.addChild(root_0, stream_25.next());

                    }

                    }

                    }
                    break;
                case 18 :
                    dbg.enterAlt(18);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:516:7: Identifier ':' statement
                    {
                    dbg.location(516,7);
                    Identifier391=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_statement3803); if (failed) return retval;
                    if ( backtracking==0 ) stream_Identifier.add(Identifier391);

                    dbg.location(516,18);
                    char_literal392=(Token)input.LT(1);
                    match(input,74,FOLLOW_74_in_statement3805); if (failed) return retval;
                    if ( backtracking==0 ) stream_74.add(char_literal392);

                    dbg.location(516,22);
                    pushFollow(FOLLOW_statement_in_statement3807);
                    statement393=statement();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_statement.add(statement393.getTree());
                    dbg.location(516,32);

                    // AST REWRITE
                    // elements: Identifier, statement, 74
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 516:32: -> Identifier ':' statement
                    {
                        dbg.location(516,35);
                        adaptor.addChild(root_0, stream_Identifier.next());
                        dbg.location(516,46);
                        adaptor.addChild(root_0, stream_74.next());
                        dbg.location(516,50);
                        adaptor.addChild(root_0, stream_statement.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 83, statement_StartIndex); }
        }
        dbg.location(517, 2);

        }
        finally {
            dbg.exitRule("statement");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end statement

    public static class catches_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start catches
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:519:1: catches : catchClause ( catchClause )* -> catchClause ( catchClause )* ;
    public final catches_return catches() throws RecognitionException {
        catches_return retval = new catches_return();
        retval.start = input.LT(1);
        int catches_StartIndex = input.index();
        Object root_0 = null;

        catchClause_return catchClause394 = null;

        catchClause_return catchClause395 = null;


        RewriteRuleSubtreeStream stream_catchClause=new RewriteRuleSubtreeStream(adaptor,"rule catchClause");
        try { dbg.enterRule("catches");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(519, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:520:2: ( catchClause ( catchClause )* -> catchClause ( catchClause )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:520:4: catchClause ( catchClause )*
            {
            dbg.location(520,4);
            pushFollow(FOLLOW_catchClause_in_catches3827);
            catchClause394=catchClause();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_catchClause.add(catchClause394.getTree());
            dbg.location(520,16);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:520:16: ( catchClause )*
            try { dbg.enterSubRule(116);

            loop116:
            do {
                int alt116=2;
                try { dbg.enterDecision(116);

                int LA116_0 = input.LA(1);

                if ( (LA116_0==87) ) {
                    alt116=1;
                }


                } finally {dbg.exitDecision(116);}

                switch (alt116) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:520:17: catchClause
            	    {
            	    dbg.location(520,17);
            	    pushFollow(FOLLOW_catchClause_in_catches3830);
            	    catchClause395=catchClause();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_catchClause.add(catchClause395.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);
            } finally {dbg.exitSubRule(116);}

            dbg.location(520,31);

            // AST REWRITE
            // elements: catchClause, catchClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 520:31: -> catchClause ( catchClause )*
            {
                dbg.location(520,34);
                adaptor.addChild(root_0, stream_catchClause.next());
                dbg.location(520,46);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:520:46: ( catchClause )*
                while ( stream_catchClause.hasNext() ) {
                    dbg.location(520,47);
                    adaptor.addChild(root_0, stream_catchClause.next());

                }
                stream_catchClause.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 84, catches_StartIndex); }
        }
        dbg.location(521, 2);

        }
        finally {
            dbg.exitRule("catches");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end catches

    public static class catchClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start catchClause
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:523:1: catchClause : 'catch' '(' formalParameter ')' block -> 'catch' '(' formalParameter ')' block ;
    public final catchClause_return catchClause() throws RecognitionException {
        catchClause_return retval = new catchClause_return();
        retval.start = input.LT(1);
        int catchClause_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal396=null;
        Token char_literal397=null;
        Token char_literal399=null;
        formalParameter_return formalParameter398 = null;

        block_return block400 = null;


        Object string_literal396_tree=null;
        Object char_literal397_tree=null;
        Object char_literal399_tree=null;
        RewriteRuleTokenStream stream_66=new RewriteRuleTokenStream(adaptor,"token 66");
        RewriteRuleTokenStream stream_65=new RewriteRuleTokenStream(adaptor,"token 65");
        RewriteRuleTokenStream stream_87=new RewriteRuleTokenStream(adaptor,"token 87");
        RewriteRuleSubtreeStream stream_formalParameter=new RewriteRuleSubtreeStream(adaptor,"rule formalParameter");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try { dbg.enterRule("catchClause");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(523, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:524:2: ( 'catch' '(' formalParameter ')' block -> 'catch' '(' formalParameter ')' block )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:524:4: 'catch' '(' formalParameter ')' block
            {
            dbg.location(524,4);
            string_literal396=(Token)input.LT(1);
            match(input,87,FOLLOW_87_in_catchClause3853); if (failed) return retval;
            if ( backtracking==0 ) stream_87.add(string_literal396);

            dbg.location(524,12);
            char_literal397=(Token)input.LT(1);
            match(input,65,FOLLOW_65_in_catchClause3855); if (failed) return retval;
            if ( backtracking==0 ) stream_65.add(char_literal397);

            dbg.location(524,16);
            pushFollow(FOLLOW_formalParameter_in_catchClause3857);
            formalParameter398=formalParameter();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_formalParameter.add(formalParameter398.getTree());
            dbg.location(524,32);
            char_literal399=(Token)input.LT(1);
            match(input,66,FOLLOW_66_in_catchClause3859); if (failed) return retval;
            if ( backtracking==0 ) stream_66.add(char_literal399);

            dbg.location(524,36);
            pushFollow(FOLLOW_block_in_catchClause3861);
            block400=block();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_block.add(block400.getTree());
            dbg.location(524,42);

            // AST REWRITE
            // elements: formalParameter, 65, 87, block, 66
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 524:42: -> 'catch' '(' formalParameter ')' block
            {
                dbg.location(524,45);
                adaptor.addChild(root_0, stream_87.next());
                dbg.location(524,53);
                adaptor.addChild(root_0, stream_65.next());
                dbg.location(524,57);
                adaptor.addChild(root_0, stream_formalParameter.next());
                dbg.location(524,73);
                adaptor.addChild(root_0, stream_66.next());
                dbg.location(524,77);
                adaptor.addChild(root_0, stream_block.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 85, catchClause_StartIndex); }
        }
        dbg.location(525, 2);

        }
        finally {
            dbg.exitRule("catchClause");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end catchClause

    public static class formalParameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start formalParameter
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:527:1: formalParameter : ( variableModifier )* type variableDeclaratorId -> ( variableModifier )* type variableDeclaratorId ;
    public final formalParameter_return formalParameter() throws RecognitionException {
        formalParameter_return retval = new formalParameter_return();
        retval.start = input.LT(1);
        int formalParameter_StartIndex = input.index();
        Object root_0 = null;

        variableModifier_return variableModifier401 = null;

        type_return type402 = null;

        variableDeclaratorId_return variableDeclaratorId403 = null;


        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_variableModifier=new RewriteRuleSubtreeStream(adaptor,"rule variableModifier");
        try { dbg.enterRule("formalParameter");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(527, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:528:2: ( ( variableModifier )* type variableDeclaratorId -> ( variableModifier )* type variableDeclaratorId )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:528:4: ( variableModifier )* type variableDeclaratorId
            {
            dbg.location(528,4);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:528:4: ( variableModifier )*
            try { dbg.enterSubRule(117);

            loop117:
            do {
                int alt117=2;
                try { dbg.enterDecision(117);

                int LA117_0 = input.LA(1);

                if ( (LA117_0==49||LA117_0==71) ) {
                    alt117=1;
                }


                } finally {dbg.exitDecision(117);}

                switch (alt117) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: variableModifier
            	    {
            	    dbg.location(528,4);
            	    pushFollow(FOLLOW_variableModifier_in_formalParameter3884);
            	    variableModifier401=variableModifier();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_variableModifier.add(variableModifier401.getTree());

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);
            } finally {dbg.exitSubRule(117);}

            dbg.location(528,22);
            pushFollow(FOLLOW_type_in_formalParameter3887);
            type402=type();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_type.add(type402.getTree());
            dbg.location(528,27);
            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameter3889);
            variableDeclaratorId403=variableDeclaratorId();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId403.getTree());
            dbg.location(528,48);

            // AST REWRITE
            // elements: variableDeclaratorId, variableModifier, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 528:48: -> ( variableModifier )* type variableDeclaratorId
            {
                dbg.location(528,51);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:528:51: ( variableModifier )*
                while ( stream_variableModifier.hasNext() ) {
                    dbg.location(528,51);
                    adaptor.addChild(root_0, stream_variableModifier.next());

                }
                stream_variableModifier.reset();
                dbg.location(528,69);
                adaptor.addChild(root_0, stream_type.next());
                dbg.location(528,74);
                adaptor.addChild(root_0, stream_variableDeclaratorId.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 86, formalParameter_StartIndex); }
        }
        dbg.location(529, 2);

        }
        finally {
            dbg.exitRule("formalParameter");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end formalParameter

    public static class switchBlockStatementGroups_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start switchBlockStatementGroups
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:531:1: switchBlockStatementGroups : ( switchBlockStatementGroup )* -> ( switchBlockStatementGroup )* ;
    public final switchBlockStatementGroups_return switchBlockStatementGroups() throws RecognitionException {
        switchBlockStatementGroups_return retval = new switchBlockStatementGroups_return();
        retval.start = input.LT(1);
        int switchBlockStatementGroups_StartIndex = input.index();
        Object root_0 = null;

        switchBlockStatementGroup_return switchBlockStatementGroup404 = null;


        RewriteRuleSubtreeStream stream_switchBlockStatementGroup=new RewriteRuleSubtreeStream(adaptor,"rule switchBlockStatementGroup");
        try { dbg.enterRule("switchBlockStatementGroups");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(531, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:532:2: ( ( switchBlockStatementGroup )* -> ( switchBlockStatementGroup )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:532:4: ( switchBlockStatementGroup )*
            {
            dbg.location(532,4);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:532:4: ( switchBlockStatementGroup )*
            try { dbg.enterSubRule(118);

            loop118:
            do {
                int alt118=2;
                try { dbg.enterDecision(118);

                int LA118_0 = input.LA(1);

                if ( (LA118_0==72||LA118_0==88) ) {
                    alt118=1;
                }


                } finally {dbg.exitDecision(118);}

                switch (alt118) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:532:5: switchBlockStatementGroup
            	    {
            	    dbg.location(532,5);
            	    pushFollow(FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups3912);
            	    switchBlockStatementGroup404=switchBlockStatementGroup();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_switchBlockStatementGroup.add(switchBlockStatementGroup404.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);
            } finally {dbg.exitSubRule(118);}

            dbg.location(532,33);

            // AST REWRITE
            // elements: switchBlockStatementGroup
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 532:33: -> ( switchBlockStatementGroup )*
            {
                dbg.location(532,36);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:532:36: ( switchBlockStatementGroup )*
                while ( stream_switchBlockStatementGroup.hasNext() ) {
                    dbg.location(532,37);
                    adaptor.addChild(root_0, stream_switchBlockStatementGroup.next());

                }
                stream_switchBlockStatementGroup.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 87, switchBlockStatementGroups_StartIndex); }
        }
        dbg.location(533, 2);

        }
        finally {
            dbg.exitRule("switchBlockStatementGroups");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end switchBlockStatementGroups

    public static class switchBlockStatementGroup_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start switchBlockStatementGroup
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:535:1: switchBlockStatementGroup : switchLabel ( blockStatement )* -> switchLabel ( blockStatement )* ;
    public final switchBlockStatementGroup_return switchBlockStatementGroup() throws RecognitionException {
        switchBlockStatementGroup_return retval = new switchBlockStatementGroup_return();
        retval.start = input.LT(1);
        int switchBlockStatementGroup_StartIndex = input.index();
        Object root_0 = null;

        switchLabel_return switchLabel405 = null;

        blockStatement_return blockStatement406 = null;


        RewriteRuleSubtreeStream stream_switchLabel=new RewriteRuleSubtreeStream(adaptor,"rule switchLabel");
        RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
        try { dbg.enterRule("switchBlockStatementGroup");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(535, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:536:2: ( switchLabel ( blockStatement )* -> switchLabel ( blockStatement )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:536:4: switchLabel ( blockStatement )*
            {
            dbg.location(536,4);
            pushFollow(FOLLOW_switchLabel_in_switchBlockStatementGroup3933);
            switchLabel405=switchLabel();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_switchLabel.add(switchLabel405.getTree());
            dbg.location(536,16);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:536:16: ( blockStatement )*
            try { dbg.enterSubRule(119);

            loop119:
            do {
                int alt119=2;
                try { dbg.enterDecision(119);

                int LA119_0 = input.LA(1);

                if ( ((LA119_0>=Identifier && LA119_0<=DecimalLiteral)||LA119_0==25||LA119_0==27||LA119_0==30||LA119_0==33||LA119_0==37||(LA119_0>=39 && LA119_0<=40)||(LA119_0>=45 && LA119_0<=62)||(LA119_0>=64 && LA119_0<=65)||(LA119_0>=68 && LA119_0<=71)||LA119_0==73||LA119_0==75||(LA119_0>=77 && LA119_0<=80)||(LA119_0>=82 && LA119_0<=86)||(LA119_0>=104 && LA119_0<=105)||(LA119_0>=108 && LA119_0<=113)) ) {
                    alt119=1;
                }


                } finally {dbg.exitDecision(119);}

                switch (alt119) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: blockStatement
            	    {
            	    dbg.location(536,16);
            	    pushFollow(FOLLOW_blockStatement_in_switchBlockStatementGroup3935);
            	    blockStatement406=blockStatement();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_blockStatement.add(blockStatement406.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);
            } finally {dbg.exitSubRule(119);}

            dbg.location(536,32);

            // AST REWRITE
            // elements: blockStatement, switchLabel
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 536:32: -> switchLabel ( blockStatement )*
            {
                dbg.location(536,35);
                adaptor.addChild(root_0, stream_switchLabel.next());
                dbg.location(536,47);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:536:47: ( blockStatement )*
                while ( stream_blockStatement.hasNext() ) {
                    dbg.location(536,47);
                    adaptor.addChild(root_0, stream_blockStatement.next());

                }
                stream_blockStatement.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 88, switchBlockStatementGroup_StartIndex); }
        }
        dbg.location(537, 2);

        }
        finally {
            dbg.exitRule("switchBlockStatementGroup");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end switchBlockStatementGroup

    public static class switchLabel_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start switchLabel
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:539:1: switchLabel : ( 'case' constantExpression ':' -> 'case' constantExpression ':' | 'case' enumConstantName ':' -> 'case' enumConstantName ':' | 'default' ':' -> 'default' ':' );
    public final switchLabel_return switchLabel() throws RecognitionException {
        switchLabel_return retval = new switchLabel_return();
        retval.start = input.LT(1);
        int switchLabel_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal407=null;
        Token char_literal409=null;
        Token string_literal410=null;
        Token char_literal412=null;
        Token string_literal413=null;
        Token char_literal414=null;
        constantExpression_return constantExpression408 = null;

        enumConstantName_return enumConstantName411 = null;


        Object string_literal407_tree=null;
        Object char_literal409_tree=null;
        Object string_literal410_tree=null;
        Object char_literal412_tree=null;
        Object string_literal413_tree=null;
        Object char_literal414_tree=null;
        RewriteRuleTokenStream stream_72=new RewriteRuleTokenStream(adaptor,"token 72");
        RewriteRuleTokenStream stream_74=new RewriteRuleTokenStream(adaptor,"token 74");
        RewriteRuleTokenStream stream_88=new RewriteRuleTokenStream(adaptor,"token 88");
        RewriteRuleSubtreeStream stream_constantExpression=new RewriteRuleSubtreeStream(adaptor,"rule constantExpression");
        RewriteRuleSubtreeStream stream_enumConstantName=new RewriteRuleSubtreeStream(adaptor,"rule enumConstantName");
        try { dbg.enterRule("switchLabel");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(539, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:540:2: ( 'case' constantExpression ':' -> 'case' constantExpression ':' | 'case' enumConstantName ':' -> 'case' enumConstantName ':' | 'default' ':' -> 'default' ':' )
            int alt120=3;
            try { dbg.enterDecision(120);

            int LA120_0 = input.LA(1);

            if ( (LA120_0==88) ) {
                int LA120_1 = input.LA(2);

                if ( (LA120_1==Identifier) ) {
                    int LA120_3 = input.LA(3);

                    if ( (synpred174()) ) {
                        alt120=1;
                    }
                    else if ( (synpred175()) ) {
                        alt120=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("539:1: switchLabel : ( 'case' constantExpression ':' -> 'case' constantExpression ':' | 'case' enumConstantName ':' -> 'case' enumConstantName ':' | 'default' ':' -> 'default' ':' );", 120, 3, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                }
                else if ( ((LA120_1>=FloatingPointLiteral && LA120_1<=DecimalLiteral)||LA120_1==33||LA120_1==40||(LA120_1>=55 && LA120_1<=62)||(LA120_1>=64 && LA120_1<=65)||(LA120_1>=68 && LA120_1<=70)||(LA120_1>=104 && LA120_1<=105)||(LA120_1>=108 && LA120_1<=113)) ) {
                    alt120=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("539:1: switchLabel : ( 'case' constantExpression ':' -> 'case' constantExpression ':' | 'case' enumConstantName ':' -> 'case' enumConstantName ':' | 'default' ':' -> 'default' ':' );", 120, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA120_0==72) ) {
                alt120=3;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("539:1: switchLabel : ( 'case' constantExpression ':' -> 'case' constantExpression ':' | 'case' enumConstantName ':' -> 'case' enumConstantName ':' | 'default' ':' -> 'default' ':' );", 120, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(120);}

            switch (alt120) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:540:4: 'case' constantExpression ':'
                    {
                    dbg.location(540,4);
                    string_literal407=(Token)input.LT(1);
                    match(input,88,FOLLOW_88_in_switchLabel3955); if (failed) return retval;
                    if ( backtracking==0 ) stream_88.add(string_literal407);

                    dbg.location(540,11);
                    pushFollow(FOLLOW_constantExpression_in_switchLabel3957);
                    constantExpression408=constantExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_constantExpression.add(constantExpression408.getTree());
                    dbg.location(540,30);
                    char_literal409=(Token)input.LT(1);
                    match(input,74,FOLLOW_74_in_switchLabel3959); if (failed) return retval;
                    if ( backtracking==0 ) stream_74.add(char_literal409);

                    dbg.location(540,34);

                    // AST REWRITE
                    // elements: 74, 88, constantExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 540:34: -> 'case' constantExpression ':'
                    {
                        dbg.location(540,37);
                        adaptor.addChild(root_0, stream_88.next());
                        dbg.location(540,44);
                        adaptor.addChild(root_0, stream_constantExpression.next());
                        dbg.location(540,63);
                        adaptor.addChild(root_0, stream_74.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:541:6: 'case' enumConstantName ':'
                    {
                    dbg.location(541,6);
                    string_literal410=(Token)input.LT(1);
                    match(input,88,FOLLOW_88_in_switchLabel3974); if (failed) return retval;
                    if ( backtracking==0 ) stream_88.add(string_literal410);

                    dbg.location(541,13);
                    pushFollow(FOLLOW_enumConstantName_in_switchLabel3976);
                    enumConstantName411=enumConstantName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_enumConstantName.add(enumConstantName411.getTree());
                    dbg.location(541,30);
                    char_literal412=(Token)input.LT(1);
                    match(input,74,FOLLOW_74_in_switchLabel3978); if (failed) return retval;
                    if ( backtracking==0 ) stream_74.add(char_literal412);

                    dbg.location(541,34);

                    // AST REWRITE
                    // elements: 74, enumConstantName, 88
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 541:34: -> 'case' enumConstantName ':'
                    {
                        dbg.location(541,37);
                        adaptor.addChild(root_0, stream_88.next());
                        dbg.location(541,44);
                        adaptor.addChild(root_0, stream_enumConstantName.next());
                        dbg.location(541,61);
                        adaptor.addChild(root_0, stream_74.next());

                    }

                    }

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:542:6: 'default' ':'
                    {
                    dbg.location(542,6);
                    string_literal413=(Token)input.LT(1);
                    match(input,72,FOLLOW_72_in_switchLabel3993); if (failed) return retval;
                    if ( backtracking==0 ) stream_72.add(string_literal413);

                    dbg.location(542,16);
                    char_literal414=(Token)input.LT(1);
                    match(input,74,FOLLOW_74_in_switchLabel3995); if (failed) return retval;
                    if ( backtracking==0 ) stream_74.add(char_literal414);

                    dbg.location(542,20);

                    // AST REWRITE
                    // elements: 72, 74
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 542:20: -> 'default' ':'
                    {
                        dbg.location(542,23);
                        adaptor.addChild(root_0, stream_72.next());
                        dbg.location(542,33);
                        adaptor.addChild(root_0, stream_74.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 89, switchLabel_StartIndex); }
        }
        dbg.location(543, 2);

        }
        finally {
            dbg.exitRule("switchLabel");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end switchLabel

    public static class moreStatementExpressions_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start moreStatementExpressions
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:545:1: moreStatementExpressions : ( ',' statementExpression )* -> ( ',' statementExpression )* ;
    public final moreStatementExpressions_return moreStatementExpressions() throws RecognitionException {
        moreStatementExpressions_return retval = new moreStatementExpressions_return();
        retval.start = input.LT(1);
        int moreStatementExpressions_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal415=null;
        statementExpression_return statementExpression416 = null;


        Object char_literal415_tree=null;
        RewriteRuleTokenStream stream_34=new RewriteRuleTokenStream(adaptor,"token 34");
        RewriteRuleSubtreeStream stream_statementExpression=new RewriteRuleSubtreeStream(adaptor,"rule statementExpression");
        try { dbg.enterRule("moreStatementExpressions");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(545, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:546:2: ( ( ',' statementExpression )* -> ( ',' statementExpression )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:546:4: ( ',' statementExpression )*
            {
            dbg.location(546,4);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:546:4: ( ',' statementExpression )*
            try { dbg.enterSubRule(121);

            loop121:
            do {
                int alt121=2;
                try { dbg.enterDecision(121);

                int LA121_0 = input.LA(1);

                if ( (LA121_0==34) ) {
                    alt121=1;
                }


                } finally {dbg.exitDecision(121);}

                switch (alt121) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:546:5: ',' statementExpression
            	    {
            	    dbg.location(546,5);
            	    char_literal415=(Token)input.LT(1);
            	    match(input,34,FOLLOW_34_in_moreStatementExpressions4014); if (failed) return retval;
            	    if ( backtracking==0 ) stream_34.add(char_literal415);

            	    dbg.location(546,9);
            	    pushFollow(FOLLOW_statementExpression_in_moreStatementExpressions4016);
            	    statementExpression416=statementExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_statementExpression.add(statementExpression416.getTree());

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);
            } finally {dbg.exitSubRule(121);}

            dbg.location(546,31);

            // AST REWRITE
            // elements: statementExpression, 34
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 546:31: -> ( ',' statementExpression )*
            {
                dbg.location(546,34);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:546:34: ( ',' statementExpression )*
                while ( stream_statementExpression.hasNext()||stream_34.hasNext() ) {
                    dbg.location(546,35);
                    adaptor.addChild(root_0, stream_34.next());
                    dbg.location(546,39);
                    adaptor.addChild(root_0, stream_statementExpression.next());

                }
                stream_statementExpression.reset();
                stream_34.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 90, moreStatementExpressions_StartIndex); }
        }
        dbg.location(547, 2);

        }
        finally {
            dbg.exitRule("moreStatementExpressions");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end moreStatementExpressions

    public static class forControl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start forControl
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );
    public final forControl_return forControl() throws RecognitionException {
        forControl_return retval = new forControl_return();
        retval.start = input.LT(1);
        int forControl_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal419=null;
        Token char_literal421=null;
        forVarControl_return forVarControl417 = null;

        forInit_return forInit418 = null;

        expression_return expression420 = null;

        forUpdate_return forUpdate422 = null;


        Object char_literal419_tree=null;
        Object char_literal421_tree=null;
        RewriteRuleTokenStream stream_25=new RewriteRuleTokenStream(adaptor,"token 25");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_forVarControl=new RewriteRuleSubtreeStream(adaptor,"rule forVarControl");
        RewriteRuleSubtreeStream stream_forInit=new RewriteRuleSubtreeStream(adaptor,"rule forInit");
        RewriteRuleSubtreeStream stream_forUpdate=new RewriteRuleSubtreeStream(adaptor,"rule forUpdate");
        try { dbg.enterRule("forControl");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(549, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:551:2: ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? )
            int alt125=2;
            try { dbg.enterDecision(125);

            switch ( input.LA(1) ) {
            case 49:
                {
                switch ( input.LA(2) ) {
                case Identifier:
                    {
                    switch ( input.LA(3) ) {
                    case 33:
                        {
                        int LA125_98 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 98, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 28:
                        {
                        int LA125_99 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 99, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 41:
                        {
                        int LA125_100 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 100, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case Identifier:
                        {
                        int LA125_101 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 101, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 34, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    }
                    break;
                case 55:
                    {
                    int LA125_35 = input.LA(3);

                    if ( (LA125_35==41) ) {
                        int LA125_102 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 102, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else if ( (LA125_35==Identifier) ) {
                        int LA125_103 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 103, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 35, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 56:
                    {
                    int LA125_36 = input.LA(3);

                    if ( (LA125_36==41) ) {
                        int LA125_104 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 104, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else if ( (LA125_36==Identifier) ) {
                        int LA125_105 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 105, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 36, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 57:
                    {
                    int LA125_37 = input.LA(3);

                    if ( (LA125_37==41) ) {
                        int LA125_106 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 106, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else if ( (LA125_37==Identifier) ) {
                        int LA125_107 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 107, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 37, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 58:
                    {
                    int LA125_38 = input.LA(3);

                    if ( (LA125_38==41) ) {
                        int LA125_108 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 108, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else if ( (LA125_38==Identifier) ) {
                        int LA125_109 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 109, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 38, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 59:
                    {
                    int LA125_39 = input.LA(3);

                    if ( (LA125_39==41) ) {
                        int LA125_110 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 110, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else if ( (LA125_39==Identifier) ) {
                        int LA125_111 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 111, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 39, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 60:
                    {
                    int LA125_40 = input.LA(3);

                    if ( (LA125_40==41) ) {
                        int LA125_112 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 112, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else if ( (LA125_40==Identifier) ) {
                        int LA125_113 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 113, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 40, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 61:
                    {
                    int LA125_41 = input.LA(3);

                    if ( (LA125_41==41) ) {
                        int LA125_114 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 114, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else if ( (LA125_41==Identifier) ) {
                        int LA125_115 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 115, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 41, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 62:
                    {
                    int LA125_42 = input.LA(3);

                    if ( (LA125_42==41) ) {
                        int LA125_116 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 116, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else if ( (LA125_42==Identifier) ) {
                        int LA125_117 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 117, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 42, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 49:
                    {
                    switch ( input.LA(3) ) {
                    case Identifier:
                        {
                        int LA125_118 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 118, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 55:
                        {
                        int LA125_119 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 119, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 56:
                        {
                        int LA125_120 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 120, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 57:
                        {
                        int LA125_121 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 121, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 58:
                        {
                        int LA125_122 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 122, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 59:
                        {
                        int LA125_123 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 123, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 60:
                        {
                        int LA125_124 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 124, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 61:
                        {
                        int LA125_125 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 125, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 62:
                        {
                        int LA125_126 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 126, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 49:
                        {
                        int LA125_127 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 127, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 71:
                        {
                        int LA125_128 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 128, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 43, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    }
                    break;
                case 71:
                    {
                    int LA125_44 = input.LA(3);

                    if ( (LA125_44==Identifier) ) {
                        int LA125_129 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 129, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 44, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 71:
                {
                int LA125_2 = input.LA(2);

                if ( (LA125_2==Identifier) ) {
                    switch ( input.LA(3) ) {
                    case 28:
                        {
                        int LA125_130 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 130, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 65:
                        {
                        int LA125_131 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 131, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case Identifier:
                        {
                        int LA125_132 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 132, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 55:
                        {
                        int LA125_133 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 133, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 56:
                        {
                        int LA125_134 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 134, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 57:
                        {
                        int LA125_135 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 135, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 58:
                        {
                        int LA125_136 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 136, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 59:
                        {
                        int LA125_137 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 137, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 60:
                        {
                        int LA125_138 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 138, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 61:
                        {
                        int LA125_139 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 139, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 62:
                        {
                        int LA125_140 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 140, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 49:
                        {
                        int LA125_141 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 141, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 71:
                        {
                        int LA125_142 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 142, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 45, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                }
                break;
            case Identifier:
                {
                switch ( input.LA(2) ) {
                case 33:
                    {
                    switch ( input.LA(3) ) {
                    case FloatingPointLiteral:
                    case CharacterLiteral:
                    case StringLiteral:
                    case HexLiteral:
                    case OctalLiteral:
                    case DecimalLiteral:
                    case 33:
                    case 40:
                    case 44:
                    case 64:
                    case 65:
                    case 68:
                    case 69:
                    case 70:
                    case 104:
                    case 105:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                        {
                        alt125=2;
                        }
                        break;
                    case Identifier:
                        {
                        int LA125_164 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 164, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 55:
                        {
                        int LA125_165 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 165, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 56:
                        {
                        int LA125_166 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 166, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 57:
                        {
                        int LA125_167 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 167, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 58:
                        {
                        int LA125_168 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 168, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 59:
                        {
                        int LA125_169 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 169, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 60:
                        {
                        int LA125_170 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 170, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 61:
                        {
                        int LA125_171 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 171, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 62:
                        {
                        int LA125_172 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 172, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 63:
                        {
                        int LA125_174 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 174, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 46, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    }
                    break;
                case 28:
                    {
                    int LA125_47 = input.LA(3);

                    if ( (LA125_47==Identifier) ) {
                        int LA125_175 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 175, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else if ( (LA125_47==30||LA125_47==33||LA125_47==64||(LA125_47>=112 && LA125_47<=113)) ) {
                        alt125=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 47, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 41:
                    {
                    int LA125_48 = input.LA(3);

                    if ( (LA125_48==42) ) {
                        int LA125_181 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 181, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else if ( (LA125_48==Identifier||(LA125_48>=FloatingPointLiteral && LA125_48<=DecimalLiteral)||LA125_48==33||LA125_48==40||(LA125_48>=55 && LA125_48<=62)||(LA125_48>=64 && LA125_48<=65)||(LA125_48>=68 && LA125_48<=70)||(LA125_48>=104 && LA125_48<=105)||(LA125_48>=108 && LA125_48<=113)) ) {
                        alt125=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 48, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    int LA125_49 = input.LA(3);

                    if ( (LA125_49==74) ) {
                        alt125=1;
                    }
                    else if ( (LA125_49==25||LA125_49==34||LA125_49==41||LA125_49==44) ) {
                        alt125=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 49, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 25:
                case 29:
                case 34:
                case 35:
                case 36:
                case 44:
                case 63:
                case 65:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                    {
                    alt125=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 3, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 55:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA125_74 = input.LA(3);

                    if ( (LA125_74==42) ) {
                        int LA125_217 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 217, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 74, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    int LA125_75 = input.LA(3);

                    if ( (LA125_75==74) ) {
                        alt125=1;
                    }
                    else if ( (LA125_75==25||LA125_75==34||LA125_75==41||LA125_75==44) ) {
                        alt125=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 75, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt125=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 4, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 56:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA125_77 = input.LA(3);

                    if ( (LA125_77==42) ) {
                        int LA125_223 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 223, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 77, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    int LA125_78 = input.LA(3);

                    if ( (LA125_78==74) ) {
                        alt125=1;
                    }
                    else if ( (LA125_78==25||LA125_78==34||LA125_78==41||LA125_78==44) ) {
                        alt125=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 78, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt125=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 5, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 57:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA125_80 = input.LA(3);

                    if ( (LA125_80==42) ) {
                        int LA125_229 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 229, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 80, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    int LA125_81 = input.LA(3);

                    if ( (LA125_81==74) ) {
                        alt125=1;
                    }
                    else if ( (LA125_81==25||LA125_81==34||LA125_81==41||LA125_81==44) ) {
                        alt125=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 81, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt125=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 6, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 58:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA125_83 = input.LA(3);

                    if ( (LA125_83==42) ) {
                        int LA125_235 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 235, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 83, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    int LA125_84 = input.LA(3);

                    if ( (LA125_84==74) ) {
                        alt125=1;
                    }
                    else if ( (LA125_84==25||LA125_84==34||LA125_84==41||LA125_84==44) ) {
                        alt125=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 84, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt125=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 7, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 59:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA125_86 = input.LA(3);

                    if ( (LA125_86==42) ) {
                        int LA125_241 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 241, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 86, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    int LA125_87 = input.LA(3);

                    if ( (LA125_87==74) ) {
                        alt125=1;
                    }
                    else if ( (LA125_87==25||LA125_87==34||LA125_87==41||LA125_87==44) ) {
                        alt125=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 87, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt125=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 8, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 60:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA125_89 = input.LA(3);

                    if ( (LA125_89==42) ) {
                        int LA125_247 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 247, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 89, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    int LA125_90 = input.LA(3);

                    if ( (LA125_90==74) ) {
                        alt125=1;
                    }
                    else if ( (LA125_90==25||LA125_90==34||LA125_90==41||LA125_90==44) ) {
                        alt125=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 90, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt125=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 9, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 61:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA125_92 = input.LA(3);

                    if ( (LA125_92==42) ) {
                        int LA125_253 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 253, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 92, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    int LA125_93 = input.LA(3);

                    if ( (LA125_93==74) ) {
                        alt125=1;
                    }
                    else if ( (LA125_93==25||LA125_93==34||LA125_93==41||LA125_93==44) ) {
                        alt125=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 93, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt125=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 10, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 62:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA125_95 = input.LA(3);

                    if ( (LA125_95==42) ) {
                        int LA125_259 = input.LA(4);

                        if ( (synpred177()) ) {
                            alt125=1;
                        }
                        else if ( (true) ) {
                            alt125=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 259, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 95, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    int LA125_96 = input.LA(3);

                    if ( (LA125_96==74) ) {
                        alt125=1;
                    }
                    else if ( (LA125_96==25||LA125_96==34||LA125_96==41||LA125_96==44) ) {
                        alt125=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 96, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt125=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 11, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case FloatingPointLiteral:
            case CharacterLiteral:
            case StringLiteral:
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
            case 25:
            case 33:
            case 40:
            case 64:
            case 65:
            case 68:
            case 69:
            case 70:
            case 104:
            case 105:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
                {
                alt125=2;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("549:1: forControl options {k=3; } : ( forVarControl -> forVarControl | ( forInit )? ';' ( expression )? ';' ( forUpdate )? -> ( forInit )? ';' ( expression )? ';' ( forUpdate )? );", 125, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(125);}

            switch (alt125) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:551:4: forVarControl
                    {
                    dbg.location(551,4);
                    pushFollow(FOLLOW_forVarControl_in_forControl4046);
                    forVarControl417=forVarControl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_forVarControl.add(forVarControl417.getTree());
                    dbg.location(551,18);

                    // AST REWRITE
                    // elements: forVarControl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 551:18: -> forVarControl
                    {
                        dbg.location(551,21);
                        adaptor.addChild(root_0, stream_forVarControl.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:552:4: ( forInit )? ';' ( expression )? ';' ( forUpdate )?
                    {
                    dbg.location(552,4);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:552:4: ( forInit )?
                    int alt122=2;
                    try { dbg.enterSubRule(122);
                    try { dbg.enterDecision(122);

                    int LA122_0 = input.LA(1);

                    if ( (LA122_0==Identifier||(LA122_0>=FloatingPointLiteral && LA122_0<=DecimalLiteral)||LA122_0==33||LA122_0==40||LA122_0==49||(LA122_0>=55 && LA122_0<=62)||(LA122_0>=64 && LA122_0<=65)||(LA122_0>=68 && LA122_0<=71)||(LA122_0>=104 && LA122_0<=105)||(LA122_0>=108 && LA122_0<=113)) ) {
                        alt122=1;
                    }
                    } finally {dbg.exitDecision(122);}

                    switch (alt122) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: forInit
                            {
                            dbg.location(552,4);
                            pushFollow(FOLLOW_forInit_in_forControl4055);
                            forInit418=forInit();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_forInit.add(forInit418.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(122);}

                    dbg.location(552,13);
                    char_literal419=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_forControl4058); if (failed) return retval;
                    if ( backtracking==0 ) stream_25.add(char_literal419);

                    dbg.location(552,17);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:552:17: ( expression )?
                    int alt123=2;
                    try { dbg.enterSubRule(123);
                    try { dbg.enterDecision(123);

                    int LA123_0 = input.LA(1);

                    if ( (LA123_0==Identifier||(LA123_0>=FloatingPointLiteral && LA123_0<=DecimalLiteral)||LA123_0==33||LA123_0==40||(LA123_0>=55 && LA123_0<=62)||(LA123_0>=64 && LA123_0<=65)||(LA123_0>=68 && LA123_0<=70)||(LA123_0>=104 && LA123_0<=105)||(LA123_0>=108 && LA123_0<=113)) ) {
                        alt123=1;
                    }
                    } finally {dbg.exitDecision(123);}

                    switch (alt123) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: expression
                            {
                            dbg.location(552,17);
                            pushFollow(FOLLOW_expression_in_forControl4060);
                            expression420=expression();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_expression.add(expression420.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(123);}

                    dbg.location(552,29);
                    char_literal421=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_forControl4063); if (failed) return retval;
                    if ( backtracking==0 ) stream_25.add(char_literal421);

                    dbg.location(552,33);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:552:33: ( forUpdate )?
                    int alt124=2;
                    try { dbg.enterSubRule(124);
                    try { dbg.enterDecision(124);

                    int LA124_0 = input.LA(1);

                    if ( (LA124_0==Identifier||(LA124_0>=FloatingPointLiteral && LA124_0<=DecimalLiteral)||LA124_0==33||LA124_0==40||(LA124_0>=55 && LA124_0<=62)||(LA124_0>=64 && LA124_0<=65)||(LA124_0>=68 && LA124_0<=70)||(LA124_0>=104 && LA124_0<=105)||(LA124_0>=108 && LA124_0<=113)) ) {
                        alt124=1;
                    }
                    } finally {dbg.exitDecision(124);}

                    switch (alt124) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: forUpdate
                            {
                            dbg.location(552,33);
                            pushFollow(FOLLOW_forUpdate_in_forControl4065);
                            forUpdate422=forUpdate();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_forUpdate.add(forUpdate422.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(124);}

                    dbg.location(552,44);

                    // AST REWRITE
                    // elements: 25, forUpdate, 25, expression, forInit
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 552:44: -> ( forInit )? ';' ( expression )? ';' ( forUpdate )?
                    {
                        dbg.location(552,47);
                        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:552:47: ( forInit )?
                        if ( stream_forInit.hasNext() ) {
                            dbg.location(552,47);
                            adaptor.addChild(root_0, stream_forInit.next());

                        }
                        stream_forInit.reset();
                        dbg.location(552,56);
                        adaptor.addChild(root_0, stream_25.next());
                        dbg.location(552,60);
                        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:552:60: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            dbg.location(552,60);
                            adaptor.addChild(root_0, stream_expression.next());

                        }
                        stream_expression.reset();
                        dbg.location(552,72);
                        adaptor.addChild(root_0, stream_25.next());
                        dbg.location(552,76);
                        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:552:76: ( forUpdate )?
                        if ( stream_forUpdate.hasNext() ) {
                            dbg.location(552,76);
                            adaptor.addChild(root_0, stream_forUpdate.next());

                        }
                        stream_forUpdate.reset();

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 91, forControl_StartIndex); }
        }
        dbg.location(553, 2);

        }
        finally {
            dbg.exitRule("forControl");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end forControl

    public static class forInit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start forInit
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:555:1: forInit : ( ( variableModifier )* type variableDeclarators -> ( variableModifier )* type variableDeclarators | expressionList -> expressionList );
    public final forInit_return forInit() throws RecognitionException {
        forInit_return retval = new forInit_return();
        retval.start = input.LT(1);
        int forInit_StartIndex = input.index();
        Object root_0 = null;

        variableModifier_return variableModifier423 = null;

        type_return type424 = null;

        variableDeclarators_return variableDeclarators425 = null;

        expressionList_return expressionList426 = null;


        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_variableDeclarators=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarators");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_variableModifier=new RewriteRuleSubtreeStream(adaptor,"rule variableModifier");
        try { dbg.enterRule("forInit");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(555, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:556:2: ( ( variableModifier )* type variableDeclarators -> ( variableModifier )* type variableDeclarators | expressionList -> expressionList )
            int alt127=2;
            try { dbg.enterDecision(127);

            switch ( input.LA(1) ) {
            case 49:
            case 71:
                {
                alt127=1;
                }
                break;
            case Identifier:
                {
                switch ( input.LA(2) ) {
                case 33:
                    {
                    int LA127_33 = input.LA(3);

                    if ( (synpred182()) ) {
                        alt127=1;
                    }
                    else if ( (true) ) {
                        alt127=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("555:1: forInit : ( ( variableModifier )* type variableDeclarators -> ( variableModifier )* type variableDeclarators | expressionList -> expressionList );", 127, 33, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    int LA127_34 = input.LA(3);

                    if ( (synpred182()) ) {
                        alt127=1;
                    }
                    else if ( (true) ) {
                        alt127=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("555:1: forInit : ( ( variableModifier )* type variableDeclarators -> ( variableModifier )* type variableDeclarators | expressionList -> expressionList );", 127, 34, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 41:
                    {
                    int LA127_35 = input.LA(3);

                    if ( (synpred182()) ) {
                        alt127=1;
                    }
                    else if ( (true) ) {
                        alt127=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("555:1: forInit : ( ( variableModifier )* type variableDeclarators -> ( variableModifier )* type variableDeclarators | expressionList -> expressionList );", 127, 35, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    alt127=1;
                    }
                    break;
                case EOF:
                case 25:
                case 29:
                case 34:
                case 35:
                case 36:
                case 44:
                case 63:
                case 65:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                    {
                    alt127=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("555:1: forInit : ( ( variableModifier )* type variableDeclarators -> ( variableModifier )* type variableDeclarators | expressionList -> expressionList );", 127, 3, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 55:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA127_62 = input.LA(3);

                    if ( (synpred182()) ) {
                        alt127=1;
                    }
                    else if ( (true) ) {
                        alt127=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("555:1: forInit : ( ( variableModifier )* type variableDeclarators -> ( variableModifier )* type variableDeclarators | expressionList -> expressionList );", 127, 62, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    alt127=1;
                    }
                    break;
                case 28:
                    {
                    alt127=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("555:1: forInit : ( ( variableModifier )* type variableDeclarators -> ( variableModifier )* type variableDeclarators | expressionList -> expressionList );", 127, 4, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 56:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA127_65 = input.LA(3);

                    if ( (synpred182()) ) {
                        alt127=1;
                    }
                    else if ( (true) ) {
                        alt127=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("555:1: forInit : ( ( variableModifier )* type variableDeclarators -> ( variableModifier )* type variableDeclarators | expressionList -> expressionList );", 127, 65, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt127=2;
                    }
                    break;
                case Identifier:
                    {
                    alt127=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("555:1: forInit : ( ( variableModifier )* type variableDeclarators -> ( variableModifier )* type variableDeclarators | expressionList -> expressionList );", 127, 5, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 57:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA127_68 = input.LA(3);

                    if ( (synpred182()) ) {
                        alt127=1;
                    }
                    else if ( (true) ) {
                        alt127=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("555:1: forInit : ( ( variableModifier )* type variableDeclarators -> ( variableModifier )* type variableDeclarators | expressionList -> expressionList );", 127, 68, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt127=2;
                    }
                    break;
                case Identifier:
                    {
                    alt127=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("555:1: forInit : ( ( variableModifier )* type variableDeclarators -> ( variableModifier )* type variableDeclarators | expressionList -> expressionList );", 127, 6, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 58:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA127_71 = input.LA(3);

                    if ( (synpred182()) ) {
                        alt127=1;
                    }
                    else if ( (true) ) {
                        alt127=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("555:1: forInit : ( ( variableModifier )* type variableDeclarators -> ( variableModifier )* type variableDeclarators | expressionList -> expressionList );", 127, 71, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    alt127=1;
                    }
                    break;
                case 28:
                    {
                    alt127=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("555:1: forInit : ( ( variableModifier )* type variableDeclarators -> ( variableModifier )* type variableDeclarators | expressionList -> expressionList );", 127, 7, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 59:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA127_74 = input.LA(3);

                    if ( (synpred182()) ) {
                        alt127=1;
                    }
                    else if ( (true) ) {
                        alt127=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("555:1: forInit : ( ( variableModifier )* type variableDeclarators -> ( variableModifier )* type variableDeclarators | expressionList -> expressionList );", 127, 74, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                    {
                    alt127=1;
                    }
                    break;
                case 28:
                    {
                    alt127=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("555:1: forInit : ( ( variableModifier )* type variableDeclarators -> ( variableModifier )* type variableDeclarators | expressionList -> expressionList );", 127, 8, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 60:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA127_77 = input.LA(3);

                    if ( (synpred182()) ) {
                        alt127=1;
                    }
                    else if ( (true) ) {
                        alt127=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("555:1: forInit : ( ( variableModifier )* type variableDeclarators -> ( variableModifier )* type variableDeclarators | expressionList -> expressionList );", 127, 77, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt127=2;
                    }
                    break;
                case Identifier:
                    {
                    alt127=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("555:1: forInit : ( ( variableModifier )* type variableDeclarators -> ( variableModifier )* type variableDeclarators | expressionList -> expressionList );", 127, 9, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 61:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA127_80 = input.LA(3);

                    if ( (synpred182()) ) {
                        alt127=1;
                    }
                    else if ( (true) ) {
                        alt127=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("555:1: forInit : ( ( variableModifier )* type variableDeclarators -> ( variableModifier )* type variableDeclarators | expressionList -> expressionList );", 127, 80, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt127=2;
                    }
                    break;
                case Identifier:
                    {
                    alt127=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("555:1: forInit : ( ( variableModifier )* type variableDeclarators -> ( variableModifier )* type variableDeclarators | expressionList -> expressionList );", 127, 10, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 62:
                {
                switch ( input.LA(2) ) {
                case 41:
                    {
                    int LA127_83 = input.LA(3);

                    if ( (synpred182()) ) {
                        alt127=1;
                    }
                    else if ( (true) ) {
                        alt127=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("555:1: forInit : ( ( variableModifier )* type variableDeclarators -> ( variableModifier )* type variableDeclarators | expressionList -> expressionList );", 127, 83, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 28:
                    {
                    alt127=2;
                    }
                    break;
                case Identifier:
                    {
                    alt127=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("555:1: forInit : ( ( variableModifier )* type variableDeclarators -> ( variableModifier )* type variableDeclarators | expressionList -> expressionList );", 127, 11, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case FloatingPointLiteral:
            case CharacterLiteral:
            case StringLiteral:
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
            case 33:
            case 40:
            case 64:
            case 65:
            case 68:
            case 69:
            case 70:
            case 104:
            case 105:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
                {
                alt127=2;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("555:1: forInit : ( ( variableModifier )* type variableDeclarators -> ( variableModifier )* type variableDeclarators | expressionList -> expressionList );", 127, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(127);}

            switch (alt127) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:556:4: ( variableModifier )* type variableDeclarators
                    {
                    dbg.location(556,4);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:556:4: ( variableModifier )*
                    try { dbg.enterSubRule(126);

                    loop126:
                    do {
                        int alt126=2;
                        try { dbg.enterDecision(126);

                        int LA126_0 = input.LA(1);

                        if ( (LA126_0==49||LA126_0==71) ) {
                            alt126=1;
                        }


                        } finally {dbg.exitDecision(126);}

                        switch (alt126) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: variableModifier
                    	    {
                    	    dbg.location(556,4);
                    	    pushFollow(FOLLOW_variableModifier_in_forInit4092);
                    	    variableModifier423=variableModifier();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_variableModifier.add(variableModifier423.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop126;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(126);}

                    dbg.location(556,22);
                    pushFollow(FOLLOW_type_in_forInit4095);
                    type424=type();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_type.add(type424.getTree());
                    dbg.location(556,27);
                    pushFollow(FOLLOW_variableDeclarators_in_forInit4097);
                    variableDeclarators425=variableDeclarators();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_variableDeclarators.add(variableDeclarators425.getTree());
                    dbg.location(556,47);

                    // AST REWRITE
                    // elements: variableDeclarators, type, variableModifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 556:47: -> ( variableModifier )* type variableDeclarators
                    {
                        dbg.location(556,50);
                        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:556:50: ( variableModifier )*
                        while ( stream_variableModifier.hasNext() ) {
                            dbg.location(556,50);
                            adaptor.addChild(root_0, stream_variableModifier.next());

                        }
                        stream_variableModifier.reset();
                        dbg.location(556,68);
                        adaptor.addChild(root_0, stream_type.next());
                        dbg.location(556,73);
                        adaptor.addChild(root_0, stream_variableDeclarators.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:557:4: expressionList
                    {
                    dbg.location(557,4);
                    pushFollow(FOLLOW_expressionList_in_forInit4111);
                    expressionList426=expressionList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_expressionList.add(expressionList426.getTree());
                    dbg.location(557,19);

                    // AST REWRITE
                    // elements: expressionList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 557:19: -> expressionList
                    {
                        dbg.location(557,22);
                        adaptor.addChild(root_0, stream_expressionList.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 92, forInit_StartIndex); }
        }
        dbg.location(558, 2);

        }
        finally {
            dbg.exitRule("forInit");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end forInit

    public static class forVarControl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start forVarControl
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:560:1: forVarControl : ( variableModifier )* type Identifier ':' expression -> ( variableModifier )* type Identifier ':' expression ;
    public final forVarControl_return forVarControl() throws RecognitionException {
        forVarControl_return retval = new forVarControl_return();
        retval.start = input.LT(1);
        int forVarControl_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier429=null;
        Token char_literal430=null;
        variableModifier_return variableModifier427 = null;

        type_return type428 = null;

        expression_return expression431 = null;


        Object Identifier429_tree=null;
        Object char_literal430_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_74=new RewriteRuleTokenStream(adaptor,"token 74");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_variableModifier=new RewriteRuleSubtreeStream(adaptor,"rule variableModifier");
        try { dbg.enterRule("forVarControl");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(560, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:561:2: ( ( variableModifier )* type Identifier ':' expression -> ( variableModifier )* type Identifier ':' expression )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:561:4: ( variableModifier )* type Identifier ':' expression
            {
            dbg.location(561,4);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:561:4: ( variableModifier )*
            try { dbg.enterSubRule(128);

            loop128:
            do {
                int alt128=2;
                try { dbg.enterDecision(128);

                int LA128_0 = input.LA(1);

                if ( (LA128_0==49||LA128_0==71) ) {
                    alt128=1;
                }


                } finally {dbg.exitDecision(128);}

                switch (alt128) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: variableModifier
            	    {
            	    dbg.location(561,4);
            	    pushFollow(FOLLOW_variableModifier_in_forVarControl4127);
            	    variableModifier427=variableModifier();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_variableModifier.add(variableModifier427.getTree());

            	    }
            	    break;

            	default :
            	    break loop128;
                }
            } while (true);
            } finally {dbg.exitSubRule(128);}

            dbg.location(561,22);
            pushFollow(FOLLOW_type_in_forVarControl4130);
            type428=type();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_type.add(type428.getTree());
            dbg.location(561,27);
            Identifier429=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_forVarControl4132); if (failed) return retval;
            if ( backtracking==0 ) stream_Identifier.add(Identifier429);

            dbg.location(561,38);
            char_literal430=(Token)input.LT(1);
            match(input,74,FOLLOW_74_in_forVarControl4134); if (failed) return retval;
            if ( backtracking==0 ) stream_74.add(char_literal430);

            dbg.location(561,42);
            pushFollow(FOLLOW_expression_in_forVarControl4136);
            expression431=expression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_expression.add(expression431.getTree());
            dbg.location(561,53);

            // AST REWRITE
            // elements: expression, 74, Identifier, variableModifier, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 561:53: -> ( variableModifier )* type Identifier ':' expression
            {
                dbg.location(561,56);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:561:56: ( variableModifier )*
                while ( stream_variableModifier.hasNext() ) {
                    dbg.location(561,56);
                    adaptor.addChild(root_0, stream_variableModifier.next());

                }
                stream_variableModifier.reset();
                dbg.location(561,74);
                adaptor.addChild(root_0, stream_type.next());
                dbg.location(561,79);
                adaptor.addChild(root_0, stream_Identifier.next());
                dbg.location(561,90);
                adaptor.addChild(root_0, stream_74.next());
                dbg.location(561,94);
                adaptor.addChild(root_0, stream_expression.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 93, forVarControl_StartIndex); }
        }
        dbg.location(562, 2);

        }
        finally {
            dbg.exitRule("forVarControl");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end forVarControl

    public static class forUpdate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start forUpdate
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:564:1: forUpdate : expressionList -> expressionList ;
    public final forUpdate_return forUpdate() throws RecognitionException {
        forUpdate_return retval = new forUpdate_return();
        retval.start = input.LT(1);
        int forUpdate_StartIndex = input.index();
        Object root_0 = null;

        expressionList_return expressionList432 = null;


        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try { dbg.enterRule("forUpdate");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(564, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:565:2: ( expressionList -> expressionList )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:565:4: expressionList
            {
            dbg.location(565,4);
            pushFollow(FOLLOW_expressionList_in_forUpdate4160);
            expressionList432=expressionList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_expressionList.add(expressionList432.getTree());
            dbg.location(565,19);

            // AST REWRITE
            // elements: expressionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 565:19: -> expressionList
            {
                dbg.location(565,22);
                adaptor.addChild(root_0, stream_expressionList.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 94, forUpdate_StartIndex); }
        }
        dbg.location(566, 2);

        }
        finally {
            dbg.exitRule("forUpdate");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end forUpdate

    public static class parExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start parExpression
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:570:1: parExpression : '(' expression ')' -> '(' expression ')' ;
    public final parExpression_return parExpression() throws RecognitionException {
        parExpression_return retval = new parExpression_return();
        retval.start = input.LT(1);
        int parExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal433=null;
        Token char_literal435=null;
        expression_return expression434 = null;


        Object char_literal433_tree=null;
        Object char_literal435_tree=null;
        RewriteRuleTokenStream stream_66=new RewriteRuleTokenStream(adaptor,"token 66");
        RewriteRuleTokenStream stream_65=new RewriteRuleTokenStream(adaptor,"token 65");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try { dbg.enterRule("parExpression");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(570, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:571:2: ( '(' expression ')' -> '(' expression ')' )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:571:4: '(' expression ')'
            {
            dbg.location(571,4);
            char_literal433=(Token)input.LT(1);
            match(input,65,FOLLOW_65_in_parExpression4177); if (failed) return retval;
            if ( backtracking==0 ) stream_65.add(char_literal433);

            dbg.location(571,8);
            pushFollow(FOLLOW_expression_in_parExpression4179);
            expression434=expression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_expression.add(expression434.getTree());
            dbg.location(571,19);
            char_literal435=(Token)input.LT(1);
            match(input,66,FOLLOW_66_in_parExpression4181); if (failed) return retval;
            if ( backtracking==0 ) stream_66.add(char_literal435);

            dbg.location(571,23);

            // AST REWRITE
            // elements: 66, expression, 65
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 571:23: -> '(' expression ')'
            {
                dbg.location(571,26);
                adaptor.addChild(root_0, stream_65.next());
                dbg.location(571,30);
                adaptor.addChild(root_0, stream_expression.next());
                dbg.location(571,41);
                adaptor.addChild(root_0, stream_66.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 95, parExpression_StartIndex); }
        }
        dbg.location(572, 2);

        }
        finally {
            dbg.exitRule("parExpression");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end parExpression

    public static class expressionList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start expressionList
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:574:1: expressionList : expression ( ',' expression )* -> expression ( ',' expression )* ;
    public final expressionList_return expressionList() throws RecognitionException {
        expressionList_return retval = new expressionList_return();
        retval.start = input.LT(1);
        int expressionList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal437=null;
        expression_return expression436 = null;

        expression_return expression438 = null;


        Object char_literal437_tree=null;
        RewriteRuleTokenStream stream_34=new RewriteRuleTokenStream(adaptor,"token 34");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try { dbg.enterRule("expressionList");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(574, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:575:5: ( expression ( ',' expression )* -> expression ( ',' expression )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:575:9: expression ( ',' expression )*
            {
            dbg.location(575,9);
            pushFollow(FOLLOW_expression_in_expressionList4206);
            expression436=expression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_expression.add(expression436.getTree());
            dbg.location(575,20);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:575:20: ( ',' expression )*
            try { dbg.enterSubRule(129);

            loop129:
            do {
                int alt129=2;
                try { dbg.enterDecision(129);

                int LA129_0 = input.LA(1);

                if ( (LA129_0==34) ) {
                    alt129=1;
                }


                } finally {dbg.exitDecision(129);}

                switch (alt129) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:575:21: ',' expression
            	    {
            	    dbg.location(575,21);
            	    char_literal437=(Token)input.LT(1);
            	    match(input,34,FOLLOW_34_in_expressionList4209); if (failed) return retval;
            	    if ( backtracking==0 ) stream_34.add(char_literal437);

            	    dbg.location(575,25);
            	    pushFollow(FOLLOW_expression_in_expressionList4211);
            	    expression438=expression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_expression.add(expression438.getTree());

            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);
            } finally {dbg.exitSubRule(129);}

            dbg.location(575,38);

            // AST REWRITE
            // elements: expression, expression, 34
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 575:38: -> expression ( ',' expression )*
            {
                dbg.location(575,41);
                adaptor.addChild(root_0, stream_expression.next());
                dbg.location(575,52);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:575:52: ( ',' expression )*
                while ( stream_expression.hasNext()||stream_34.hasNext() ) {
                    dbg.location(575,53);
                    adaptor.addChild(root_0, stream_34.next());
                    dbg.location(575,57);
                    adaptor.addChild(root_0, stream_expression.next());

                }
                stream_expression.reset();
                stream_34.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 96, expressionList_StartIndex); }
        }
        dbg.location(576, 5);

        }
        finally {
            dbg.exitRule("expressionList");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end expressionList

    public static class statementExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start statementExpression
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:578:1: statementExpression : expression -> expression ;
    public final statementExpression_return statementExpression() throws RecognitionException {
        statementExpression_return retval = new statementExpression_return();
        retval.start = input.LT(1);
        int statementExpression_StartIndex = input.index();
        Object root_0 = null;

        expression_return expression439 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try { dbg.enterRule("statementExpression");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(578, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:579:2: ( expression -> expression )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:579:4: expression
            {
            dbg.location(579,4);
            pushFollow(FOLLOW_expression_in_statementExpression4238);
            expression439=expression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_expression.add(expression439.getTree());
            dbg.location(579,15);

            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 579:15: -> expression
            {
                dbg.location(579,18);
                adaptor.addChild(root_0, stream_expression.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 97, statementExpression_StartIndex); }
        }
        dbg.location(580, 2);

        }
        finally {
            dbg.exitRule("statementExpression");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end statementExpression

    public static class constantExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start constantExpression
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:582:1: constantExpression : expression -> expression ;
    public final constantExpression_return constantExpression() throws RecognitionException {
        constantExpression_return retval = new constantExpression_return();
        retval.start = input.LT(1);
        int constantExpression_StartIndex = input.index();
        Object root_0 = null;

        expression_return expression440 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try { dbg.enterRule("constantExpression");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(582, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:583:2: ( expression -> expression )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:583:4: expression
            {
            dbg.location(583,4);
            pushFollow(FOLLOW_expression_in_constantExpression4254);
            expression440=expression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_expression.add(expression440.getTree());
            dbg.location(583,15);

            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 583:15: -> expression
            {
                dbg.location(583,18);
                adaptor.addChild(root_0, stream_expression.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 98, constantExpression_StartIndex); }
        }
        dbg.location(584, 2);

        }
        finally {
            dbg.exitRule("constantExpression");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end constantExpression

    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start expression
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:586:1: expression : conditionalExpression ( assignmentOperator expression )? -> conditionalExpression ( assignmentOperator expression )? ;
    public final expression_return expression() throws RecognitionException {
        expression_return retval = new expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        Object root_0 = null;

        conditionalExpression_return conditionalExpression441 = null;

        assignmentOperator_return assignmentOperator442 = null;

        expression_return expression443 = null;


        RewriteRuleSubtreeStream stream_assignmentOperator=new RewriteRuleSubtreeStream(adaptor,"rule assignmentOperator");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
        try { dbg.enterRule("expression");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(586, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:587:2: ( conditionalExpression ( assignmentOperator expression )? -> conditionalExpression ( assignmentOperator expression )? )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:587:4: conditionalExpression ( assignmentOperator expression )?
            {
            dbg.location(587,4);
            pushFollow(FOLLOW_conditionalExpression_in_expression4270);
            conditionalExpression441=conditionalExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_conditionalExpression.add(conditionalExpression441.getTree());
            dbg.location(587,26);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:587:26: ( assignmentOperator expression )?
            int alt130=2;
            try { dbg.enterSubRule(130);
            try { dbg.enterDecision(130);

            switch ( input.LA(1) ) {
                case 44:
                    {
                    int LA130_1 = input.LA(2);

                    if ( (synpred185()) ) {
                        alt130=1;
                    }
                    }
                    break;
                case 89:
                    {
                    int LA130_2 = input.LA(2);

                    if ( (synpred185()) ) {
                        alt130=1;
                    }
                    }
                    break;
                case 90:
                    {
                    int LA130_3 = input.LA(2);

                    if ( (synpred185()) ) {
                        alt130=1;
                    }
                    }
                    break;
                case 91:
                    {
                    int LA130_4 = input.LA(2);

                    if ( (synpred185()) ) {
                        alt130=1;
                    }
                    }
                    break;
                case 92:
                    {
                    int LA130_5 = input.LA(2);

                    if ( (synpred185()) ) {
                        alt130=1;
                    }
                    }
                    break;
                case 93:
                    {
                    int LA130_6 = input.LA(2);

                    if ( (synpred185()) ) {
                        alt130=1;
                    }
                    }
                    break;
                case 94:
                    {
                    int LA130_7 = input.LA(2);

                    if ( (synpred185()) ) {
                        alt130=1;
                    }
                    }
                    break;
                case 95:
                    {
                    int LA130_8 = input.LA(2);

                    if ( (synpred185()) ) {
                        alt130=1;
                    }
                    }
                    break;
                case 96:
                    {
                    int LA130_9 = input.LA(2);

                    if ( (synpred185()) ) {
                        alt130=1;
                    }
                    }
                    break;
                case 33:
                    {
                    int LA130_10 = input.LA(2);

                    if ( (synpred185()) ) {
                        alt130=1;
                    }
                    }
                    break;
                case 35:
                    {
                    int LA130_11 = input.LA(2);

                    if ( (synpred185()) ) {
                        alt130=1;
                    }
                    }
                    break;
            }

            } finally {dbg.exitDecision(130);}

            switch (alt130) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:587:27: assignmentOperator expression
                    {
                    dbg.location(587,27);
                    pushFollow(FOLLOW_assignmentOperator_in_expression4273);
                    assignmentOperator442=assignmentOperator();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_assignmentOperator.add(assignmentOperator442.getTree());
                    dbg.location(587,46);
                    pushFollow(FOLLOW_expression_in_expression4275);
                    expression443=expression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_expression.add(expression443.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(130);}

            dbg.location(587,59);

            // AST REWRITE
            // elements: conditionalExpression, expression, assignmentOperator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 587:59: -> conditionalExpression ( assignmentOperator expression )?
            {
                dbg.location(587,62);
                adaptor.addChild(root_0, stream_conditionalExpression.next());
                dbg.location(587,84);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:587:84: ( assignmentOperator expression )?
                if ( stream_expression.hasNext()||stream_assignmentOperator.hasNext() ) {
                    dbg.location(587,85);
                    adaptor.addChild(root_0, stream_assignmentOperator.next());
                    dbg.location(587,104);
                    adaptor.addChild(root_0, stream_expression.next());

                }
                stream_expression.reset();
                stream_assignmentOperator.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 99, expression_StartIndex); }
        }
        dbg.location(588, 2);

        }
        finally {
            dbg.exitRule("expression");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end expression

    public static class assignmentOperator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start assignmentOperator
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:590:1: assignmentOperator : ( '=' -> '=' | '+=' -> '=' | '-=' -> '-=' | '*=' -> '*=' | '/=' -> '/=' | '&=' -> '&=' | '|=' -> '|=' | '^=' -> '^=' | '%=' -> '%=' | '<' '<' '=' -> '<' '<' '=' | '>' '>' '=' -> '>' '>' '=' | '>' '>' '>' '=' -> '>' '>' '>' '=' );
    public final assignmentOperator_return assignmentOperator() throws RecognitionException {
        assignmentOperator_return retval = new assignmentOperator_return();
        retval.start = input.LT(1);
        int assignmentOperator_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal444=null;
        Token string_literal445=null;
        Token string_literal446=null;
        Token string_literal447=null;
        Token string_literal448=null;
        Token string_literal449=null;
        Token string_literal450=null;
        Token string_literal451=null;
        Token string_literal452=null;
        Token char_literal453=null;
        Token char_literal454=null;
        Token char_literal455=null;
        Token char_literal456=null;
        Token char_literal457=null;
        Token char_literal458=null;
        Token char_literal459=null;
        Token char_literal460=null;
        Token char_literal461=null;
        Token char_literal462=null;

        Object char_literal444_tree=null;
        Object string_literal445_tree=null;
        Object string_literal446_tree=null;
        Object string_literal447_tree=null;
        Object string_literal448_tree=null;
        Object string_literal449_tree=null;
        Object string_literal450_tree=null;
        Object string_literal451_tree=null;
        Object string_literal452_tree=null;
        Object char_literal453_tree=null;
        Object char_literal454_tree=null;
        Object char_literal455_tree=null;
        Object char_literal456_tree=null;
        Object char_literal457_tree=null;
        Object char_literal458_tree=null;
        Object char_literal459_tree=null;
        Object char_literal460_tree=null;
        Object char_literal461_tree=null;
        Object char_literal462_tree=null;
        RewriteRuleTokenStream stream_96=new RewriteRuleTokenStream(adaptor,"token 96");
        RewriteRuleTokenStream stream_95=new RewriteRuleTokenStream(adaptor,"token 95");
        RewriteRuleTokenStream stream_94=new RewriteRuleTokenStream(adaptor,"token 94");
        RewriteRuleTokenStream stream_93=new RewriteRuleTokenStream(adaptor,"token 93");
        RewriteRuleTokenStream stream_44=new RewriteRuleTokenStream(adaptor,"token 44");
        RewriteRuleTokenStream stream_92=new RewriteRuleTokenStream(adaptor,"token 92");
        RewriteRuleTokenStream stream_91=new RewriteRuleTokenStream(adaptor,"token 91");
        RewriteRuleTokenStream stream_35=new RewriteRuleTokenStream(adaptor,"token 35");
        RewriteRuleTokenStream stream_90=new RewriteRuleTokenStream(adaptor,"token 90");
        RewriteRuleTokenStream stream_33=new RewriteRuleTokenStream(adaptor,"token 33");
        RewriteRuleTokenStream stream_89=new RewriteRuleTokenStream(adaptor,"token 89");

        try { dbg.enterRule("assignmentOperator");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(590, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:591:2: ( '=' -> '=' | '+=' -> '=' | '-=' -> '-=' | '*=' -> '*=' | '/=' -> '/=' | '&=' -> '&=' | '|=' -> '|=' | '^=' -> '^=' | '%=' -> '%=' | '<' '<' '=' -> '<' '<' '=' | '>' '>' '=' -> '>' '>' '=' | '>' '>' '>' '=' -> '>' '>' '>' '=' )
            int alt131=12;
            try { dbg.enterDecision(131);

            switch ( input.LA(1) ) {
            case 44:
                {
                alt131=1;
                }
                break;
            case 89:
                {
                alt131=2;
                }
                break;
            case 90:
                {
                alt131=3;
                }
                break;
            case 91:
                {
                alt131=4;
                }
                break;
            case 92:
                {
                alt131=5;
                }
                break;
            case 93:
                {
                alt131=6;
                }
                break;
            case 94:
                {
                alt131=7;
                }
                break;
            case 95:
                {
                alt131=8;
                }
                break;
            case 96:
                {
                alt131=9;
                }
                break;
            case 33:
                {
                alt131=10;
                }
                break;
            case 35:
                {
                int LA131_11 = input.LA(2);

                if ( (LA131_11==35) ) {
                    int LA131_12 = input.LA(3);

                    if ( (synpred196()) ) {
                        alt131=11;
                    }
                    else if ( (true) ) {
                        alt131=12;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("590:1: assignmentOperator : ( '=' -> '=' | '+=' -> '=' | '-=' -> '-=' | '*=' -> '*=' | '/=' -> '/=' | '&=' -> '&=' | '|=' -> '|=' | '^=' -> '^=' | '%=' -> '%=' | '<' '<' '=' -> '<' '<' '=' | '>' '>' '=' -> '>' '>' '=' | '>' '>' '>' '=' -> '>' '>' '>' '=' );", 131, 12, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("590:1: assignmentOperator : ( '=' -> '=' | '+=' -> '=' | '-=' -> '-=' | '*=' -> '*=' | '/=' -> '/=' | '&=' -> '&=' | '|=' -> '|=' | '^=' -> '^=' | '%=' -> '%=' | '<' '<' '=' -> '<' '<' '=' | '>' '>' '=' -> '>' '>' '=' | '>' '>' '>' '=' -> '>' '>' '>' '=' );", 131, 11, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("590:1: assignmentOperator : ( '=' -> '=' | '+=' -> '=' | '-=' -> '-=' | '*=' -> '*=' | '/=' -> '/=' | '&=' -> '&=' | '|=' -> '|=' | '^=' -> '^=' | '%=' -> '%=' | '<' '<' '=' -> '<' '<' '=' | '>' '>' '=' -> '>' '>' '=' | '>' '>' '>' '=' -> '>' '>' '>' '=' );", 131, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(131);}

            switch (alt131) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:591:4: '='
                    {
                    dbg.location(591,4);
                    char_literal444=(Token)input.LT(1);
                    match(input,44,FOLLOW_44_in_assignmentOperator4300); if (failed) return retval;
                    if ( backtracking==0 ) stream_44.add(char_literal444);

                    dbg.location(591,8);

                    // AST REWRITE
                    // elements: 44
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 591:8: -> '='
                    {
                        dbg.location(591,11);
                        adaptor.addChild(root_0, stream_44.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:592:9: '+='
                    {
                    dbg.location(592,9);
                    string_literal445=(Token)input.LT(1);
                    match(input,89,FOLLOW_89_in_assignmentOperator4314); if (failed) return retval;
                    if ( backtracking==0 ) stream_89.add(string_literal445);

                    dbg.location(592,14);

                    // AST REWRITE
                    // elements: 44
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 592:14: -> '='
                    {
                        dbg.location(592,17);
                        adaptor.addChild(root_0, adaptor.create(44, "44"));

                    }

                    }

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:593:9: '-='
                    {
                    dbg.location(593,9);
                    string_literal446=(Token)input.LT(1);
                    match(input,90,FOLLOW_90_in_assignmentOperator4328); if (failed) return retval;
                    if ( backtracking==0 ) stream_90.add(string_literal446);

                    dbg.location(593,14);

                    // AST REWRITE
                    // elements: 90
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 593:14: -> '-='
                    {
                        dbg.location(593,17);
                        adaptor.addChild(root_0, stream_90.next());

                    }

                    }

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:594:9: '*='
                    {
                    dbg.location(594,9);
                    string_literal447=(Token)input.LT(1);
                    match(input,91,FOLLOW_91_in_assignmentOperator4342); if (failed) return retval;
                    if ( backtracking==0 ) stream_91.add(string_literal447);

                    dbg.location(594,14);

                    // AST REWRITE
                    // elements: 91
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 594:14: -> '*='
                    {
                        dbg.location(594,17);
                        adaptor.addChild(root_0, stream_91.next());

                    }

                    }

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:595:9: '/='
                    {
                    dbg.location(595,9);
                    string_literal448=(Token)input.LT(1);
                    match(input,92,FOLLOW_92_in_assignmentOperator4356); if (failed) return retval;
                    if ( backtracking==0 ) stream_92.add(string_literal448);

                    dbg.location(595,14);

                    // AST REWRITE
                    // elements: 92
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 595:14: -> '/='
                    {
                        dbg.location(595,17);
                        adaptor.addChild(root_0, stream_92.next());

                    }

                    }

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:596:9: '&='
                    {
                    dbg.location(596,9);
                    string_literal449=(Token)input.LT(1);
                    match(input,93,FOLLOW_93_in_assignmentOperator4370); if (failed) return retval;
                    if ( backtracking==0 ) stream_93.add(string_literal449);

                    dbg.location(596,14);

                    // AST REWRITE
                    // elements: 93
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 596:14: -> '&='
                    {
                        dbg.location(596,17);
                        adaptor.addChild(root_0, stream_93.next());

                    }

                    }

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:597:9: '|='
                    {
                    dbg.location(597,9);
                    string_literal450=(Token)input.LT(1);
                    match(input,94,FOLLOW_94_in_assignmentOperator4384); if (failed) return retval;
                    if ( backtracking==0 ) stream_94.add(string_literal450);

                    dbg.location(597,14);

                    // AST REWRITE
                    // elements: 94
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 597:14: -> '|='
                    {
                        dbg.location(597,17);
                        adaptor.addChild(root_0, stream_94.next());

                    }

                    }

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:598:9: '^='
                    {
                    dbg.location(598,9);
                    string_literal451=(Token)input.LT(1);
                    match(input,95,FOLLOW_95_in_assignmentOperator4398); if (failed) return retval;
                    if ( backtracking==0 ) stream_95.add(string_literal451);

                    dbg.location(598,14);

                    // AST REWRITE
                    // elements: 95
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 598:14: -> '^='
                    {
                        dbg.location(598,17);
                        adaptor.addChild(root_0, stream_95.next());

                    }

                    }

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:599:9: '%='
                    {
                    dbg.location(599,9);
                    string_literal452=(Token)input.LT(1);
                    match(input,96,FOLLOW_96_in_assignmentOperator4412); if (failed) return retval;
                    if ( backtracking==0 ) stream_96.add(string_literal452);

                    dbg.location(599,14);

                    // AST REWRITE
                    // elements: 96
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 599:14: -> '%='
                    {
                        dbg.location(599,17);
                        adaptor.addChild(root_0, stream_96.next());

                    }

                    }

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:600:9: '<' '<' '='
                    {
                    dbg.location(600,9);
                    char_literal453=(Token)input.LT(1);
                    match(input,33,FOLLOW_33_in_assignmentOperator4426); if (failed) return retval;
                    if ( backtracking==0 ) stream_33.add(char_literal453);

                    dbg.location(600,13);
                    char_literal454=(Token)input.LT(1);
                    match(input,33,FOLLOW_33_in_assignmentOperator4428); if (failed) return retval;
                    if ( backtracking==0 ) stream_33.add(char_literal454);

                    dbg.location(600,17);
                    char_literal455=(Token)input.LT(1);
                    match(input,44,FOLLOW_44_in_assignmentOperator4430); if (failed) return retval;
                    if ( backtracking==0 ) stream_44.add(char_literal455);

                    dbg.location(600,21);

                    // AST REWRITE
                    // elements: 33, 44, 33
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 600:21: -> '<' '<' '='
                    {
                        dbg.location(600,24);
                        adaptor.addChild(root_0, stream_33.next());
                        dbg.location(600,28);
                        adaptor.addChild(root_0, stream_33.next());
                        dbg.location(600,32);
                        adaptor.addChild(root_0, stream_44.next());

                    }

                    }

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:601:9: '>' '>' '='
                    {
                    dbg.location(601,9);
                    char_literal456=(Token)input.LT(1);
                    match(input,35,FOLLOW_35_in_assignmentOperator4448); if (failed) return retval;
                    if ( backtracking==0 ) stream_35.add(char_literal456);

                    dbg.location(601,13);
                    char_literal457=(Token)input.LT(1);
                    match(input,35,FOLLOW_35_in_assignmentOperator4450); if (failed) return retval;
                    if ( backtracking==0 ) stream_35.add(char_literal457);

                    dbg.location(601,17);
                    char_literal458=(Token)input.LT(1);
                    match(input,44,FOLLOW_44_in_assignmentOperator4452); if (failed) return retval;
                    if ( backtracking==0 ) stream_44.add(char_literal458);

                    dbg.location(601,21);

                    // AST REWRITE
                    // elements: 44, 35, 35
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 601:21: -> '>' '>' '='
                    {
                        dbg.location(601,24);
                        adaptor.addChild(root_0, stream_35.next());
                        dbg.location(601,28);
                        adaptor.addChild(root_0, stream_35.next());
                        dbg.location(601,32);
                        adaptor.addChild(root_0, stream_44.next());

                    }

                    }

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:602:9: '>' '>' '>' '='
                    {
                    dbg.location(602,9);
                    char_literal459=(Token)input.LT(1);
                    match(input,35,FOLLOW_35_in_assignmentOperator4470); if (failed) return retval;
                    if ( backtracking==0 ) stream_35.add(char_literal459);

                    dbg.location(602,13);
                    char_literal460=(Token)input.LT(1);
                    match(input,35,FOLLOW_35_in_assignmentOperator4472); if (failed) return retval;
                    if ( backtracking==0 ) stream_35.add(char_literal460);

                    dbg.location(602,17);
                    char_literal461=(Token)input.LT(1);
                    match(input,35,FOLLOW_35_in_assignmentOperator4474); if (failed) return retval;
                    if ( backtracking==0 ) stream_35.add(char_literal461);

                    dbg.location(602,21);
                    char_literal462=(Token)input.LT(1);
                    match(input,44,FOLLOW_44_in_assignmentOperator4476); if (failed) return retval;
                    if ( backtracking==0 ) stream_44.add(char_literal462);

                    dbg.location(602,25);

                    // AST REWRITE
                    // elements: 35, 44, 35, 35
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 602:25: -> '>' '>' '>' '='
                    {
                        dbg.location(602,28);
                        adaptor.addChild(root_0, stream_35.next());
                        dbg.location(602,32);
                        adaptor.addChild(root_0, stream_35.next());
                        dbg.location(602,36);
                        adaptor.addChild(root_0, stream_35.next());
                        dbg.location(602,40);
                        adaptor.addChild(root_0, stream_44.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 100, assignmentOperator_StartIndex); }
        }
        dbg.location(603, 2);

        }
        finally {
            dbg.exitRule("assignmentOperator");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end assignmentOperator

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start conditionalExpression
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:605:1: conditionalExpression : conditionalOrExpression ( '?' expression ':' expression )? -> conditionalOrExpression ( '?' expression ':' expression )? ;
    public final conditionalExpression_return conditionalExpression() throws RecognitionException {
        conditionalExpression_return retval = new conditionalExpression_return();
        retval.start = input.LT(1);
        int conditionalExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal464=null;
        Token char_literal466=null;
        conditionalOrExpression_return conditionalOrExpression463 = null;

        expression_return expression465 = null;

        expression_return expression467 = null;


        Object char_literal464_tree=null;
        Object char_literal466_tree=null;
        RewriteRuleTokenStream stream_63=new RewriteRuleTokenStream(adaptor,"token 63");
        RewriteRuleTokenStream stream_74=new RewriteRuleTokenStream(adaptor,"token 74");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
        try { dbg.enterRule("conditionalExpression");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(605, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:606:5: ( conditionalOrExpression ( '?' expression ':' expression )? -> conditionalOrExpression ( '?' expression ':' expression )? )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:606:9: conditionalOrExpression ( '?' expression ':' expression )?
            {
            dbg.location(606,9);
            pushFollow(FOLLOW_conditionalOrExpression_in_conditionalExpression4502);
            conditionalOrExpression463=conditionalOrExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_conditionalOrExpression.add(conditionalOrExpression463.getTree());
            dbg.location(606,33);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:606:33: ( '?' expression ':' expression )?
            int alt132=2;
            try { dbg.enterSubRule(132);
            try { dbg.enterDecision(132);

            int LA132_0 = input.LA(1);

            if ( (LA132_0==63) ) {
                alt132=1;
            }
            } finally {dbg.exitDecision(132);}

            switch (alt132) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:606:35: '?' expression ':' expression
                    {
                    dbg.location(606,35);
                    char_literal464=(Token)input.LT(1);
                    match(input,63,FOLLOW_63_in_conditionalExpression4506); if (failed) return retval;
                    if ( backtracking==0 ) stream_63.add(char_literal464);

                    dbg.location(606,39);
                    pushFollow(FOLLOW_expression_in_conditionalExpression4508);
                    expression465=expression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_expression.add(expression465.getTree());
                    dbg.location(606,50);
                    char_literal466=(Token)input.LT(1);
                    match(input,74,FOLLOW_74_in_conditionalExpression4510); if (failed) return retval;
                    if ( backtracking==0 ) stream_74.add(char_literal466);

                    dbg.location(606,54);
                    pushFollow(FOLLOW_expression_in_conditionalExpression4512);
                    expression467=expression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_expression.add(expression467.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(132);}

            dbg.location(606,68);

            // AST REWRITE
            // elements: expression, expression, conditionalOrExpression, 74, 63
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 606:68: -> conditionalOrExpression ( '?' expression ':' expression )?
            {
                dbg.location(606,71);
                adaptor.addChild(root_0, stream_conditionalOrExpression.next());
                dbg.location(606,95);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:606:95: ( '?' expression ':' expression )?
                if ( stream_expression.hasNext()||stream_expression.hasNext()||stream_74.hasNext()||stream_63.hasNext() ) {
                    dbg.location(606,97);
                    adaptor.addChild(root_0, stream_63.next());
                    dbg.location(606,101);
                    adaptor.addChild(root_0, stream_expression.next());
                    dbg.location(606,112);
                    adaptor.addChild(root_0, stream_74.next());
                    dbg.location(606,116);
                    adaptor.addChild(root_0, stream_expression.next());

                }
                stream_expression.reset();
                stream_expression.reset();
                stream_74.reset();
                stream_63.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 101, conditionalExpression_StartIndex); }
        }
        dbg.location(607, 2);

        }
        finally {
            dbg.exitRule("conditionalExpression");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end conditionalExpression

    public static class conditionalOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start conditionalOrExpression
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:609:1: conditionalOrExpression : conditionalAndExpression ( '||' conditionalAndExpression )* -> conditionalAndExpression ( '||' conditionalAndExpression )* ;
    public final conditionalOrExpression_return conditionalOrExpression() throws RecognitionException {
        conditionalOrExpression_return retval = new conditionalOrExpression_return();
        retval.start = input.LT(1);
        int conditionalOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal469=null;
        conditionalAndExpression_return conditionalAndExpression468 = null;

        conditionalAndExpression_return conditionalAndExpression470 = null;


        Object string_literal469_tree=null;
        RewriteRuleTokenStream stream_97=new RewriteRuleTokenStream(adaptor,"token 97");
        RewriteRuleSubtreeStream stream_conditionalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalAndExpression");
        try { dbg.enterRule("conditionalOrExpression");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(609, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:610:5: ( conditionalAndExpression ( '||' conditionalAndExpression )* -> conditionalAndExpression ( '||' conditionalAndExpression )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:610:9: conditionalAndExpression ( '||' conditionalAndExpression )*
            {
            dbg.location(610,9);
            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression4548);
            conditionalAndExpression468=conditionalAndExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_conditionalAndExpression.add(conditionalAndExpression468.getTree());
            dbg.location(610,34);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:610:34: ( '||' conditionalAndExpression )*
            try { dbg.enterSubRule(133);

            loop133:
            do {
                int alt133=2;
                try { dbg.enterDecision(133);

                int LA133_0 = input.LA(1);

                if ( (LA133_0==97) ) {
                    alt133=1;
                }


                } finally {dbg.exitDecision(133);}

                switch (alt133) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:610:36: '||' conditionalAndExpression
            	    {
            	    dbg.location(610,36);
            	    string_literal469=(Token)input.LT(1);
            	    match(input,97,FOLLOW_97_in_conditionalOrExpression4552); if (failed) return retval;
            	    if ( backtracking==0 ) stream_97.add(string_literal469);

            	    dbg.location(610,41);
            	    pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression4554);
            	    conditionalAndExpression470=conditionalAndExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_conditionalAndExpression.add(conditionalAndExpression470.getTree());

            	    }
            	    break;

            	default :
            	    break loop133;
                }
            } while (true);
            } finally {dbg.exitSubRule(133);}

            dbg.location(610,69);

            // AST REWRITE
            // elements: 97, conditionalAndExpression, conditionalAndExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 610:69: -> conditionalAndExpression ( '||' conditionalAndExpression )*
            {
                dbg.location(610,73);
                adaptor.addChild(root_0, stream_conditionalAndExpression.next());
                dbg.location(610,98);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:610:98: ( '||' conditionalAndExpression )*
                while ( stream_97.hasNext()||stream_conditionalAndExpression.hasNext() ) {
                    dbg.location(610,100);
                    adaptor.addChild(root_0, stream_97.next());
                    dbg.location(610,105);
                    adaptor.addChild(root_0, stream_conditionalAndExpression.next());

                }
                stream_97.reset();
                stream_conditionalAndExpression.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 102, conditionalOrExpression_StartIndex); }
        }
        dbg.location(611, 2);

        }
        finally {
            dbg.exitRule("conditionalOrExpression");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end conditionalOrExpression

    public static class conditionalAndExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start conditionalAndExpression
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:613:1: conditionalAndExpression : inclusiveOrExpression ( '&&' inclusiveOrExpression )* -> inclusiveOrExpression ( '&&' inclusiveOrExpression )* ;
    public final conditionalAndExpression_return conditionalAndExpression() throws RecognitionException {
        conditionalAndExpression_return retval = new conditionalAndExpression_return();
        retval.start = input.LT(1);
        int conditionalAndExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal472=null;
        inclusiveOrExpression_return inclusiveOrExpression471 = null;

        inclusiveOrExpression_return inclusiveOrExpression473 = null;


        Object string_literal472_tree=null;
        RewriteRuleTokenStream stream_98=new RewriteRuleTokenStream(adaptor,"token 98");
        RewriteRuleSubtreeStream stream_inclusiveOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule inclusiveOrExpression");
        try { dbg.enterRule("conditionalAndExpression");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(613, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:614:5: ( inclusiveOrExpression ( '&&' inclusiveOrExpression )* -> inclusiveOrExpression ( '&&' inclusiveOrExpression )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:614:9: inclusiveOrExpression ( '&&' inclusiveOrExpression )*
            {
            dbg.location(614,9);
            pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression4587);
            inclusiveOrExpression471=inclusiveOrExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_inclusiveOrExpression.add(inclusiveOrExpression471.getTree());
            dbg.location(614,31);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:614:31: ( '&&' inclusiveOrExpression )*
            try { dbg.enterSubRule(134);

            loop134:
            do {
                int alt134=2;
                try { dbg.enterDecision(134);

                int LA134_0 = input.LA(1);

                if ( (LA134_0==98) ) {
                    alt134=1;
                }


                } finally {dbg.exitDecision(134);}

                switch (alt134) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:614:33: '&&' inclusiveOrExpression
            	    {
            	    dbg.location(614,33);
            	    string_literal472=(Token)input.LT(1);
            	    match(input,98,FOLLOW_98_in_conditionalAndExpression4591); if (failed) return retval;
            	    if ( backtracking==0 ) stream_98.add(string_literal472);

            	    dbg.location(614,38);
            	    pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression4593);
            	    inclusiveOrExpression473=inclusiveOrExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_inclusiveOrExpression.add(inclusiveOrExpression473.getTree());

            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);
            } finally {dbg.exitSubRule(134);}

            dbg.location(614,63);

            // AST REWRITE
            // elements: inclusiveOrExpression, 98, inclusiveOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 614:63: -> inclusiveOrExpression ( '&&' inclusiveOrExpression )*
            {
                dbg.location(614,66);
                adaptor.addChild(root_0, stream_inclusiveOrExpression.next());
                dbg.location(614,88);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:614:88: ( '&&' inclusiveOrExpression )*
                while ( stream_inclusiveOrExpression.hasNext()||stream_98.hasNext() ) {
                    dbg.location(614,90);
                    adaptor.addChild(root_0, stream_98.next());
                    dbg.location(614,95);
                    adaptor.addChild(root_0, stream_inclusiveOrExpression.next());

                }
                stream_inclusiveOrExpression.reset();
                stream_98.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 103, conditionalAndExpression_StartIndex); }
        }
        dbg.location(615, 2);

        }
        finally {
            dbg.exitRule("conditionalAndExpression");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end conditionalAndExpression

    public static class inclusiveOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start inclusiveOrExpression
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:617:1: inclusiveOrExpression : exclusiveOrExpression ( '|' exclusiveOrExpression )* -> exclusiveOrExpression ( '|' exclusiveOrExpression )* ;
    public final inclusiveOrExpression_return inclusiveOrExpression() throws RecognitionException {
        inclusiveOrExpression_return retval = new inclusiveOrExpression_return();
        retval.start = input.LT(1);
        int inclusiveOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal475=null;
        exclusiveOrExpression_return exclusiveOrExpression474 = null;

        exclusiveOrExpression_return exclusiveOrExpression476 = null;


        Object char_literal475_tree=null;
        RewriteRuleTokenStream stream_99=new RewriteRuleTokenStream(adaptor,"token 99");
        RewriteRuleSubtreeStream stream_exclusiveOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule exclusiveOrExpression");
        try { dbg.enterRule("inclusiveOrExpression");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(617, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:618:5: ( exclusiveOrExpression ( '|' exclusiveOrExpression )* -> exclusiveOrExpression ( '|' exclusiveOrExpression )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:618:9: exclusiveOrExpression ( '|' exclusiveOrExpression )*
            {
            dbg.location(618,9);
            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression4625);
            exclusiveOrExpression474=exclusiveOrExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exclusiveOrExpression.add(exclusiveOrExpression474.getTree());
            dbg.location(618,31);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:618:31: ( '|' exclusiveOrExpression )*
            try { dbg.enterSubRule(135);

            loop135:
            do {
                int alt135=2;
                try { dbg.enterDecision(135);

                int LA135_0 = input.LA(1);

                if ( (LA135_0==99) ) {
                    alt135=1;
                }


                } finally {dbg.exitDecision(135);}

                switch (alt135) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:618:33: '|' exclusiveOrExpression
            	    {
            	    dbg.location(618,33);
            	    char_literal475=(Token)input.LT(1);
            	    match(input,99,FOLLOW_99_in_inclusiveOrExpression4629); if (failed) return retval;
            	    if ( backtracking==0 ) stream_99.add(char_literal475);

            	    dbg.location(618,37);
            	    pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression4631);
            	    exclusiveOrExpression476=exclusiveOrExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_exclusiveOrExpression.add(exclusiveOrExpression476.getTree());

            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);
            } finally {dbg.exitSubRule(135);}

            dbg.location(618,62);

            // AST REWRITE
            // elements: exclusiveOrExpression, exclusiveOrExpression, 99
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 618:62: -> exclusiveOrExpression ( '|' exclusiveOrExpression )*
            {
                dbg.location(618,65);
                adaptor.addChild(root_0, stream_exclusiveOrExpression.next());
                dbg.location(618,87);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:618:87: ( '|' exclusiveOrExpression )*
                while ( stream_exclusiveOrExpression.hasNext()||stream_99.hasNext() ) {
                    dbg.location(618,89);
                    adaptor.addChild(root_0, stream_99.next());
                    dbg.location(618,93);
                    adaptor.addChild(root_0, stream_exclusiveOrExpression.next());

                }
                stream_exclusiveOrExpression.reset();
                stream_99.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 104, inclusiveOrExpression_StartIndex); }
        }
        dbg.location(619, 2);

        }
        finally {
            dbg.exitRule("inclusiveOrExpression");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end inclusiveOrExpression

    public static class exclusiveOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start exclusiveOrExpression
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:621:1: exclusiveOrExpression : andExpression ( '^' andExpression )* -> andExpression ( '^' andExpression )* ;
    public final exclusiveOrExpression_return exclusiveOrExpression() throws RecognitionException {
        exclusiveOrExpression_return retval = new exclusiveOrExpression_return();
        retval.start = input.LT(1);
        int exclusiveOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal478=null;
        andExpression_return andExpression477 = null;

        andExpression_return andExpression479 = null;


        Object char_literal478_tree=null;
        RewriteRuleTokenStream stream_100=new RewriteRuleTokenStream(adaptor,"token 100");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try { dbg.enterRule("exclusiveOrExpression");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(621, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:622:5: ( andExpression ( '^' andExpression )* -> andExpression ( '^' andExpression )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:622:9: andExpression ( '^' andExpression )*
            {
            dbg.location(622,9);
            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression4663);
            andExpression477=andExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_andExpression.add(andExpression477.getTree());
            dbg.location(622,23);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:622:23: ( '^' andExpression )*
            try { dbg.enterSubRule(136);

            loop136:
            do {
                int alt136=2;
                try { dbg.enterDecision(136);

                int LA136_0 = input.LA(1);

                if ( (LA136_0==100) ) {
                    alt136=1;
                }


                } finally {dbg.exitDecision(136);}

                switch (alt136) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:622:25: '^' andExpression
            	    {
            	    dbg.location(622,25);
            	    char_literal478=(Token)input.LT(1);
            	    match(input,100,FOLLOW_100_in_exclusiveOrExpression4667); if (failed) return retval;
            	    if ( backtracking==0 ) stream_100.add(char_literal478);

            	    dbg.location(622,29);
            	    pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression4669);
            	    andExpression479=andExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_andExpression.add(andExpression479.getTree());

            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);
            } finally {dbg.exitSubRule(136);}

            dbg.location(622,46);

            // AST REWRITE
            // elements: andExpression, 100, andExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 622:46: -> andExpression ( '^' andExpression )*
            {
                dbg.location(622,49);
                adaptor.addChild(root_0, stream_andExpression.next());
                dbg.location(622,63);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:622:63: ( '^' andExpression )*
                while ( stream_andExpression.hasNext()||stream_100.hasNext() ) {
                    dbg.location(622,65);
                    adaptor.addChild(root_0, stream_100.next());
                    dbg.location(622,69);
                    adaptor.addChild(root_0, stream_andExpression.next());

                }
                stream_andExpression.reset();
                stream_100.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 105, exclusiveOrExpression_StartIndex); }
        }
        dbg.location(623, 2);

        }
        finally {
            dbg.exitRule("exclusiveOrExpression");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end exclusiveOrExpression

    public static class andExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start andExpression
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:625:1: andExpression : equalityExpression ( '&' equalityExpression )* -> equalityExpression ( '&' equalityExpression )* ;
    public final andExpression_return andExpression() throws RecognitionException {
        andExpression_return retval = new andExpression_return();
        retval.start = input.LT(1);
        int andExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal481=null;
        equalityExpression_return equalityExpression480 = null;

        equalityExpression_return equalityExpression482 = null;


        Object char_literal481_tree=null;
        RewriteRuleTokenStream stream_36=new RewriteRuleTokenStream(adaptor,"token 36");
        RewriteRuleSubtreeStream stream_equalityExpression=new RewriteRuleSubtreeStream(adaptor,"rule equalityExpression");
        try { dbg.enterRule("andExpression");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(625, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:626:5: ( equalityExpression ( '&' equalityExpression )* -> equalityExpression ( '&' equalityExpression )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:626:9: equalityExpression ( '&' equalityExpression )*
            {
            dbg.location(626,9);
            pushFollow(FOLLOW_equalityExpression_in_andExpression4701);
            equalityExpression480=equalityExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_equalityExpression.add(equalityExpression480.getTree());
            dbg.location(626,28);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:626:28: ( '&' equalityExpression )*
            try { dbg.enterSubRule(137);

            loop137:
            do {
                int alt137=2;
                try { dbg.enterDecision(137);

                int LA137_0 = input.LA(1);

                if ( (LA137_0==36) ) {
                    alt137=1;
                }


                } finally {dbg.exitDecision(137);}

                switch (alt137) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:626:30: '&' equalityExpression
            	    {
            	    dbg.location(626,30);
            	    char_literal481=(Token)input.LT(1);
            	    match(input,36,FOLLOW_36_in_andExpression4705); if (failed) return retval;
            	    if ( backtracking==0 ) stream_36.add(char_literal481);

            	    dbg.location(626,34);
            	    pushFollow(FOLLOW_equalityExpression_in_andExpression4707);
            	    equalityExpression482=equalityExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_equalityExpression.add(equalityExpression482.getTree());

            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);
            } finally {dbg.exitSubRule(137);}

            dbg.location(626,56);

            // AST REWRITE
            // elements: equalityExpression, 36, equalityExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 626:56: -> equalityExpression ( '&' equalityExpression )*
            {
                dbg.location(626,59);
                adaptor.addChild(root_0, stream_equalityExpression.next());
                dbg.location(626,78);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:626:78: ( '&' equalityExpression )*
                while ( stream_equalityExpression.hasNext()||stream_36.hasNext() ) {
                    dbg.location(626,80);
                    adaptor.addChild(root_0, stream_36.next());
                    dbg.location(626,84);
                    adaptor.addChild(root_0, stream_equalityExpression.next());

                }
                stream_equalityExpression.reset();
                stream_36.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 106, andExpression_StartIndex); }
        }
        dbg.location(627, 2);

        }
        finally {
            dbg.exitRule("andExpression");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end andExpression

    public static class equalityExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start equalityExpression
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:629:1: equalityExpression : instanceOfExpression ( ( '==' | '!=' ) instanceOfExpression )* ;
    public final equalityExpression_return equalityExpression() throws RecognitionException {
        equalityExpression_return retval = new equalityExpression_return();
        retval.start = input.LT(1);
        int equalityExpression_StartIndex = input.index();
        Object root_0 = null;

        Token set484=null;
        instanceOfExpression_return instanceOfExpression483 = null;

        instanceOfExpression_return instanceOfExpression485 = null;


        Object set484_tree=null;

        try { dbg.enterRule("equalityExpression");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(629, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:630:5: ( instanceOfExpression ( ( '==' | '!=' ) instanceOfExpression )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:630:9: instanceOfExpression ( ( '==' | '!=' ) instanceOfExpression )*
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(630,9);
            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression4739);
            instanceOfExpression483=instanceOfExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression483.getTree());
            dbg.location(630,30);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:630:30: ( ( '==' | '!=' ) instanceOfExpression )*
            try { dbg.enterSubRule(138);

            loop138:
            do {
                int alt138=2;
                try { dbg.enterDecision(138);

                int LA138_0 = input.LA(1);

                if ( ((LA138_0>=101 && LA138_0<=102)) ) {
                    alt138=1;
                }


                } finally {dbg.exitDecision(138);}

                switch (alt138) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:630:32: ( '==' | '!=' ) instanceOfExpression
            	    {
            	    dbg.location(630,32);
            	    set484=(Token)input.LT(1);
            	    if ( (input.LA(1)>=101 && input.LA(1)<=102) ) {
            	        input.consume();
            	        if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set484));
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_equalityExpression4743);    throw mse;
            	    }

            	    dbg.location(630,46);
            	    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression4751);
            	    instanceOfExpression485=instanceOfExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression485.getTree());

            	    }
            	    break;

            	default :
            	    break loop138;
                }
            } while (true);
            } finally {dbg.exitSubRule(138);}


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 107, equalityExpression_StartIndex); }
        }
        dbg.location(631, 2);

        }
        finally {
            dbg.exitRule("equalityExpression");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end equalityExpression

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start instanceOfExpression
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:633:1: instanceOfExpression : relationalExpression ( 'instanceof' type )? -> relationalExpression ( 'instanceof' type )? ;
    public final instanceOfExpression_return instanceOfExpression() throws RecognitionException {
        instanceOfExpression_return retval = new instanceOfExpression_return();
        retval.start = input.LT(1);
        int instanceOfExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal487=null;
        relationalExpression_return relationalExpression486 = null;

        type_return type488 = null;


        Object string_literal487_tree=null;
        RewriteRuleTokenStream stream_103=new RewriteRuleTokenStream(adaptor,"token 103");
        RewriteRuleSubtreeStream stream_relationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule relationalExpression");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try { dbg.enterRule("instanceOfExpression");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(633, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:634:5: ( relationalExpression ( 'instanceof' type )? -> relationalExpression ( 'instanceof' type )? )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:634:9: relationalExpression ( 'instanceof' type )?
            {
            dbg.location(634,9);
            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression4771);
            relationalExpression486=relationalExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_relationalExpression.add(relationalExpression486.getTree());
            dbg.location(634,30);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:634:30: ( 'instanceof' type )?
            int alt139=2;
            try { dbg.enterSubRule(139);
            try { dbg.enterDecision(139);

            int LA139_0 = input.LA(1);

            if ( (LA139_0==103) ) {
                alt139=1;
            }
            } finally {dbg.exitDecision(139);}

            switch (alt139) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:634:31: 'instanceof' type
                    {
                    dbg.location(634,31);
                    string_literal487=(Token)input.LT(1);
                    match(input,103,FOLLOW_103_in_instanceOfExpression4774); if (failed) return retval;
                    if ( backtracking==0 ) stream_103.add(string_literal487);

                    dbg.location(634,44);
                    pushFollow(FOLLOW_type_in_instanceOfExpression4776);
                    type488=type();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_type.add(type488.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(139);}

            dbg.location(634,51);

            // AST REWRITE
            // elements: type, relationalExpression, 103
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 634:51: -> relationalExpression ( 'instanceof' type )?
            {
                dbg.location(634,54);
                adaptor.addChild(root_0, stream_relationalExpression.next());
                dbg.location(634,75);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:634:75: ( 'instanceof' type )?
                if ( stream_type.hasNext()||stream_103.hasNext() ) {
                    dbg.location(634,76);
                    adaptor.addChild(root_0, stream_103.next());
                    dbg.location(634,89);
                    adaptor.addChild(root_0, stream_type.next());

                }
                stream_type.reset();
                stream_103.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 108, instanceOfExpression_StartIndex); }
        }
        dbg.location(635, 2);

        }
        finally {
            dbg.exitRule("instanceOfExpression");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end instanceOfExpression

    public static class relationalExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start relationalExpression
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:637:1: relationalExpression : shiftExpression ( relationalOp shiftExpression )* -> shiftExpression ( relationalOp shiftExpression )* ;
    public final relationalExpression_return relationalExpression() throws RecognitionException {
        relationalExpression_return retval = new relationalExpression_return();
        retval.start = input.LT(1);
        int relationalExpression_StartIndex = input.index();
        Object root_0 = null;

        shiftExpression_return shiftExpression489 = null;

        relationalOp_return relationalOp490 = null;

        shiftExpression_return shiftExpression491 = null;


        RewriteRuleSubtreeStream stream_relationalOp=new RewriteRuleSubtreeStream(adaptor,"rule relationalOp");
        RewriteRuleSubtreeStream stream_shiftExpression=new RewriteRuleSubtreeStream(adaptor,"rule shiftExpression");
        try { dbg.enterRule("relationalExpression");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(637, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:638:5: ( shiftExpression ( relationalOp shiftExpression )* -> shiftExpression ( relationalOp shiftExpression )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:638:9: shiftExpression ( relationalOp shiftExpression )*
            {
            dbg.location(638,9);
            pushFollow(FOLLOW_shiftExpression_in_relationalExpression4805);
            shiftExpression489=shiftExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_shiftExpression.add(shiftExpression489.getTree());
            dbg.location(638,25);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:638:25: ( relationalOp shiftExpression )*
            try { dbg.enterSubRule(140);

            loop140:
            do {
                int alt140=2;
                try { dbg.enterDecision(140);

                int LA140_0 = input.LA(1);

                if ( (LA140_0==33) ) {
                    int LA140_23 = input.LA(2);

                    if ( (LA140_23==33) ) {
                        int LA140_27 = input.LA(3);

                        if ( (synpred206()) ) {
                            alt140=1;
                        }


                    }
                    else if ( (LA140_23==Identifier||(LA140_23>=FloatingPointLiteral && LA140_23<=DecimalLiteral)||LA140_23==40||LA140_23==44||(LA140_23>=55 && LA140_23<=62)||(LA140_23>=64 && LA140_23<=65)||(LA140_23>=68 && LA140_23<=70)||(LA140_23>=104 && LA140_23<=105)||(LA140_23>=108 && LA140_23<=113)) ) {
                        alt140=1;
                    }


                }
                else if ( (LA140_0==35) ) {
                    int LA140_24 = input.LA(2);

                    if ( (LA140_24==Identifier||(LA140_24>=FloatingPointLiteral && LA140_24<=DecimalLiteral)||LA140_24==33||LA140_24==40||LA140_24==44||(LA140_24>=55 && LA140_24<=62)||(LA140_24>=64 && LA140_24<=65)||(LA140_24>=68 && LA140_24<=70)||(LA140_24>=104 && LA140_24<=105)||(LA140_24>=108 && LA140_24<=113)) ) {
                        alt140=1;
                    }


                }


                } finally {dbg.exitDecision(140);}

                switch (alt140) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:638:27: relationalOp shiftExpression
            	    {
            	    dbg.location(638,27);
            	    pushFollow(FOLLOW_relationalOp_in_relationalExpression4809);
            	    relationalOp490=relationalOp();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_relationalOp.add(relationalOp490.getTree());
            	    dbg.location(638,40);
            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression4811);
            	    shiftExpression491=shiftExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_shiftExpression.add(shiftExpression491.getTree());

            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);
            } finally {dbg.exitSubRule(140);}

            dbg.location(638,59);

            // AST REWRITE
            // elements: shiftExpression, relationalOp, shiftExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 638:59: -> shiftExpression ( relationalOp shiftExpression )*
            {
                dbg.location(638,62);
                adaptor.addChild(root_0, stream_shiftExpression.next());
                dbg.location(638,78);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:638:78: ( relationalOp shiftExpression )*
                while ( stream_shiftExpression.hasNext()||stream_relationalOp.hasNext() ) {
                    dbg.location(638,80);
                    adaptor.addChild(root_0, stream_relationalOp.next());
                    dbg.location(638,93);
                    adaptor.addChild(root_0, stream_shiftExpression.next());

                }
                stream_shiftExpression.reset();
                stream_relationalOp.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 109, relationalExpression_StartIndex); }
        }
        dbg.location(639, 2);

        }
        finally {
            dbg.exitRule("relationalExpression");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end relationalExpression

    public static class relationalOp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start relationalOp
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:641:1: relationalOp : ( ( '<' '=' ) -> '<' '=' | ( '>' '=' ) -> '>' '=' | '<' -> '<' | '>' -> '>' );
    public final relationalOp_return relationalOp() throws RecognitionException {
        relationalOp_return retval = new relationalOp_return();
        retval.start = input.LT(1);
        int relationalOp_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal492=null;
        Token char_literal493=null;
        Token char_literal494=null;
        Token char_literal495=null;
        Token char_literal496=null;
        Token char_literal497=null;

        Object char_literal492_tree=null;
        Object char_literal493_tree=null;
        Object char_literal494_tree=null;
        Object char_literal495_tree=null;
        Object char_literal496_tree=null;
        Object char_literal497_tree=null;
        RewriteRuleTokenStream stream_44=new RewriteRuleTokenStream(adaptor,"token 44");
        RewriteRuleTokenStream stream_35=new RewriteRuleTokenStream(adaptor,"token 35");
        RewriteRuleTokenStream stream_33=new RewriteRuleTokenStream(adaptor,"token 33");

        try { dbg.enterRule("relationalOp");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(641, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:642:2: ( ( '<' '=' ) -> '<' '=' | ( '>' '=' ) -> '>' '=' | '<' -> '<' | '>' -> '>' )
            int alt141=4;
            try { dbg.enterDecision(141);

            int LA141_0 = input.LA(1);

            if ( (LA141_0==33) ) {
                int LA141_1 = input.LA(2);

                if ( (LA141_1==44) ) {
                    alt141=1;
                }
                else if ( (LA141_1==Identifier||(LA141_1>=FloatingPointLiteral && LA141_1<=DecimalLiteral)||LA141_1==33||LA141_1==40||(LA141_1>=55 && LA141_1<=62)||(LA141_1>=64 && LA141_1<=65)||(LA141_1>=68 && LA141_1<=70)||(LA141_1>=104 && LA141_1<=105)||(LA141_1>=108 && LA141_1<=113)) ) {
                    alt141=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("641:1: relationalOp : ( ( '<' '=' ) -> '<' '=' | ( '>' '=' ) -> '>' '=' | '<' -> '<' | '>' -> '>' );", 141, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else if ( (LA141_0==35) ) {
                int LA141_2 = input.LA(2);

                if ( (LA141_2==44) ) {
                    alt141=2;
                }
                else if ( (LA141_2==Identifier||(LA141_2>=FloatingPointLiteral && LA141_2<=DecimalLiteral)||LA141_2==33||LA141_2==40||(LA141_2>=55 && LA141_2<=62)||(LA141_2>=64 && LA141_2<=65)||(LA141_2>=68 && LA141_2<=70)||(LA141_2>=104 && LA141_2<=105)||(LA141_2>=108 && LA141_2<=113)) ) {
                    alt141=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("641:1: relationalOp : ( ( '<' '=' ) -> '<' '=' | ( '>' '=' ) -> '>' '=' | '<' -> '<' | '>' -> '>' );", 141, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("641:1: relationalOp : ( ( '<' '=' ) -> '<' '=' | ( '>' '=' ) -> '>' '=' | '<' -> '<' | '>' -> '>' );", 141, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(141);}

            switch (alt141) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:642:4: ( '<' '=' )
                    {
                    dbg.location(642,4);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:642:4: ( '<' '=' )
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:642:5: '<' '='
                    {
                    dbg.location(642,5);
                    char_literal492=(Token)input.LT(1);
                    match(input,33,FOLLOW_33_in_relationalOp4840); if (failed) return retval;
                    if ( backtracking==0 ) stream_33.add(char_literal492);

                    dbg.location(642,9);
                    char_literal493=(Token)input.LT(1);
                    match(input,44,FOLLOW_44_in_relationalOp4842); if (failed) return retval;
                    if ( backtracking==0 ) stream_44.add(char_literal493);


                    }

                    dbg.location(642,14);

                    // AST REWRITE
                    // elements: 44, 33
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 642:14: -> '<' '='
                    {
                        dbg.location(642,17);
                        adaptor.addChild(root_0, stream_33.next());
                        dbg.location(642,21);
                        adaptor.addChild(root_0, stream_44.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:643:4: ( '>' '=' )
                    {
                    dbg.location(643,4);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:643:4: ( '>' '=' )
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:643:5: '>' '='
                    {
                    dbg.location(643,5);
                    char_literal494=(Token)input.LT(1);
                    match(input,35,FOLLOW_35_in_relationalOp4855); if (failed) return retval;
                    if ( backtracking==0 ) stream_35.add(char_literal494);

                    dbg.location(643,9);
                    char_literal495=(Token)input.LT(1);
                    match(input,44,FOLLOW_44_in_relationalOp4857); if (failed) return retval;
                    if ( backtracking==0 ) stream_44.add(char_literal495);


                    }

                    dbg.location(643,14);

                    // AST REWRITE
                    // elements: 44, 35
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 643:14: -> '>' '='
                    {
                        dbg.location(643,17);
                        adaptor.addChild(root_0, stream_35.next());
                        dbg.location(643,21);
                        adaptor.addChild(root_0, stream_44.next());

                    }

                    }

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:644:4: '<'
                    {
                    dbg.location(644,4);
                    char_literal496=(Token)input.LT(1);
                    match(input,33,FOLLOW_33_in_relationalOp4869); if (failed) return retval;
                    if ( backtracking==0 ) stream_33.add(char_literal496);

                    dbg.location(644,8);

                    // AST REWRITE
                    // elements: 33
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 644:8: -> '<'
                    {
                        dbg.location(644,11);
                        adaptor.addChild(root_0, stream_33.next());

                    }

                    }

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:645:4: '>'
                    {
                    dbg.location(645,4);
                    char_literal497=(Token)input.LT(1);
                    match(input,35,FOLLOW_35_in_relationalOp4878); if (failed) return retval;
                    if ( backtracking==0 ) stream_35.add(char_literal497);

                    dbg.location(645,8);

                    // AST REWRITE
                    // elements: 35
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 645:8: -> '>'
                    {
                        dbg.location(645,11);
                        adaptor.addChild(root_0, stream_35.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 110, relationalOp_StartIndex); }
        }
        dbg.location(646, 2);

        }
        finally {
            dbg.exitRule("relationalOp");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end relationalOp

    public static class shiftExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start shiftExpression
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:648:1: shiftExpression : additiveExpression ( shiftOp additiveExpression )* -> additiveExpression ( shiftOp additiveExpression )* ;
    public final shiftExpression_return shiftExpression() throws RecognitionException {
        shiftExpression_return retval = new shiftExpression_return();
        retval.start = input.LT(1);
        int shiftExpression_StartIndex = input.index();
        Object root_0 = null;

        additiveExpression_return additiveExpression498 = null;

        shiftOp_return shiftOp499 = null;

        additiveExpression_return additiveExpression500 = null;


        RewriteRuleSubtreeStream stream_shiftOp=new RewriteRuleSubtreeStream(adaptor,"rule shiftOp");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try { dbg.enterRule("shiftExpression");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(648, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:649:5: ( additiveExpression ( shiftOp additiveExpression )* -> additiveExpression ( shiftOp additiveExpression )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:649:9: additiveExpression ( shiftOp additiveExpression )*
            {
            dbg.location(649,9);
            pushFollow(FOLLOW_additiveExpression_in_shiftExpression4898);
            additiveExpression498=additiveExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_additiveExpression.add(additiveExpression498.getTree());
            dbg.location(649,28);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:649:28: ( shiftOp additiveExpression )*
            try { dbg.enterSubRule(142);

            loop142:
            do {
                int alt142=2;
                try { dbg.enterDecision(142);

                int LA142_0 = input.LA(1);

                if ( (LA142_0==33) ) {
                    int LA142_1 = input.LA(2);

                    if ( (LA142_1==33) ) {
                        int LA142_27 = input.LA(3);

                        if ( (synpred210()) ) {
                            alt142=1;
                        }


                    }


                }
                else if ( (LA142_0==35) ) {
                    int LA142_2 = input.LA(2);

                    if ( (LA142_2==35) ) {
                        int LA142_58 = input.LA(3);

                        if ( (synpred210()) ) {
                            alt142=1;
                        }


                    }


                }


                } finally {dbg.exitDecision(142);}

                switch (alt142) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:649:30: shiftOp additiveExpression
            	    {
            	    dbg.location(649,30);
            	    pushFollow(FOLLOW_shiftOp_in_shiftExpression4902);
            	    shiftOp499=shiftOp();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_shiftOp.add(shiftOp499.getTree());
            	    dbg.location(649,38);
            	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression4904);
            	    additiveExpression500=additiveExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_additiveExpression.add(additiveExpression500.getTree());

            	    }
            	    break;

            	default :
            	    break loop142;
                }
            } while (true);
            } finally {dbg.exitSubRule(142);}

            dbg.location(649,60);

            // AST REWRITE
            // elements: additiveExpression, additiveExpression, shiftOp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 649:60: -> additiveExpression ( shiftOp additiveExpression )*
            {
                dbg.location(649,63);
                adaptor.addChild(root_0, stream_additiveExpression.next());
                dbg.location(649,82);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:649:82: ( shiftOp additiveExpression )*
                while ( stream_additiveExpression.hasNext()||stream_shiftOp.hasNext() ) {
                    dbg.location(649,84);
                    adaptor.addChild(root_0, stream_shiftOp.next());
                    dbg.location(649,92);
                    adaptor.addChild(root_0, stream_additiveExpression.next());

                }
                stream_additiveExpression.reset();
                stream_shiftOp.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 111, shiftExpression_StartIndex); }
        }
        dbg.location(650, 2);

        }
        finally {
            dbg.exitRule("shiftExpression");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end shiftExpression

    public static class shiftOp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start shiftOp
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:653:1: shiftOp : ( ( '<' '<' ) -> '<' '<' | ( '>' '>' '>' ) -> '>' '>' '>' | ( '>' '>' ) -> '>' '>' );
    public final shiftOp_return shiftOp() throws RecognitionException {
        shiftOp_return retval = new shiftOp_return();
        retval.start = input.LT(1);
        int shiftOp_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal501=null;
        Token char_literal502=null;
        Token char_literal503=null;
        Token char_literal504=null;
        Token char_literal505=null;
        Token char_literal506=null;
        Token char_literal507=null;

        Object char_literal501_tree=null;
        Object char_literal502_tree=null;
        Object char_literal503_tree=null;
        Object char_literal504_tree=null;
        Object char_literal505_tree=null;
        Object char_literal506_tree=null;
        Object char_literal507_tree=null;
        RewriteRuleTokenStream stream_35=new RewriteRuleTokenStream(adaptor,"token 35");
        RewriteRuleTokenStream stream_33=new RewriteRuleTokenStream(adaptor,"token 33");

        try { dbg.enterRule("shiftOp");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(653, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:654:2: ( ( '<' '<' ) -> '<' '<' | ( '>' '>' '>' ) -> '>' '>' '>' | ( '>' '>' ) -> '>' '>' )
            int alt143=3;
            try { dbg.enterDecision(143);

            int LA143_0 = input.LA(1);

            if ( (LA143_0==33) ) {
                alt143=1;
            }
            else if ( (LA143_0==35) ) {
                int LA143_2 = input.LA(2);

                if ( (LA143_2==35) ) {
                    int LA143_3 = input.LA(3);

                    if ( (synpred212()) ) {
                        alt143=2;
                    }
                    else if ( (true) ) {
                        alt143=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("653:1: shiftOp : ( ( '<' '<' ) -> '<' '<' | ( '>' '>' '>' ) -> '>' '>' '>' | ( '>' '>' ) -> '>' '>' );", 143, 3, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("653:1: shiftOp : ( ( '<' '<' ) -> '<' '<' | ( '>' '>' '>' ) -> '>' '>' '>' | ( '>' '>' ) -> '>' '>' );", 143, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("653:1: shiftOp : ( ( '<' '<' ) -> '<' '<' | ( '>' '>' '>' ) -> '>' '>' '>' | ( '>' '>' ) -> '>' '>' );", 143, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(143);}

            switch (alt143) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:654:4: ( '<' '<' )
                    {
                    dbg.location(654,4);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:654:4: ( '<' '<' )
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:654:5: '<' '<'
                    {
                    dbg.location(654,5);
                    char_literal501=(Token)input.LT(1);
                    match(input,33,FOLLOW_33_in_shiftOp4941); if (failed) return retval;
                    if ( backtracking==0 ) stream_33.add(char_literal501);

                    dbg.location(654,9);
                    char_literal502=(Token)input.LT(1);
                    match(input,33,FOLLOW_33_in_shiftOp4943); if (failed) return retval;
                    if ( backtracking==0 ) stream_33.add(char_literal502);


                    }

                    dbg.location(654,14);

                    // AST REWRITE
                    // elements: 33, 33
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 654:14: -> '<' '<'
                    {
                        dbg.location(654,17);
                        adaptor.addChild(root_0, stream_33.next());
                        dbg.location(654,21);
                        adaptor.addChild(root_0, stream_33.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:655:4: ( '>' '>' '>' )
                    {
                    dbg.location(655,4);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:655:4: ( '>' '>' '>' )
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:655:5: '>' '>' '>'
                    {
                    dbg.location(655,5);
                    char_literal503=(Token)input.LT(1);
                    match(input,35,FOLLOW_35_in_shiftOp4956); if (failed) return retval;
                    if ( backtracking==0 ) stream_35.add(char_literal503);

                    dbg.location(655,9);
                    char_literal504=(Token)input.LT(1);
                    match(input,35,FOLLOW_35_in_shiftOp4958); if (failed) return retval;
                    if ( backtracking==0 ) stream_35.add(char_literal504);

                    dbg.location(655,13);
                    char_literal505=(Token)input.LT(1);
                    match(input,35,FOLLOW_35_in_shiftOp4960); if (failed) return retval;
                    if ( backtracking==0 ) stream_35.add(char_literal505);


                    }

                    dbg.location(655,18);

                    // AST REWRITE
                    // elements: 35, 35, 35
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 655:18: -> '>' '>' '>'
                    {
                        dbg.location(655,21);
                        adaptor.addChild(root_0, stream_35.next());
                        dbg.location(655,25);
                        adaptor.addChild(root_0, stream_35.next());
                        dbg.location(655,29);
                        adaptor.addChild(root_0, stream_35.next());

                    }

                    }

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:656:4: ( '>' '>' )
                    {
                    dbg.location(656,4);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:656:4: ( '>' '>' )
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:656:5: '>' '>'
                    {
                    dbg.location(656,5);
                    char_literal506=(Token)input.LT(1);
                    match(input,35,FOLLOW_35_in_shiftOp4975); if (failed) return retval;
                    if ( backtracking==0 ) stream_35.add(char_literal506);

                    dbg.location(656,9);
                    char_literal507=(Token)input.LT(1);
                    match(input,35,FOLLOW_35_in_shiftOp4977); if (failed) return retval;
                    if ( backtracking==0 ) stream_35.add(char_literal507);


                    }

                    dbg.location(656,14);

                    // AST REWRITE
                    // elements: 35, 35
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 656:14: -> '>' '>'
                    {
                        dbg.location(656,17);
                        adaptor.addChild(root_0, stream_35.next());
                        dbg.location(656,21);
                        adaptor.addChild(root_0, stream_35.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 112, shiftOp_StartIndex); }
        }
        dbg.location(657, 2);

        }
        finally {
            dbg.exitRule("shiftOp");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end shiftOp

    public static class additiveExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start additiveExpression
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:660:1: additiveExpression : multiplicativeExpression ( ( '+' | '-' ) multiplicativeExpression )* ;
    public final additiveExpression_return additiveExpression() throws RecognitionException {
        additiveExpression_return retval = new additiveExpression_return();
        retval.start = input.LT(1);
        int additiveExpression_StartIndex = input.index();
        Object root_0 = null;

        Token set509=null;
        multiplicativeExpression_return multiplicativeExpression508 = null;

        multiplicativeExpression_return multiplicativeExpression510 = null;


        Object set509_tree=null;

        try { dbg.enterRule("additiveExpression");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(660, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:661:5: ( multiplicativeExpression ( ( '+' | '-' ) multiplicativeExpression )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:661:9: multiplicativeExpression ( ( '+' | '-' ) multiplicativeExpression )*
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(661,9);
            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5001);
            multiplicativeExpression508=multiplicativeExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression508.getTree());
            dbg.location(661,34);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:661:34: ( ( '+' | '-' ) multiplicativeExpression )*
            try { dbg.enterSubRule(144);

            loop144:
            do {
                int alt144=2;
                try { dbg.enterDecision(144);

                int LA144_0 = input.LA(1);

                if ( ((LA144_0>=104 && LA144_0<=105)) ) {
                    alt144=1;
                }


                } finally {dbg.exitDecision(144);}

                switch (alt144) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:661:36: ( '+' | '-' ) multiplicativeExpression
            	    {
            	    dbg.location(661,36);
            	    set509=(Token)input.LT(1);
            	    if ( (input.LA(1)>=104 && input.LA(1)<=105) ) {
            	        input.consume();
            	        if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set509));
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_additiveExpression5005);    throw mse;
            	    }

            	    dbg.location(661,48);
            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5013);
            	    multiplicativeExpression510=multiplicativeExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression510.getTree());

            	    }
            	    break;

            	default :
            	    break loop144;
                }
            } while (true);
            } finally {dbg.exitSubRule(144);}


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 113, additiveExpression_StartIndex); }
        }
        dbg.location(662, 2);

        }
        finally {
            dbg.exitRule("additiveExpression");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end additiveExpression

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start multiplicativeExpression
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:664:1: multiplicativeExpression : unaryExpression ( ( '*' | '/' | '%' ) unaryExpression )* ;
    public final multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        multiplicativeExpression_return retval = new multiplicativeExpression_return();
        retval.start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.index();
        Object root_0 = null;

        Token set512=null;
        unaryExpression_return unaryExpression511 = null;

        unaryExpression_return unaryExpression513 = null;


        Object set512_tree=null;

        try { dbg.enterRule("multiplicativeExpression");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(664, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:665:5: ( unaryExpression ( ( '*' | '/' | '%' ) unaryExpression )* )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:665:9: unaryExpression ( ( '*' | '/' | '%' ) unaryExpression )*
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(665,9);
            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression5033);
            unaryExpression511=unaryExpression();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, unaryExpression511.getTree());
            dbg.location(665,25);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:665:25: ( ( '*' | '/' | '%' ) unaryExpression )*
            try { dbg.enterSubRule(145);

            loop145:
            do {
                int alt145=2;
                try { dbg.enterDecision(145);

                int LA145_0 = input.LA(1);

                if ( (LA145_0==29||(LA145_0>=106 && LA145_0<=107)) ) {
                    alt145=1;
                }


                } finally {dbg.exitDecision(145);}

                switch (alt145) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:665:27: ( '*' | '/' | '%' ) unaryExpression
            	    {
            	    dbg.location(665,27);
            	    set512=(Token)input.LT(1);
            	    if ( input.LA(1)==29||(input.LA(1)>=106 && input.LA(1)<=107) ) {
            	        input.consume();
            	        if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set512));
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        dbg.recognitionException(mse);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_multiplicativeExpression5037);    throw mse;
            	    }

            	    dbg.location(665,47);
            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression5051);
            	    unaryExpression513=unaryExpression();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, unaryExpression513.getTree());

            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);
            } finally {dbg.exitSubRule(145);}


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 114, multiplicativeExpression_StartIndex); }
        }
        dbg.location(666, 2);

        }
        finally {
            dbg.exitRule("multiplicativeExpression");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end multiplicativeExpression

    public static class unaryExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start unaryExpression
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:668:1: unaryExpression : ( '+' unaryExpression -> '+' unaryExpression | '-' unaryExpression -> '-' unaryExpression | '++' unaryExpression -> '++' unaryExpression | '--' unaryExpression -> '--' unaryExpression | unaryExpressionNotPlusMinus -> unaryExpressionNotPlusMinus );
    public final unaryExpression_return unaryExpression() throws RecognitionException {
        unaryExpression_return retval = new unaryExpression_return();
        retval.start = input.LT(1);
        int unaryExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal514=null;
        Token char_literal516=null;
        Token string_literal518=null;
        Token string_literal520=null;
        unaryExpression_return unaryExpression515 = null;

        unaryExpression_return unaryExpression517 = null;

        unaryExpression_return unaryExpression519 = null;

        unaryExpression_return unaryExpression521 = null;

        unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus522 = null;


        Object char_literal514_tree=null;
        Object char_literal516_tree=null;
        Object string_literal518_tree=null;
        Object string_literal520_tree=null;
        RewriteRuleTokenStream stream_109=new RewriteRuleTokenStream(adaptor,"token 109");
        RewriteRuleTokenStream stream_108=new RewriteRuleTokenStream(adaptor,"token 108");
        RewriteRuleTokenStream stream_105=new RewriteRuleTokenStream(adaptor,"token 105");
        RewriteRuleTokenStream stream_104=new RewriteRuleTokenStream(adaptor,"token 104");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_unaryExpressionNotPlusMinus=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpressionNotPlusMinus");
        try { dbg.enterRule("unaryExpression");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(668, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:669:5: ( '+' unaryExpression -> '+' unaryExpression | '-' unaryExpression -> '-' unaryExpression | '++' unaryExpression -> '++' unaryExpression | '--' unaryExpression -> '--' unaryExpression | unaryExpressionNotPlusMinus -> unaryExpressionNotPlusMinus )
            int alt146=5;
            try { dbg.enterDecision(146);

            switch ( input.LA(1) ) {
            case 104:
                {
                alt146=1;
                }
                break;
            case 105:
                {
                alt146=2;
                }
                break;
            case 108:
                {
                alt146=3;
                }
                break;
            case 109:
                {
                alt146=4;
                }
                break;
            case Identifier:
            case FloatingPointLiteral:
            case CharacterLiteral:
            case StringLiteral:
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
            case 33:
            case 40:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 64:
            case 65:
            case 68:
            case 69:
            case 70:
            case 110:
            case 111:
            case 112:
            case 113:
                {
                alt146=5;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("668:1: unaryExpression : ( '+' unaryExpression -> '+' unaryExpression | '-' unaryExpression -> '-' unaryExpression | '++' unaryExpression -> '++' unaryExpression | '--' unaryExpression -> '--' unaryExpression | unaryExpressionNotPlusMinus -> unaryExpressionNotPlusMinus );", 146, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(146);}

            switch (alt146) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:669:9: '+' unaryExpression
                    {
                    dbg.location(669,9);
                    char_literal514=(Token)input.LT(1);
                    match(input,104,FOLLOW_104_in_unaryExpression5071); if (failed) return retval;
                    if ( backtracking==0 ) stream_104.add(char_literal514);

                    dbg.location(669,13);
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression5073);
                    unaryExpression515=unaryExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_unaryExpression.add(unaryExpression515.getTree());
                    dbg.location(669,29);

                    // AST REWRITE
                    // elements: unaryExpression, 104
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 669:29: -> '+' unaryExpression
                    {
                        dbg.location(669,32);
                        adaptor.addChild(root_0, stream_104.next());
                        dbg.location(669,36);
                        adaptor.addChild(root_0, stream_unaryExpression.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:670:7: '-' unaryExpression
                    {
                    dbg.location(670,7);
                    char_literal516=(Token)input.LT(1);
                    match(input,105,FOLLOW_105_in_unaryExpression5087); if (failed) return retval;
                    if ( backtracking==0 ) stream_105.add(char_literal516);

                    dbg.location(670,11);
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression5089);
                    unaryExpression517=unaryExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_unaryExpression.add(unaryExpression517.getTree());
                    dbg.location(670,27);

                    // AST REWRITE
                    // elements: 105, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 670:27: -> '-' unaryExpression
                    {
                        dbg.location(670,30);
                        adaptor.addChild(root_0, stream_105.next());
                        dbg.location(670,34);
                        adaptor.addChild(root_0, stream_unaryExpression.next());

                    }

                    }

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:671:9: '++' unaryExpression
                    {
                    dbg.location(671,9);
                    string_literal518=(Token)input.LT(1);
                    match(input,108,FOLLOW_108_in_unaryExpression5105); if (failed) return retval;
                    if ( backtracking==0 ) stream_108.add(string_literal518);

                    dbg.location(671,14);
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression5107);
                    unaryExpression519=unaryExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_unaryExpression.add(unaryExpression519.getTree());
                    dbg.location(671,30);

                    // AST REWRITE
                    // elements: 108, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 671:30: -> '++' unaryExpression
                    {
                        dbg.location(671,33);
                        adaptor.addChild(root_0, stream_108.next());
                        dbg.location(671,38);
                        adaptor.addChild(root_0, stream_unaryExpression.next());

                    }

                    }

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:672:9: '--' unaryExpression
                    {
                    dbg.location(672,9);
                    string_literal520=(Token)input.LT(1);
                    match(input,109,FOLLOW_109_in_unaryExpression5123); if (failed) return retval;
                    if ( backtracking==0 ) stream_109.add(string_literal520);

                    dbg.location(672,14);
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression5125);
                    unaryExpression521=unaryExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_unaryExpression.add(unaryExpression521.getTree());
                    dbg.location(672,30);

                    // AST REWRITE
                    // elements: unaryExpression, 109
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 672:30: -> '--' unaryExpression
                    {
                        dbg.location(672,33);
                        adaptor.addChild(root_0, stream_109.next());
                        dbg.location(672,38);
                        adaptor.addChild(root_0, stream_unaryExpression.next());

                    }

                    }

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:673:9: unaryExpressionNotPlusMinus
                    {
                    dbg.location(673,9);
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression5141);
                    unaryExpressionNotPlusMinus522=unaryExpressionNotPlusMinus();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_unaryExpressionNotPlusMinus.add(unaryExpressionNotPlusMinus522.getTree());
                    dbg.location(673,37);

                    // AST REWRITE
                    // elements: unaryExpressionNotPlusMinus
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 673:37: -> unaryExpressionNotPlusMinus
                    {
                        dbg.location(673,40);
                        adaptor.addChild(root_0, stream_unaryExpressionNotPlusMinus.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 115, unaryExpression_StartIndex); }
        }
        dbg.location(674, 5);

        }
        finally {
            dbg.exitRule("unaryExpression");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end unaryExpression

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start unaryExpressionNotPlusMinus
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );
    public final unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
        unaryExpressionNotPlusMinus_return retval = new unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal523=null;
        Token char_literal525=null;
        Token set530=null;
        unaryExpression_return unaryExpression524 = null;

        unaryExpression_return unaryExpression526 = null;

        castExpression_return castExpression527 = null;

        primary_return primary528 = null;

        selector_return selector529 = null;


        Object char_literal523_tree=null;
        Object char_literal525_tree=null;
        Object set530_tree=null;

        try { dbg.enterRule("unaryExpressionNotPlusMinus");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(676, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:677:5: ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? )
            int alt149=4;
            try { dbg.enterDecision(149);

            switch ( input.LA(1) ) {
            case 110:
                {
                alt149=1;
                }
                break;
            case 111:
                {
                alt149=2;
                }
                break;
            case 65:
                {
                switch ( input.LA(2) ) {
                case Identifier:
                    {
                    int LA149_27 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 27, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 55:
                    {
                    int LA149_28 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 28, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 56:
                    {
                    int LA149_29 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 29, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 57:
                    {
                    int LA149_30 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 30, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 58:
                    {
                    int LA149_31 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 31, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 59:
                    {
                    int LA149_32 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 32, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 60:
                    {
                    int LA149_33 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 33, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 61:
                    {
                    int LA149_34 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 34, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 62:
                    {
                    int LA149_35 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 35, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 104:
                    {
                    int LA149_36 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 36, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 105:
                    {
                    int LA149_37 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 37, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 108:
                    {
                    int LA149_38 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 38, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 109:
                    {
                    int LA149_39 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 39, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 110:
                    {
                    int LA149_40 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 40, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 111:
                    {
                    int LA149_41 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 41, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 65:
                    {
                    int LA149_42 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 42, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 33:
                    {
                    int LA149_43 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 43, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 112:
                    {
                    int LA149_44 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 44, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 64:
                    {
                    int LA149_45 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 45, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case HexLiteral:
                    {
                    int LA149_46 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 46, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case OctalLiteral:
                    {
                    int LA149_47 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 47, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case DecimalLiteral:
                    {
                    int LA149_48 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 48, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case FloatingPointLiteral:
                    {
                    int LA149_49 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 49, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case CharacterLiteral:
                    {
                    int LA149_50 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 50, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case StringLiteral:
                    {
                    int LA149_51 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 51, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 69:
                    {
                    int LA149_52 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 52, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 70:
                    {
                    int LA149_53 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 53, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 68:
                    {
                    int LA149_54 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 54, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 113:
                    {
                    int LA149_55 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 55, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 40:
                    {
                    int LA149_56 = input.LA(3);

                    if ( (synpred224()) ) {
                        alt149=3;
                    }
                    else if ( (true) ) {
                        alt149=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 56, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 3, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case Identifier:
            case FloatingPointLiteral:
            case CharacterLiteral:
            case StringLiteral:
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
            case 33:
            case 40:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 64:
            case 68:
            case 69:
            case 70:
            case 112:
            case 113:
                {
                alt149=4;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("676:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );", 149, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(149);}

            switch (alt149) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:677:9: '~' unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(677,9);
                    char_literal523=(Token)input.LT(1);
                    match(input,110,FOLLOW_110_in_unaryExpressionNotPlusMinus5164); if (failed) return retval;
                    if ( backtracking==0 ) {
                    char_literal523_tree = (Object)adaptor.create(char_literal523);
                    adaptor.addChild(root_0, char_literal523_tree);
                    }
                    dbg.location(677,13);
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus5166);
                    unaryExpression524=unaryExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, unaryExpression524.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:678:8: '!' unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(678,8);
                    char_literal525=(Token)input.LT(1);
                    match(input,111,FOLLOW_111_in_unaryExpressionNotPlusMinus5175); if (failed) return retval;
                    if ( backtracking==0 ) {
                    char_literal525_tree = (Object)adaptor.create(char_literal525);
                    adaptor.addChild(root_0, char_literal525_tree);
                    }
                    dbg.location(678,12);
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus5177);
                    unaryExpression526=unaryExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, unaryExpression526.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:679:9: castExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(679,9);
                    pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus5187);
                    castExpression527=castExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, castExpression527.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:680:9: primary ( selector )* ( '++' | '--' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(680,9);
                    pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus5197);
                    primary528=primary();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, primary528.getTree());
                    dbg.location(680,17);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:680:17: ( selector )*
                    try { dbg.enterSubRule(147);

                    loop147:
                    do {
                        int alt147=2;
                        try { dbg.enterDecision(147);

                        int LA147_0 = input.LA(1);

                        if ( (LA147_0==28||LA147_0==41) ) {
                            alt147=1;
                        }


                        } finally {dbg.exitDecision(147);}

                        switch (alt147) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: selector
                    	    {
                    	    dbg.location(680,17);
                    	    pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus5199);
                    	    selector529=selector();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, selector529.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop147;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(147);}

                    dbg.location(680,27);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:680:27: ( '++' | '--' )?
                    int alt148=2;
                    try { dbg.enterSubRule(148);
                    try { dbg.enterDecision(148);

                    int LA148_0 = input.LA(1);

                    if ( ((LA148_0>=108 && LA148_0<=109)) ) {
                        alt148=1;
                    }
                    } finally {dbg.exitDecision(148);}

                    switch (alt148) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:
                            {
                            dbg.location(680,27);
                            set530=(Token)input.LT(1);
                            if ( (input.LA(1)>=108 && input.LA(1)<=109) ) {
                                input.consume();
                                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set530));
                                errorRecovery=false;failed=false;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                MismatchedSetException mse =
                                    new MismatchedSetException(null,input);
                                dbg.recognitionException(mse);
                                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_unaryExpressionNotPlusMinus5202);    throw mse;
                            }


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(148);}


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 116, unaryExpressionNotPlusMinus_StartIndex); }
        }
        dbg.location(681, 5);

        }
        finally {
            dbg.exitRule("unaryExpressionNotPlusMinus");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end unaryExpressionNotPlusMinus

    public static class castExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start castExpression
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:683:1: castExpression : ( '(' primitiveType ')' unaryExpression | '(' ( type | expression ) ')' unaryExpressionNotPlusMinus );
    public final castExpression_return castExpression() throws RecognitionException {
        castExpression_return retval = new castExpression_return();
        retval.start = input.LT(1);
        int castExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal531=null;
        Token char_literal533=null;
        Token char_literal535=null;
        Token char_literal538=null;
        primitiveType_return primitiveType532 = null;

        unaryExpression_return unaryExpression534 = null;

        type_return type536 = null;

        expression_return expression537 = null;

        unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus539 = null;


        Object char_literal531_tree=null;
        Object char_literal533_tree=null;
        Object char_literal535_tree=null;
        Object char_literal538_tree=null;

        try { dbg.enterRule("castExpression");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(683, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:684:5: ( '(' primitiveType ')' unaryExpression | '(' ( type | expression ) ')' unaryExpressionNotPlusMinus )
            int alt151=2;
            try { dbg.enterDecision(151);

            int LA151_0 = input.LA(1);

            if ( (LA151_0==65) ) {
                switch ( input.LA(2) ) {
                case 55:
                    {
                    int LA151_2 = input.LA(3);

                    if ( (synpred228()) ) {
                        alt151=1;
                    }
                    else if ( (true) ) {
                        alt151=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("683:1: castExpression : ( '(' primitiveType ')' unaryExpression | '(' ( type | expression ) ')' unaryExpressionNotPlusMinus );", 151, 2, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 56:
                    {
                    int LA151_3 = input.LA(3);

                    if ( (synpred228()) ) {
                        alt151=1;
                    }
                    else if ( (true) ) {
                        alt151=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("683:1: castExpression : ( '(' primitiveType ')' unaryExpression | '(' ( type | expression ) ')' unaryExpressionNotPlusMinus );", 151, 3, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 57:
                    {
                    int LA151_4 = input.LA(3);

                    if ( (synpred228()) ) {
                        alt151=1;
                    }
                    else if ( (true) ) {
                        alt151=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("683:1: castExpression : ( '(' primitiveType ')' unaryExpression | '(' ( type | expression ) ')' unaryExpressionNotPlusMinus );", 151, 4, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 58:
                    {
                    int LA151_5 = input.LA(3);

                    if ( (synpred228()) ) {
                        alt151=1;
                    }
                    else if ( (true) ) {
                        alt151=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("683:1: castExpression : ( '(' primitiveType ')' unaryExpression | '(' ( type | expression ) ')' unaryExpressionNotPlusMinus );", 151, 5, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 59:
                    {
                    int LA151_6 = input.LA(3);

                    if ( (synpred228()) ) {
                        alt151=1;
                    }
                    else if ( (true) ) {
                        alt151=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("683:1: castExpression : ( '(' primitiveType ')' unaryExpression | '(' ( type | expression ) ')' unaryExpressionNotPlusMinus );", 151, 6, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 60:
                    {
                    int LA151_7 = input.LA(3);

                    if ( (synpred228()) ) {
                        alt151=1;
                    }
                    else if ( (true) ) {
                        alt151=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("683:1: castExpression : ( '(' primitiveType ')' unaryExpression | '(' ( type | expression ) ')' unaryExpressionNotPlusMinus );", 151, 7, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 61:
                    {
                    int LA151_8 = input.LA(3);

                    if ( (synpred228()) ) {
                        alt151=1;
                    }
                    else if ( (true) ) {
                        alt151=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("683:1: castExpression : ( '(' primitiveType ')' unaryExpression | '(' ( type | expression ) ')' unaryExpressionNotPlusMinus );", 151, 8, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 62:
                    {
                    int LA151_9 = input.LA(3);

                    if ( (synpred228()) ) {
                        alt151=1;
                    }
                    else if ( (true) ) {
                        alt151=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("683:1: castExpression : ( '(' primitiveType ')' unaryExpression | '(' ( type | expression ) ')' unaryExpressionNotPlusMinus );", 151, 9, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case Identifier:
                case FloatingPointLiteral:
                case CharacterLiteral:
                case StringLiteral:
                case HexLiteral:
                case OctalLiteral:
                case DecimalLiteral:
                case 33:
                case 40:
                case 64:
                case 65:
                case 68:
                case 69:
                case 70:
                case 104:
                case 105:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                    {
                    alt151=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("683:1: castExpression : ( '(' primitiveType ')' unaryExpression | '(' ( type | expression ) ')' unaryExpressionNotPlusMinus );", 151, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("683:1: castExpression : ( '(' primitiveType ')' unaryExpression | '(' ( type | expression ) ')' unaryExpressionNotPlusMinus );", 151, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(151);}

            switch (alt151) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:684:8: '(' primitiveType ')' unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(684,8);
                    char_literal531=(Token)input.LT(1);
                    match(input,65,FOLLOW_65_in_castExpression5225); if (failed) return retval;
                    if ( backtracking==0 ) {
                    char_literal531_tree = (Object)adaptor.create(char_literal531);
                    adaptor.addChild(root_0, char_literal531_tree);
                    }
                    dbg.location(684,12);
                    pushFollow(FOLLOW_primitiveType_in_castExpression5227);
                    primitiveType532=primitiveType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, primitiveType532.getTree());
                    dbg.location(684,26);
                    char_literal533=(Token)input.LT(1);
                    match(input,66,FOLLOW_66_in_castExpression5229); if (failed) return retval;
                    if ( backtracking==0 ) {
                    char_literal533_tree = (Object)adaptor.create(char_literal533);
                    adaptor.addChild(root_0, char_literal533_tree);
                    }
                    dbg.location(684,30);
                    pushFollow(FOLLOW_unaryExpression_in_castExpression5231);
                    unaryExpression534=unaryExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, unaryExpression534.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:685:8: '(' ( type | expression ) ')' unaryExpressionNotPlusMinus
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(685,8);
                    char_literal535=(Token)input.LT(1);
                    match(input,65,FOLLOW_65_in_castExpression5240); if (failed) return retval;
                    if ( backtracking==0 ) {
                    char_literal535_tree = (Object)adaptor.create(char_literal535);
                    adaptor.addChild(root_0, char_literal535_tree);
                    }
                    dbg.location(685,12);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:685:12: ( type | expression )
                    int alt150=2;
                    try { dbg.enterSubRule(150);
                    try { dbg.enterDecision(150);

                    switch ( input.LA(1) ) {
                    case Identifier:
                        {
                        int LA150_1 = input.LA(2);

                        if ( (synpred229()) ) {
                            alt150=1;
                        }
                        else if ( (true) ) {
                            alt150=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("685:12: ( type | expression )", 150, 1, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        }
                        break;
                    case 55:
                        {
                        switch ( input.LA(2) ) {
                        case 41:
                            {
                            int LA150_58 = input.LA(3);

                            if ( (synpred229()) ) {
                                alt150=1;
                            }
                            else if ( (true) ) {
                                alt150=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("685:12: ( type | expression )", 150, 58, input);

                                dbg.recognitionException(nvae);
                                throw nvae;
                            }
                            }
                            break;
                        case 66:
                            {
                            alt150=1;
                            }
                            break;
                        case 28:
                            {
                            alt150=2;
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("685:12: ( type | expression )", 150, 2, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }

                        }
                        break;
                    case 56:
                        {
                        switch ( input.LA(2) ) {
                        case 41:
                            {
                            int LA150_61 = input.LA(3);

                            if ( (synpred229()) ) {
                                alt150=1;
                            }
                            else if ( (true) ) {
                                alt150=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("685:12: ( type | expression )", 150, 61, input);

                                dbg.recognitionException(nvae);
                                throw nvae;
                            }
                            }
                            break;
                        case 28:
                            {
                            alt150=2;
                            }
                            break;
                        case 66:
                            {
                            alt150=1;
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("685:12: ( type | expression )", 150, 3, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }

                        }
                        break;
                    case 57:
                        {
                        switch ( input.LA(2) ) {
                        case 41:
                            {
                            int LA150_64 = input.LA(3);

                            if ( (synpred229()) ) {
                                alt150=1;
                            }
                            else if ( (true) ) {
                                alt150=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("685:12: ( type | expression )", 150, 64, input);

                                dbg.recognitionException(nvae);
                                throw nvae;
                            }
                            }
                            break;
                        case 66:
                            {
                            alt150=1;
                            }
                            break;
                        case 28:
                            {
                            alt150=2;
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("685:12: ( type | expression )", 150, 4, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }

                        }
                        break;
                    case 58:
                        {
                        switch ( input.LA(2) ) {
                        case 41:
                            {
                            int LA150_67 = input.LA(3);

                            if ( (synpred229()) ) {
                                alt150=1;
                            }
                            else if ( (true) ) {
                                alt150=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("685:12: ( type | expression )", 150, 67, input);

                                dbg.recognitionException(nvae);
                                throw nvae;
                            }
                            }
                            break;
                        case 66:
                            {
                            alt150=1;
                            }
                            break;
                        case 28:
                            {
                            alt150=2;
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("685:12: ( type | expression )", 150, 5, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }

                        }
                        break;
                    case 59:
                        {
                        switch ( input.LA(2) ) {
                        case 41:
                            {
                            int LA150_70 = input.LA(3);

                            if ( (synpred229()) ) {
                                alt150=1;
                            }
                            else if ( (true) ) {
                                alt150=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("685:12: ( type | expression )", 150, 70, input);

                                dbg.recognitionException(nvae);
                                throw nvae;
                            }
                            }
                            break;
                        case 28:
                            {
                            alt150=2;
                            }
                            break;
                        case 66:
                            {
                            alt150=1;
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("685:12: ( type | expression )", 150, 6, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }

                        }
                        break;
                    case 60:
                        {
                        switch ( input.LA(2) ) {
                        case 41:
                            {
                            int LA150_73 = input.LA(3);

                            if ( (synpred229()) ) {
                                alt150=1;
                            }
                            else if ( (true) ) {
                                alt150=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("685:12: ( type | expression )", 150, 73, input);

                                dbg.recognitionException(nvae);
                                throw nvae;
                            }
                            }
                            break;
                        case 28:
                            {
                            alt150=2;
                            }
                            break;
                        case 66:
                            {
                            alt150=1;
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("685:12: ( type | expression )", 150, 7, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }

                        }
                        break;
                    case 61:
                        {
                        switch ( input.LA(2) ) {
                        case 41:
                            {
                            int LA150_76 = input.LA(3);

                            if ( (synpred229()) ) {
                                alt150=1;
                            }
                            else if ( (true) ) {
                                alt150=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("685:12: ( type | expression )", 150, 76, input);

                                dbg.recognitionException(nvae);
                                throw nvae;
                            }
                            }
                            break;
                        case 28:
                            {
                            alt150=2;
                            }
                            break;
                        case 66:
                            {
                            alt150=1;
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("685:12: ( type | expression )", 150, 8, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }

                        }
                        break;
                    case 62:
                        {
                        switch ( input.LA(2) ) {
                        case 41:
                            {
                            int LA150_79 = input.LA(3);

                            if ( (synpred229()) ) {
                                alt150=1;
                            }
                            else if ( (true) ) {
                                alt150=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("685:12: ( type | expression )", 150, 79, input);

                                dbg.recognitionException(nvae);
                                throw nvae;
                            }
                            }
                            break;
                        case 66:
                            {
                            alt150=1;
                            }
                            break;
                        case 28:
                            {
                            alt150=2;
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("685:12: ( type | expression )", 150, 9, input);

                            dbg.recognitionException(nvae);
                            throw nvae;
                        }

                        }
                        break;
                    case FloatingPointLiteral:
                    case CharacterLiteral:
                    case StringLiteral:
                    case HexLiteral:
                    case OctalLiteral:
                    case DecimalLiteral:
                    case 33:
                    case 40:
                    case 64:
                    case 65:
                    case 68:
                    case 69:
                    case 70:
                    case 104:
                    case 105:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                        {
                        alt150=2;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("685:12: ( type | expression )", 150, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    } finally {dbg.exitDecision(150);}

                    switch (alt150) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:685:13: type
                            {
                            dbg.location(685,13);
                            pushFollow(FOLLOW_type_in_castExpression5243);
                            type536=type();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, type536.getTree());

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:685:20: expression
                            {
                            dbg.location(685,20);
                            pushFollow(FOLLOW_expression_in_castExpression5247);
                            expression537=expression();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, expression537.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(150);}

                    dbg.location(685,32);
                    char_literal538=(Token)input.LT(1);
                    match(input,66,FOLLOW_66_in_castExpression5250); if (failed) return retval;
                    if ( backtracking==0 ) {
                    char_literal538_tree = (Object)adaptor.create(char_literal538);
                    adaptor.addChild(root_0, char_literal538_tree);
                    }
                    dbg.location(685,36);
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression5252);
                    unaryExpressionNotPlusMinus539=unaryExpressionNotPlusMinus();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, unaryExpressionNotPlusMinus539.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 117, castExpression_StartIndex); }
        }
        dbg.location(686, 5);

        }
        finally {
            dbg.exitRule("castExpression");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end castExpression

    public static class primary_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start primary
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:688:1: primary : ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix | nonWildcardTypeArguments 'this' arguments | 'this' ( '.' Identifier )* ( identifierSuffix )? | 'super' superSuffix | literal | 'new' creator | Identifier ( '.' Identifier )* ( identifierSuffix )? | primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' );
    public final primary_return primary() throws RecognitionException {
        primary_return retval = new primary_return();
        retval.start = input.LT(1);
        int primary_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal544=null;
        Token string_literal546=null;
        Token char_literal547=null;
        Token Identifier548=null;
        Token string_literal550=null;
        Token string_literal553=null;
        Token Identifier555=null;
        Token char_literal556=null;
        Token Identifier557=null;
        Token char_literal560=null;
        Token char_literal561=null;
        Token char_literal562=null;
        Token string_literal563=null;
        Token string_literal564=null;
        Token char_literal565=null;
        Token string_literal566=null;
        parExpression_return parExpression540 = null;

        nonWildcardTypeArguments_return nonWildcardTypeArguments541 = null;

        explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix542 = null;

        nonWildcardTypeArguments_return nonWildcardTypeArguments543 = null;

        arguments_return arguments545 = null;

        identifierSuffix_return identifierSuffix549 = null;

        superSuffix_return superSuffix551 = null;

        literal_return literal552 = null;

        creator_return creator554 = null;

        identifierSuffix_return identifierSuffix558 = null;

        primitiveType_return primitiveType559 = null;


        Object string_literal544_tree=null;
        Object string_literal546_tree=null;
        Object char_literal547_tree=null;
        Object Identifier548_tree=null;
        Object string_literal550_tree=null;
        Object string_literal553_tree=null;
        Object Identifier555_tree=null;
        Object char_literal556_tree=null;
        Object Identifier557_tree=null;
        Object char_literal560_tree=null;
        Object char_literal561_tree=null;
        Object char_literal562_tree=null;
        Object string_literal563_tree=null;
        Object string_literal564_tree=null;
        Object char_literal565_tree=null;
        Object string_literal566_tree=null;

        try { dbg.enterRule("primary");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(688, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:689:5: ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix | nonWildcardTypeArguments 'this' arguments | 'this' ( '.' Identifier )* ( identifierSuffix )? | 'super' superSuffix | literal | 'new' creator | Identifier ( '.' Identifier )* ( identifierSuffix )? | primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' )
            int alt157=10;
            try { dbg.enterDecision(157);

            switch ( input.LA(1) ) {
            case 65:
                {
                alt157=1;
                }
                break;
            case 33:
                {
                switch ( input.LA(2) ) {
                case Identifier:
                    {
                    int LA157_25 = input.LA(3);

                    if ( (synpred231()) ) {
                        alt157=2;
                    }
                    else if ( (synpred232()) ) {
                        alt157=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("688:1: primary : ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix | nonWildcardTypeArguments 'this' arguments | 'this' ( '.' Identifier )* ( identifierSuffix )? | 'super' superSuffix | literal | 'new' creator | Identifier ( '.' Identifier )* ( identifierSuffix )? | primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' );", 157, 25, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 55:
                    {
                    int LA157_26 = input.LA(3);

                    if ( (synpred231()) ) {
                        alt157=2;
                    }
                    else if ( (synpred232()) ) {
                        alt157=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("688:1: primary : ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix | nonWildcardTypeArguments 'this' arguments | 'this' ( '.' Identifier )* ( identifierSuffix )? | 'super' superSuffix | literal | 'new' creator | Identifier ( '.' Identifier )* ( identifierSuffix )? | primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' );", 157, 26, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 56:
                    {
                    int LA157_27 = input.LA(3);

                    if ( (synpred231()) ) {
                        alt157=2;
                    }
                    else if ( (synpred232()) ) {
                        alt157=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("688:1: primary : ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix | nonWildcardTypeArguments 'this' arguments | 'this' ( '.' Identifier )* ( identifierSuffix )? | 'super' superSuffix | literal | 'new' creator | Identifier ( '.' Identifier )* ( identifierSuffix )? | primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' );", 157, 27, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 57:
                    {
                    int LA157_28 = input.LA(3);

                    if ( (synpred231()) ) {
                        alt157=2;
                    }
                    else if ( (synpred232()) ) {
                        alt157=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("688:1: primary : ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix | nonWildcardTypeArguments 'this' arguments | 'this' ( '.' Identifier )* ( identifierSuffix )? | 'super' superSuffix | literal | 'new' creator | Identifier ( '.' Identifier )* ( identifierSuffix )? | primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' );", 157, 28, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 58:
                    {
                    int LA157_29 = input.LA(3);

                    if ( (synpred231()) ) {
                        alt157=2;
                    }
                    else if ( (synpred232()) ) {
                        alt157=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("688:1: primary : ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix | nonWildcardTypeArguments 'this' arguments | 'this' ( '.' Identifier )* ( identifierSuffix )? | 'super' superSuffix | literal | 'new' creator | Identifier ( '.' Identifier )* ( identifierSuffix )? | primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' );", 157, 29, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 59:
                    {
                    int LA157_30 = input.LA(3);

                    if ( (synpred231()) ) {
                        alt157=2;
                    }
                    else if ( (synpred232()) ) {
                        alt157=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("688:1: primary : ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix | nonWildcardTypeArguments 'this' arguments | 'this' ( '.' Identifier )* ( identifierSuffix )? | 'super' superSuffix | literal | 'new' creator | Identifier ( '.' Identifier )* ( identifierSuffix )? | primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' );", 157, 30, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 60:
                    {
                    int LA157_31 = input.LA(3);

                    if ( (synpred231()) ) {
                        alt157=2;
                    }
                    else if ( (synpred232()) ) {
                        alt157=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("688:1: primary : ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix | nonWildcardTypeArguments 'this' arguments | 'this' ( '.' Identifier )* ( identifierSuffix )? | 'super' superSuffix | literal | 'new' creator | Identifier ( '.' Identifier )* ( identifierSuffix )? | primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' );", 157, 31, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 61:
                    {
                    int LA157_32 = input.LA(3);

                    if ( (synpred231()) ) {
                        alt157=2;
                    }
                    else if ( (synpred232()) ) {
                        alt157=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("688:1: primary : ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix | nonWildcardTypeArguments 'this' arguments | 'this' ( '.' Identifier )* ( identifierSuffix )? | 'super' superSuffix | literal | 'new' creator | Identifier ( '.' Identifier )* ( identifierSuffix )? | primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' );", 157, 32, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                case 62:
                    {
                    int LA157_33 = input.LA(3);

                    if ( (synpred231()) ) {
                        alt157=2;
                    }
                    else if ( (synpred232()) ) {
                        alt157=3;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("688:1: primary : ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix | nonWildcardTypeArguments 'this' arguments | 'this' ( '.' Identifier )* ( identifierSuffix )? | 'super' superSuffix | literal | 'new' creator | Identifier ( '.' Identifier )* ( identifierSuffix )? | primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' );", 157, 33, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("688:1: primary : ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix | nonWildcardTypeArguments 'this' arguments | 'this' ( '.' Identifier )* ( identifierSuffix )? | 'super' superSuffix | literal | 'new' creator | Identifier ( '.' Identifier )* ( identifierSuffix )? | primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' );", 157, 2, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            case 112:
                {
                alt157=4;
                }
                break;
            case 64:
                {
                alt157=5;
                }
                break;
            case FloatingPointLiteral:
            case CharacterLiteral:
            case StringLiteral:
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
            case 68:
            case 69:
            case 70:
                {
                alt157=6;
                }
                break;
            case 113:
                {
                alt157=7;
                }
                break;
            case Identifier:
                {
                alt157=8;
                }
                break;
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
                {
                alt157=9;
                }
                break;
            case 40:
                {
                alt157=10;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("688:1: primary : ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix | nonWildcardTypeArguments 'this' arguments | 'this' ( '.' Identifier )* ( identifierSuffix )? | 'super' superSuffix | literal | 'new' creator | Identifier ( '.' Identifier )* ( identifierSuffix )? | primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' );", 157, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(157);}

            switch (alt157) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:689:7: parExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(689,7);
                    pushFollow(FOLLOW_parExpression_in_primary5269);
                    parExpression540=parExpression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, parExpression540.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:690:9: nonWildcardTypeArguments explicitGenericInvocationSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(690,9);
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary5279);
                    nonWildcardTypeArguments541=nonWildcardTypeArguments();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments541.getTree());
                    dbg.location(690,34);
                    pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_primary5281);
                    explicitGenericInvocationSuffix542=explicitGenericInvocationSuffix();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, explicitGenericInvocationSuffix542.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:691:9: nonWildcardTypeArguments 'this' arguments
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(691,9);
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary5291);
                    nonWildcardTypeArguments543=nonWildcardTypeArguments();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments543.getTree());
                    dbg.location(691,34);
                    string_literal544=(Token)input.LT(1);
                    match(input,112,FOLLOW_112_in_primary5293); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal544_tree = (Object)adaptor.create(string_literal544);
                    adaptor.addChild(root_0, string_literal544_tree);
                    }
                    dbg.location(691,41);
                    pushFollow(FOLLOW_arguments_in_primary5295);
                    arguments545=arguments();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, arguments545.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:692:9: 'this' ( '.' Identifier )* ( identifierSuffix )?
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(692,9);
                    string_literal546=(Token)input.LT(1);
                    match(input,112,FOLLOW_112_in_primary5305); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal546_tree = (Object)adaptor.create(string_literal546);
                    adaptor.addChild(root_0, string_literal546_tree);
                    }
                    dbg.location(692,16);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:692:16: ( '.' Identifier )*
                    try { dbg.enterSubRule(152);

                    loop152:
                    do {
                        int alt152=2;
                        try { dbg.enterDecision(152);

                        int LA152_0 = input.LA(1);

                        if ( (LA152_0==28) ) {
                            int LA152_3 = input.LA(2);

                            if ( (LA152_3==Identifier) ) {
                                int LA152_34 = input.LA(3);

                                if ( (synpred233()) ) {
                                    alt152=1;
                                }


                            }


                        }


                        } finally {dbg.exitDecision(152);}

                        switch (alt152) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:692:17: '.' Identifier
                    	    {
                    	    dbg.location(692,17);
                    	    char_literal547=(Token)input.LT(1);
                    	    match(input,28,FOLLOW_28_in_primary5308); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    char_literal547_tree = (Object)adaptor.create(char_literal547);
                    	    adaptor.addChild(root_0, char_literal547_tree);
                    	    }
                    	    dbg.location(692,21);
                    	    Identifier548=(Token)input.LT(1);
                    	    match(input,Identifier,FOLLOW_Identifier_in_primary5310); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    Identifier548_tree = (Object)adaptor.create(Identifier548);
                    	    adaptor.addChild(root_0, Identifier548_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop152;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(152);}

                    dbg.location(692,34);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:692:34: ( identifierSuffix )?
                    int alt153=2;
                    try { dbg.enterSubRule(153);
                    try { dbg.enterDecision(153);

                    switch ( input.LA(1) ) {
                        case 41:
                            {
                            switch ( input.LA(2) ) {
                                case 42:
                                    {
                                    alt153=1;
                                    }
                                    break;
                                case 104:
                                    {
                                    int LA153_34 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case 105:
                                    {
                                    int LA153_35 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case 108:
                                    {
                                    int LA153_36 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case 109:
                                    {
                                    int LA153_37 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case 110:
                                    {
                                    int LA153_38 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case 111:
                                    {
                                    int LA153_39 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case 65:
                                    {
                                    int LA153_40 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case 33:
                                    {
                                    int LA153_41 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case 112:
                                    {
                                    int LA153_42 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case 64:
                                    {
                                    int LA153_43 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case HexLiteral:
                                    {
                                    int LA153_44 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case OctalLiteral:
                                    {
                                    int LA153_45 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case DecimalLiteral:
                                    {
                                    int LA153_46 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case FloatingPointLiteral:
                                    {
                                    int LA153_47 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case CharacterLiteral:
                                    {
                                    int LA153_48 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case StringLiteral:
                                    {
                                    int LA153_49 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case 69:
                                    {
                                    int LA153_50 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case 70:
                                    {
                                    int LA153_51 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case 68:
                                    {
                                    int LA153_52 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case 113:
                                    {
                                    int LA153_53 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case Identifier:
                                    {
                                    int LA153_54 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case 55:
                                    {
                                    int LA153_55 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case 56:
                                    {
                                    int LA153_56 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case 57:
                                    {
                                    int LA153_57 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case 58:
                                    {
                                    int LA153_58 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case 59:
                                    {
                                    int LA153_59 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case 60:
                                    {
                                    int LA153_60 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case 61:
                                    {
                                    int LA153_61 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case 62:
                                    {
                                    int LA153_62 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case 40:
                                    {
                                    int LA153_63 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                        case 65:
                            {
                            alt153=1;
                            }
                            break;
                        case 28:
                            {
                            switch ( input.LA(2) ) {
                                case 112:
                                    {
                                    int LA153_64 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case 113:
                                    {
                                    int LA153_66 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case 64:
                                    {
                                    int LA153_67 = input.LA(3);

                                    if ( (synpred234()) ) {
                                        alt153=1;
                                    }
                                    }
                                    break;
                                case 30:
                                case 33:
                                    {
                                    alt153=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    } finally {dbg.exitDecision(153);}

                    switch (alt153) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:692:35: identifierSuffix
                            {
                            dbg.location(692,35);
                            pushFollow(FOLLOW_identifierSuffix_in_primary5315);
                            identifierSuffix549=identifierSuffix();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, identifierSuffix549.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(153);}


                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:693:9: 'super' superSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(693,9);
                    string_literal550=(Token)input.LT(1);
                    match(input,64,FOLLOW_64_in_primary5327); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal550_tree = (Object)adaptor.create(string_literal550);
                    adaptor.addChild(root_0, string_literal550_tree);
                    }
                    dbg.location(693,17);
                    pushFollow(FOLLOW_superSuffix_in_primary5329);
                    superSuffix551=superSuffix();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, superSuffix551.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:694:9: literal
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(694,9);
                    pushFollow(FOLLOW_literal_in_primary5339);
                    literal552=literal();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, literal552.getTree());

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:695:9: 'new' creator
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(695,9);
                    string_literal553=(Token)input.LT(1);
                    match(input,113,FOLLOW_113_in_primary5349); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal553_tree = (Object)adaptor.create(string_literal553);
                    adaptor.addChild(root_0, string_literal553_tree);
                    }
                    dbg.location(695,15);
                    pushFollow(FOLLOW_creator_in_primary5351);
                    creator554=creator();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, creator554.getTree());

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:696:9: Identifier ( '.' Identifier )* ( identifierSuffix )?
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(696,9);
                    Identifier555=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_primary5361); if (failed) return retval;
                    if ( backtracking==0 ) {
                    Identifier555_tree = (Object)adaptor.create(Identifier555);
                    adaptor.addChild(root_0, Identifier555_tree);
                    }
                    dbg.location(696,20);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:696:20: ( '.' Identifier )*
                    try { dbg.enterSubRule(154);

                    loop154:
                    do {
                        int alt154=2;
                        try { dbg.enterDecision(154);

                        int LA154_0 = input.LA(1);

                        if ( (LA154_0==28) ) {
                            int LA154_3 = input.LA(2);

                            if ( (LA154_3==Identifier) ) {
                                int LA154_35 = input.LA(3);

                                if ( (synpred239()) ) {
                                    alt154=1;
                                }


                            }


                        }


                        } finally {dbg.exitDecision(154);}

                        switch (alt154) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:696:21: '.' Identifier
                    	    {
                    	    dbg.location(696,21);
                    	    char_literal556=(Token)input.LT(1);
                    	    match(input,28,FOLLOW_28_in_primary5364); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    char_literal556_tree = (Object)adaptor.create(char_literal556);
                    	    adaptor.addChild(root_0, char_literal556_tree);
                    	    }
                    	    dbg.location(696,25);
                    	    Identifier557=(Token)input.LT(1);
                    	    match(input,Identifier,FOLLOW_Identifier_in_primary5366); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    Identifier557_tree = (Object)adaptor.create(Identifier557);
                    	    adaptor.addChild(root_0, Identifier557_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop154;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(154);}

                    dbg.location(696,38);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:696:38: ( identifierSuffix )?
                    int alt155=2;
                    try { dbg.enterSubRule(155);
                    try { dbg.enterDecision(155);

                    switch ( input.LA(1) ) {
                        case 41:
                            {
                            switch ( input.LA(2) ) {
                                case 42:
                                    {
                                    alt155=1;
                                    }
                                    break;
                                case 104:
                                    {
                                    int LA155_34 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case 105:
                                    {
                                    int LA155_35 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case 108:
                                    {
                                    int LA155_36 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case 109:
                                    {
                                    int LA155_37 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case 110:
                                    {
                                    int LA155_38 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case 111:
                                    {
                                    int LA155_39 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case 65:
                                    {
                                    int LA155_40 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case 33:
                                    {
                                    int LA155_41 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case 112:
                                    {
                                    int LA155_42 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case 64:
                                    {
                                    int LA155_43 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case HexLiteral:
                                    {
                                    int LA155_44 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case OctalLiteral:
                                    {
                                    int LA155_45 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case DecimalLiteral:
                                    {
                                    int LA155_46 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case FloatingPointLiteral:
                                    {
                                    int LA155_47 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case CharacterLiteral:
                                    {
                                    int LA155_48 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case StringLiteral:
                                    {
                                    int LA155_49 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case 69:
                                    {
                                    int LA155_50 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case 70:
                                    {
                                    int LA155_51 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case 68:
                                    {
                                    int LA155_52 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case 113:
                                    {
                                    int LA155_53 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case Identifier:
                                    {
                                    int LA155_54 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case 55:
                                    {
                                    int LA155_55 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case 56:
                                    {
                                    int LA155_56 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case 57:
                                    {
                                    int LA155_57 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case 58:
                                    {
                                    int LA155_58 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case 59:
                                    {
                                    int LA155_59 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case 60:
                                    {
                                    int LA155_60 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case 61:
                                    {
                                    int LA155_61 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case 62:
                                    {
                                    int LA155_62 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case 40:
                                    {
                                    int LA155_63 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                        case 65:
                            {
                            alt155=1;
                            }
                            break;
                        case 28:
                            {
                            switch ( input.LA(2) ) {
                                case 113:
                                    {
                                    int LA155_64 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case 112:
                                    {
                                    int LA155_65 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case 64:
                                    {
                                    int LA155_67 = input.LA(3);

                                    if ( (synpred240()) ) {
                                        alt155=1;
                                    }
                                    }
                                    break;
                                case 30:
                                case 33:
                                    {
                                    alt155=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    } finally {dbg.exitDecision(155);}

                    switch (alt155) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:696:39: identifierSuffix
                            {
                            dbg.location(696,39);
                            pushFollow(FOLLOW_identifierSuffix_in_primary5371);
                            identifierSuffix558=identifierSuffix();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, identifierSuffix558.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(155);}


                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:697:9: primitiveType ( '[' ']' )* '.' 'class'
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(697,9);
                    pushFollow(FOLLOW_primitiveType_in_primary5383);
                    primitiveType559=primitiveType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, primitiveType559.getTree());
                    dbg.location(697,23);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:697:23: ( '[' ']' )*
                    try { dbg.enterSubRule(156);

                    loop156:
                    do {
                        int alt156=2;
                        try { dbg.enterDecision(156);

                        int LA156_0 = input.LA(1);

                        if ( (LA156_0==41) ) {
                            alt156=1;
                        }


                        } finally {dbg.exitDecision(156);}

                        switch (alt156) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:697:24: '[' ']'
                    	    {
                    	    dbg.location(697,24);
                    	    char_literal560=(Token)input.LT(1);
                    	    match(input,41,FOLLOW_41_in_primary5386); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    char_literal560_tree = (Object)adaptor.create(char_literal560);
                    	    adaptor.addChild(root_0, char_literal560_tree);
                    	    }
                    	    dbg.location(697,28);
                    	    char_literal561=(Token)input.LT(1);
                    	    match(input,42,FOLLOW_42_in_primary5388); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    char_literal561_tree = (Object)adaptor.create(char_literal561);
                    	    adaptor.addChild(root_0, char_literal561_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop156;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(156);}

                    dbg.location(697,34);
                    char_literal562=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_primary5392); if (failed) return retval;
                    if ( backtracking==0 ) {
                    char_literal562_tree = (Object)adaptor.create(char_literal562);
                    adaptor.addChild(root_0, char_literal562_tree);
                    }
                    dbg.location(697,38);
                    string_literal563=(Token)input.LT(1);
                    match(input,30,FOLLOW_30_in_primary5394); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal563_tree = (Object)adaptor.create(string_literal563);
                    adaptor.addChild(root_0, string_literal563_tree);
                    }

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:698:9: 'void' '.' 'class'
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(698,9);
                    string_literal564=(Token)input.LT(1);
                    match(input,40,FOLLOW_40_in_primary5404); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal564_tree = (Object)adaptor.create(string_literal564);
                    adaptor.addChild(root_0, string_literal564_tree);
                    }
                    dbg.location(698,16);
                    char_literal565=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_primary5406); if (failed) return retval;
                    if ( backtracking==0 ) {
                    char_literal565_tree = (Object)adaptor.create(char_literal565);
                    adaptor.addChild(root_0, char_literal565_tree);
                    }
                    dbg.location(698,20);
                    string_literal566=(Token)input.LT(1);
                    match(input,30,FOLLOW_30_in_primary5408); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal566_tree = (Object)adaptor.create(string_literal566);
                    adaptor.addChild(root_0, string_literal566_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 118, primary_StartIndex); }
        }
        dbg.location(699, 2);

        }
        finally {
            dbg.exitRule("primary");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end primary

    public static class identifierSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start identifierSuffix
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:701:1: identifierSuffix : ( ( '[' ']' )+ '.' 'class' | ( '[' expression ']' )+ | arguments | '.' 'class' | '.' explicitGenericInvocation | '.' 'this' | '.' 'super' arguments | '.' 'new' ( nonWildcardTypeArguments )? innerCreator );
    public final identifierSuffix_return identifierSuffix() throws RecognitionException {
        identifierSuffix_return retval = new identifierSuffix_return();
        retval.start = input.LT(1);
        int identifierSuffix_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal567=null;
        Token char_literal568=null;
        Token char_literal569=null;
        Token string_literal570=null;
        Token char_literal571=null;
        Token char_literal573=null;
        Token char_literal575=null;
        Token string_literal576=null;
        Token char_literal577=null;
        Token char_literal579=null;
        Token string_literal580=null;
        Token char_literal581=null;
        Token string_literal582=null;
        Token char_literal584=null;
        Token string_literal585=null;
        expression_return expression572 = null;

        arguments_return arguments574 = null;

        explicitGenericInvocation_return explicitGenericInvocation578 = null;

        arguments_return arguments583 = null;

        nonWildcardTypeArguments_return nonWildcardTypeArguments586 = null;

        innerCreator_return innerCreator587 = null;


        Object char_literal567_tree=null;
        Object char_literal568_tree=null;
        Object char_literal569_tree=null;
        Object string_literal570_tree=null;
        Object char_literal571_tree=null;
        Object char_literal573_tree=null;
        Object char_literal575_tree=null;
        Object string_literal576_tree=null;
        Object char_literal577_tree=null;
        Object char_literal579_tree=null;
        Object string_literal580_tree=null;
        Object char_literal581_tree=null;
        Object string_literal582_tree=null;
        Object char_literal584_tree=null;
        Object string_literal585_tree=null;

        try { dbg.enterRule("identifierSuffix");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(701, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:702:2: ( ( '[' ']' )+ '.' 'class' | ( '[' expression ']' )+ | arguments | '.' 'class' | '.' explicitGenericInvocation | '.' 'this' | '.' 'super' arguments | '.' 'new' ( nonWildcardTypeArguments )? innerCreator )
            int alt161=8;
            try { dbg.enterDecision(161);

            switch ( input.LA(1) ) {
            case 41:
                {
                int LA161_1 = input.LA(2);

                if ( (LA161_1==42) ) {
                    alt161=1;
                }
                else if ( (LA161_1==Identifier||(LA161_1>=FloatingPointLiteral && LA161_1<=DecimalLiteral)||LA161_1==33||LA161_1==40||(LA161_1>=55 && LA161_1<=62)||(LA161_1>=64 && LA161_1<=65)||(LA161_1>=68 && LA161_1<=70)||(LA161_1>=104 && LA161_1<=105)||(LA161_1>=108 && LA161_1<=113)) ) {
                    alt161=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("701:1: identifierSuffix : ( ( '[' ']' )+ '.' 'class' | ( '[' expression ']' )+ | arguments | '.' 'class' | '.' explicitGenericInvocation | '.' 'this' | '.' 'super' arguments | '.' 'new' ( nonWildcardTypeArguments )? innerCreator );", 161, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                }
                break;
            case 65:
                {
                alt161=3;
                }
                break;
            case 28:
                {
                switch ( input.LA(2) ) {
                case 64:
                    {
                    alt161=7;
                    }
                    break;
                case 113:
                    {
                    alt161=8;
                    }
                    break;
                case 30:
                    {
                    alt161=4;
                    }
                    break;
                case 112:
                    {
                    alt161=6;
                    }
                    break;
                case 33:
                    {
                    alt161=5;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("701:1: identifierSuffix : ( ( '[' ']' )+ '.' 'class' | ( '[' expression ']' )+ | arguments | '.' 'class' | '.' explicitGenericInvocation | '.' 'this' | '.' 'super' arguments | '.' 'new' ( nonWildcardTypeArguments )? innerCreator );", 161, 3, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("701:1: identifierSuffix : ( ( '[' ']' )+ '.' 'class' | ( '[' expression ']' )+ | arguments | '.' 'class' | '.' explicitGenericInvocation | '.' 'this' | '.' 'super' arguments | '.' 'new' ( nonWildcardTypeArguments )? innerCreator );", 161, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(161);}

            switch (alt161) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:702:4: ( '[' ']' )+ '.' 'class'
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(702,4);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:702:4: ( '[' ']' )+
                    int cnt158=0;
                    try { dbg.enterSubRule(158);

                    loop158:
                    do {
                        int alt158=2;
                        try { dbg.enterDecision(158);

                        int LA158_0 = input.LA(1);

                        if ( (LA158_0==41) ) {
                            alt158=1;
                        }


                        } finally {dbg.exitDecision(158);}

                        switch (alt158) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:702:5: '[' ']'
                    	    {
                    	    dbg.location(702,5);
                    	    char_literal567=(Token)input.LT(1);
                    	    match(input,41,FOLLOW_41_in_identifierSuffix5420); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    char_literal567_tree = (Object)adaptor.create(char_literal567);
                    	    adaptor.addChild(root_0, char_literal567_tree);
                    	    }
                    	    dbg.location(702,9);
                    	    char_literal568=(Token)input.LT(1);
                    	    match(input,42,FOLLOW_42_in_identifierSuffix5422); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    char_literal568_tree = (Object)adaptor.create(char_literal568);
                    	    adaptor.addChild(root_0, char_literal568_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt158 >= 1 ) break loop158;
                    	    if (backtracking>0) {failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(158, input);
                                dbg.recognitionException(eee);

                                throw eee;
                        }
                        cnt158++;
                    } while (true);
                    } finally {dbg.exitSubRule(158);}

                    dbg.location(702,15);
                    char_literal569=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_identifierSuffix5426); if (failed) return retval;
                    if ( backtracking==0 ) {
                    char_literal569_tree = (Object)adaptor.create(char_literal569);
                    adaptor.addChild(root_0, char_literal569_tree);
                    }
                    dbg.location(702,19);
                    string_literal570=(Token)input.LT(1);
                    match(input,30,FOLLOW_30_in_identifierSuffix5428); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal570_tree = (Object)adaptor.create(string_literal570);
                    adaptor.addChild(root_0, string_literal570_tree);
                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:703:4: ( '[' expression ']' )+
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(703,4);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:703:4: ( '[' expression ']' )+
                    int cnt159=0;
                    try { dbg.enterSubRule(159);

                    loop159:
                    do {
                        int alt159=2;
                        try { dbg.enterDecision(159);

                        int LA159_0 = input.LA(1);

                        if ( (LA159_0==41) ) {
                            switch ( input.LA(2) ) {
                            case 104:
                                {
                                int LA159_32 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case 105:
                                {
                                int LA159_33 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case 108:
                                {
                                int LA159_34 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case 109:
                                {
                                int LA159_35 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case 110:
                                {
                                int LA159_36 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case 111:
                                {
                                int LA159_37 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case 65:
                                {
                                int LA159_38 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case 33:
                                {
                                int LA159_39 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case 112:
                                {
                                int LA159_40 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case 64:
                                {
                                int LA159_41 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case HexLiteral:
                                {
                                int LA159_42 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case OctalLiteral:
                                {
                                int LA159_43 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case DecimalLiteral:
                                {
                                int LA159_44 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case FloatingPointLiteral:
                                {
                                int LA159_45 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case CharacterLiteral:
                                {
                                int LA159_46 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case StringLiteral:
                                {
                                int LA159_47 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case 69:
                                {
                                int LA159_48 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case 70:
                                {
                                int LA159_49 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case 68:
                                {
                                int LA159_50 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case 113:
                                {
                                int LA159_51 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case Identifier:
                                {
                                int LA159_52 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case 55:
                                {
                                int LA159_53 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case 56:
                                {
                                int LA159_54 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case 57:
                                {
                                int LA159_55 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case 58:
                                {
                                int LA159_56 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case 59:
                                {
                                int LA159_57 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case 60:
                                {
                                int LA159_58 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case 61:
                                {
                                int LA159_59 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case 62:
                                {
                                int LA159_60 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;
                            case 40:
                                {
                                int LA159_61 = input.LA(3);

                                if ( (synpred246()) ) {
                                    alt159=1;
                                }


                                }
                                break;

                            }

                        }


                        } finally {dbg.exitDecision(159);}

                        switch (alt159) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:703:5: '[' expression ']'
                    	    {
                    	    dbg.location(703,5);
                    	    char_literal571=(Token)input.LT(1);
                    	    match(input,41,FOLLOW_41_in_identifierSuffix5434); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    char_literal571_tree = (Object)adaptor.create(char_literal571);
                    	    adaptor.addChild(root_0, char_literal571_tree);
                    	    }
                    	    dbg.location(703,9);
                    	    pushFollow(FOLLOW_expression_in_identifierSuffix5436);
                    	    expression572=expression();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, expression572.getTree());
                    	    dbg.location(703,20);
                    	    char_literal573=(Token)input.LT(1);
                    	    match(input,42,FOLLOW_42_in_identifierSuffix5438); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    char_literal573_tree = (Object)adaptor.create(char_literal573);
                    	    adaptor.addChild(root_0, char_literal573_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt159 >= 1 ) break loop159;
                    	    if (backtracking>0) {failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(159, input);
                                dbg.recognitionException(eee);

                                throw eee;
                        }
                        cnt159++;
                    } while (true);
                    } finally {dbg.exitSubRule(159);}


                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:704:9: arguments
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(704,9);
                    pushFollow(FOLLOW_arguments_in_identifierSuffix5451);
                    arguments574=arguments();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, arguments574.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:705:9: '.' 'class'
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(705,9);
                    char_literal575=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_identifierSuffix5461); if (failed) return retval;
                    if ( backtracking==0 ) {
                    char_literal575_tree = (Object)adaptor.create(char_literal575);
                    adaptor.addChild(root_0, char_literal575_tree);
                    }
                    dbg.location(705,13);
                    string_literal576=(Token)input.LT(1);
                    match(input,30,FOLLOW_30_in_identifierSuffix5463); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal576_tree = (Object)adaptor.create(string_literal576);
                    adaptor.addChild(root_0, string_literal576_tree);
                    }

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:706:9: '.' explicitGenericInvocation
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(706,9);
                    char_literal577=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_identifierSuffix5473); if (failed) return retval;
                    if ( backtracking==0 ) {
                    char_literal577_tree = (Object)adaptor.create(char_literal577);
                    adaptor.addChild(root_0, char_literal577_tree);
                    }
                    dbg.location(706,13);
                    pushFollow(FOLLOW_explicitGenericInvocation_in_identifierSuffix5475);
                    explicitGenericInvocation578=explicitGenericInvocation();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, explicitGenericInvocation578.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:707:9: '.' 'this'
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(707,9);
                    char_literal579=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_identifierSuffix5485); if (failed) return retval;
                    if ( backtracking==0 ) {
                    char_literal579_tree = (Object)adaptor.create(char_literal579);
                    adaptor.addChild(root_0, char_literal579_tree);
                    }
                    dbg.location(707,13);
                    string_literal580=(Token)input.LT(1);
                    match(input,112,FOLLOW_112_in_identifierSuffix5487); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal580_tree = (Object)adaptor.create(string_literal580);
                    adaptor.addChild(root_0, string_literal580_tree);
                    }

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:708:9: '.' 'super' arguments
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(708,9);
                    char_literal581=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_identifierSuffix5497); if (failed) return retval;
                    if ( backtracking==0 ) {
                    char_literal581_tree = (Object)adaptor.create(char_literal581);
                    adaptor.addChild(root_0, char_literal581_tree);
                    }
                    dbg.location(708,13);
                    string_literal582=(Token)input.LT(1);
                    match(input,64,FOLLOW_64_in_identifierSuffix5499); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal582_tree = (Object)adaptor.create(string_literal582);
                    adaptor.addChild(root_0, string_literal582_tree);
                    }
                    dbg.location(708,21);
                    pushFollow(FOLLOW_arguments_in_identifierSuffix5501);
                    arguments583=arguments();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, arguments583.getTree());

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:709:9: '.' 'new' ( nonWildcardTypeArguments )? innerCreator
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(709,9);
                    char_literal584=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_identifierSuffix5511); if (failed) return retval;
                    if ( backtracking==0 ) {
                    char_literal584_tree = (Object)adaptor.create(char_literal584);
                    adaptor.addChild(root_0, char_literal584_tree);
                    }
                    dbg.location(709,13);
                    string_literal585=(Token)input.LT(1);
                    match(input,113,FOLLOW_113_in_identifierSuffix5513); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal585_tree = (Object)adaptor.create(string_literal585);
                    adaptor.addChild(root_0, string_literal585_tree);
                    }
                    dbg.location(709,19);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:709:19: ( nonWildcardTypeArguments )?
                    int alt160=2;
                    try { dbg.enterSubRule(160);
                    try { dbg.enterDecision(160);

                    int LA160_0 = input.LA(1);

                    if ( (LA160_0==33) ) {
                        alt160=1;
                    }
                    } finally {dbg.exitDecision(160);}

                    switch (alt160) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:709:20: nonWildcardTypeArguments
                            {
                            dbg.location(709,20);
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_identifierSuffix5516);
                            nonWildcardTypeArguments586=nonWildcardTypeArguments();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments586.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(160);}

                    dbg.location(709,47);
                    pushFollow(FOLLOW_innerCreator_in_identifierSuffix5520);
                    innerCreator587=innerCreator();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, innerCreator587.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 119, identifierSuffix_StartIndex); }
        }
        dbg.location(710, 2);

        }
        finally {
            dbg.exitRule("identifierSuffix");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end identifierSuffix

    public static class creator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start creator
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:712:1: creator : ( nonWildcardTypeArguments )? createdName ( arrayCreatorRest | classCreatorRest ) ;
    public final creator_return creator() throws RecognitionException {
        creator_return retval = new creator_return();
        retval.start = input.LT(1);
        int creator_StartIndex = input.index();
        Object root_0 = null;

        nonWildcardTypeArguments_return nonWildcardTypeArguments588 = null;

        createdName_return createdName589 = null;

        arrayCreatorRest_return arrayCreatorRest590 = null;

        classCreatorRest_return classCreatorRest591 = null;



        try { dbg.enterRule("creator");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(712, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:713:2: ( ( nonWildcardTypeArguments )? createdName ( arrayCreatorRest | classCreatorRest ) )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:713:4: ( nonWildcardTypeArguments )? createdName ( arrayCreatorRest | classCreatorRest )
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(713,4);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:713:4: ( nonWildcardTypeArguments )?
            int alt162=2;
            try { dbg.enterSubRule(162);
            try { dbg.enterDecision(162);

            int LA162_0 = input.LA(1);

            if ( (LA162_0==33) ) {
                alt162=1;
            }
            } finally {dbg.exitDecision(162);}

            switch (alt162) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: nonWildcardTypeArguments
                    {
                    dbg.location(713,4);
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_creator5532);
                    nonWildcardTypeArguments588=nonWildcardTypeArguments();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments588.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(162);}

            dbg.location(713,30);
            pushFollow(FOLLOW_createdName_in_creator5535);
            createdName589=createdName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, createdName589.getTree());
            dbg.location(714,9);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:714:9: ( arrayCreatorRest | classCreatorRest )
            int alt163=2;
            try { dbg.enterSubRule(163);
            try { dbg.enterDecision(163);

            int LA163_0 = input.LA(1);

            if ( (LA163_0==41) ) {
                alt163=1;
            }
            else if ( (LA163_0==65) ) {
                alt163=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("714:9: ( arrayCreatorRest | classCreatorRest )", 163, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(163);}

            switch (alt163) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:714:10: arrayCreatorRest
                    {
                    dbg.location(714,10);
                    pushFollow(FOLLOW_arrayCreatorRest_in_creator5546);
                    arrayCreatorRest590=arrayCreatorRest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, arrayCreatorRest590.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:714:29: classCreatorRest
                    {
                    dbg.location(714,29);
                    pushFollow(FOLLOW_classCreatorRest_in_creator5550);
                    classCreatorRest591=classCreatorRest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, classCreatorRest591.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(163);}


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 120, creator_StartIndex); }
        }
        dbg.location(715, 2);

        }
        finally {
            dbg.exitRule("creator");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end creator

    public static class createdName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start createdName
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:717:1: createdName : ( Identifier ( typeArguments )? ( '.' Identifier ( typeArguments )? )* | primitiveType );
    public final createdName_return createdName() throws RecognitionException {
        createdName_return retval = new createdName_return();
        retval.start = input.LT(1);
        int createdName_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier592=null;
        Token char_literal594=null;
        Token Identifier595=null;
        typeArguments_return typeArguments593 = null;

        typeArguments_return typeArguments596 = null;

        primitiveType_return primitiveType597 = null;


        Object Identifier592_tree=null;
        Object char_literal594_tree=null;
        Object Identifier595_tree=null;

        try { dbg.enterRule("createdName");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(717, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:718:2: ( Identifier ( typeArguments )? ( '.' Identifier ( typeArguments )? )* | primitiveType )
            int alt167=2;
            try { dbg.enterDecision(167);

            int LA167_0 = input.LA(1);

            if ( (LA167_0==Identifier) ) {
                alt167=1;
            }
            else if ( ((LA167_0>=55 && LA167_0<=62)) ) {
                alt167=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("717:1: createdName : ( Identifier ( typeArguments )? ( '.' Identifier ( typeArguments )? )* | primitiveType );", 167, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(167);}

            switch (alt167) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:718:4: Identifier ( typeArguments )? ( '.' Identifier ( typeArguments )? )*
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(718,4);
                    Identifier592=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_createdName5562); if (failed) return retval;
                    if ( backtracking==0 ) {
                    Identifier592_tree = (Object)adaptor.create(Identifier592);
                    adaptor.addChild(root_0, Identifier592_tree);
                    }
                    dbg.location(718,15);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:718:15: ( typeArguments )?
                    int alt164=2;
                    try { dbg.enterSubRule(164);
                    try { dbg.enterDecision(164);

                    int LA164_0 = input.LA(1);

                    if ( (LA164_0==33) ) {
                        alt164=1;
                    }
                    } finally {dbg.exitDecision(164);}

                    switch (alt164) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: typeArguments
                            {
                            dbg.location(718,15);
                            pushFollow(FOLLOW_typeArguments_in_createdName5564);
                            typeArguments593=typeArguments();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, typeArguments593.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(164);}

                    dbg.location(719,9);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:719:9: ( '.' Identifier ( typeArguments )? )*
                    try { dbg.enterSubRule(166);

                    loop166:
                    do {
                        int alt166=2;
                        try { dbg.enterDecision(166);

                        int LA166_0 = input.LA(1);

                        if ( (LA166_0==28) ) {
                            alt166=1;
                        }


                        } finally {dbg.exitDecision(166);}

                        switch (alt166) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:719:10: '.' Identifier ( typeArguments )?
                    	    {
                    	    dbg.location(719,10);
                    	    char_literal594=(Token)input.LT(1);
                    	    match(input,28,FOLLOW_28_in_createdName5576); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    char_literal594_tree = (Object)adaptor.create(char_literal594);
                    	    adaptor.addChild(root_0, char_literal594_tree);
                    	    }
                    	    dbg.location(719,14);
                    	    Identifier595=(Token)input.LT(1);
                    	    match(input,Identifier,FOLLOW_Identifier_in_createdName5578); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    Identifier595_tree = (Object)adaptor.create(Identifier595);
                    	    adaptor.addChild(root_0, Identifier595_tree);
                    	    }
                    	    dbg.location(719,25);
                    	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:719:25: ( typeArguments )?
                    	    int alt165=2;
                    	    try { dbg.enterSubRule(165);
                    	    try { dbg.enterDecision(165);

                    	    int LA165_0 = input.LA(1);

                    	    if ( (LA165_0==33) ) {
                    	        alt165=1;
                    	    }
                    	    } finally {dbg.exitDecision(165);}

                    	    switch (alt165) {
                    	        case 1 :
                    	            dbg.enterAlt(1);

                    	            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: typeArguments
                    	            {
                    	            dbg.location(719,25);
                    	            pushFollow(FOLLOW_typeArguments_in_createdName5580);
                    	            typeArguments596=typeArguments();
                    	            _fsp--;
                    	            if (failed) return retval;
                    	            if ( backtracking==0 ) adaptor.addChild(root_0, typeArguments596.getTree());

                    	            }
                    	            break;

                    	    }
                    	    } finally {dbg.exitSubRule(165);}


                    	    }
                    	    break;

                    	default :
                    	    break loop166;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(166);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:720:7: primitiveType
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(720,7);
                    pushFollow(FOLLOW_primitiveType_in_createdName5591);
                    primitiveType597=primitiveType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, primitiveType597.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 121, createdName_StartIndex); }
        }
        dbg.location(721, 2);

        }
        finally {
            dbg.exitRule("createdName");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end createdName

    public static class innerCreator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start innerCreator
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:723:1: innerCreator : Identifier classCreatorRest ;
    public final innerCreator_return innerCreator() throws RecognitionException {
        innerCreator_return retval = new innerCreator_return();
        retval.start = input.LT(1);
        int innerCreator_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier598=null;
        classCreatorRest_return classCreatorRest599 = null;


        Object Identifier598_tree=null;

        try { dbg.enterRule("innerCreator");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(723, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:724:2: ( Identifier classCreatorRest )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:724:4: Identifier classCreatorRest
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(724,4);
            Identifier598=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_innerCreator5603); if (failed) return retval;
            if ( backtracking==0 ) {
            Identifier598_tree = (Object)adaptor.create(Identifier598);
            adaptor.addChild(root_0, Identifier598_tree);
            }
            dbg.location(724,15);
            pushFollow(FOLLOW_classCreatorRest_in_innerCreator5605);
            classCreatorRest599=classCreatorRest();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, classCreatorRest599.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 122, innerCreator_StartIndex); }
        }
        dbg.location(725, 2);

        }
        finally {
            dbg.exitRule("innerCreator");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end innerCreator

    public static class arrayCreatorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start arrayCreatorRest
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:727:1: arrayCreatorRest : '[' ( ']' ( '[' ']' )* arrayInitializer | expression ']' ( '[' expression ']' )* ( '[' ']' )* ) ;
    public final arrayCreatorRest_return arrayCreatorRest() throws RecognitionException {
        arrayCreatorRest_return retval = new arrayCreatorRest_return();
        retval.start = input.LT(1);
        int arrayCreatorRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal600=null;
        Token char_literal601=null;
        Token char_literal602=null;
        Token char_literal603=null;
        Token char_literal606=null;
        Token char_literal607=null;
        Token char_literal609=null;
        Token char_literal610=null;
        Token char_literal611=null;
        arrayInitializer_return arrayInitializer604 = null;

        expression_return expression605 = null;

        expression_return expression608 = null;


        Object char_literal600_tree=null;
        Object char_literal601_tree=null;
        Object char_literal602_tree=null;
        Object char_literal603_tree=null;
        Object char_literal606_tree=null;
        Object char_literal607_tree=null;
        Object char_literal609_tree=null;
        Object char_literal610_tree=null;
        Object char_literal611_tree=null;

        try { dbg.enterRule("arrayCreatorRest");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(727, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:728:2: ( '[' ( ']' ( '[' ']' )* arrayInitializer | expression ']' ( '[' expression ']' )* ( '[' ']' )* ) )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:728:4: '[' ( ']' ( '[' ']' )* arrayInitializer | expression ']' ( '[' expression ']' )* ( '[' ']' )* )
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(728,4);
            char_literal600=(Token)input.LT(1);
            match(input,41,FOLLOW_41_in_arrayCreatorRest5616); if (failed) return retval;
            if ( backtracking==0 ) {
            char_literal600_tree = (Object)adaptor.create(char_literal600);
            adaptor.addChild(root_0, char_literal600_tree);
            }
            dbg.location(729,9);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:729:9: ( ']' ( '[' ']' )* arrayInitializer | expression ']' ( '[' expression ']' )* ( '[' ']' )* )
            int alt171=2;
            try { dbg.enterSubRule(171);
            try { dbg.enterDecision(171);

            int LA171_0 = input.LA(1);

            if ( (LA171_0==42) ) {
                alt171=1;
            }
            else if ( (LA171_0==Identifier||(LA171_0>=FloatingPointLiteral && LA171_0<=DecimalLiteral)||LA171_0==33||LA171_0==40||(LA171_0>=55 && LA171_0<=62)||(LA171_0>=64 && LA171_0<=65)||(LA171_0>=68 && LA171_0<=70)||(LA171_0>=104 && LA171_0<=105)||(LA171_0>=108 && LA171_0<=113)) ) {
                alt171=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("729:9: ( ']' ( '[' ']' )* arrayInitializer | expression ']' ( '[' expression ']' )* ( '[' ']' )* )", 171, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(171);}

            switch (alt171) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:729:13: ']' ( '[' ']' )* arrayInitializer
                    {
                    dbg.location(729,13);
                    char_literal601=(Token)input.LT(1);
                    match(input,42,FOLLOW_42_in_arrayCreatorRest5630); if (failed) return retval;
                    if ( backtracking==0 ) {
                    char_literal601_tree = (Object)adaptor.create(char_literal601);
                    adaptor.addChild(root_0, char_literal601_tree);
                    }
                    dbg.location(729,17);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:729:17: ( '[' ']' )*
                    try { dbg.enterSubRule(168);

                    loop168:
                    do {
                        int alt168=2;
                        try { dbg.enterDecision(168);

                        int LA168_0 = input.LA(1);

                        if ( (LA168_0==41) ) {
                            alt168=1;
                        }


                        } finally {dbg.exitDecision(168);}

                        switch (alt168) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:729:18: '[' ']'
                    	    {
                    	    dbg.location(729,18);
                    	    char_literal602=(Token)input.LT(1);
                    	    match(input,41,FOLLOW_41_in_arrayCreatorRest5633); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    char_literal602_tree = (Object)adaptor.create(char_literal602);
                    	    adaptor.addChild(root_0, char_literal602_tree);
                    	    }
                    	    dbg.location(729,22);
                    	    char_literal603=(Token)input.LT(1);
                    	    match(input,42,FOLLOW_42_in_arrayCreatorRest5635); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    char_literal603_tree = (Object)adaptor.create(char_literal603);
                    	    adaptor.addChild(root_0, char_literal603_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop168;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(168);}

                    dbg.location(729,28);
                    pushFollow(FOLLOW_arrayInitializer_in_arrayCreatorRest5639);
                    arrayInitializer604=arrayInitializer();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, arrayInitializer604.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:730:13: expression ']' ( '[' expression ']' )* ( '[' ']' )*
                    {
                    dbg.location(730,13);
                    pushFollow(FOLLOW_expression_in_arrayCreatorRest5653);
                    expression605=expression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expression605.getTree());
                    dbg.location(730,24);
                    char_literal606=(Token)input.LT(1);
                    match(input,42,FOLLOW_42_in_arrayCreatorRest5655); if (failed) return retval;
                    if ( backtracking==0 ) {
                    char_literal606_tree = (Object)adaptor.create(char_literal606);
                    adaptor.addChild(root_0, char_literal606_tree);
                    }
                    dbg.location(730,28);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:730:28: ( '[' expression ']' )*
                    try { dbg.enterSubRule(169);

                    loop169:
                    do {
                        int alt169=2;
                        try { dbg.enterDecision(169);

                        int LA169_0 = input.LA(1);

                        if ( (LA169_0==41) ) {
                            switch ( input.LA(2) ) {
                            case 104:
                                {
                                int LA169_33 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case 105:
                                {
                                int LA169_34 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case 108:
                                {
                                int LA169_35 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case 109:
                                {
                                int LA169_36 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case 110:
                                {
                                int LA169_37 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case 111:
                                {
                                int LA169_38 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case 65:
                                {
                                int LA169_39 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case 33:
                                {
                                int LA169_40 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case 112:
                                {
                                int LA169_41 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case 64:
                                {
                                int LA169_42 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case HexLiteral:
                                {
                                int LA169_43 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case OctalLiteral:
                                {
                                int LA169_44 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case DecimalLiteral:
                                {
                                int LA169_45 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case FloatingPointLiteral:
                                {
                                int LA169_46 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case CharacterLiteral:
                                {
                                int LA169_47 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case StringLiteral:
                                {
                                int LA169_48 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case 69:
                                {
                                int LA169_49 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case 70:
                                {
                                int LA169_50 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case 68:
                                {
                                int LA169_51 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case 113:
                                {
                                int LA169_52 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case Identifier:
                                {
                                int LA169_53 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case 55:
                                {
                                int LA169_54 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case 56:
                                {
                                int LA169_55 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case 57:
                                {
                                int LA169_56 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case 58:
                                {
                                int LA169_57 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case 59:
                                {
                                int LA169_58 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case 60:
                                {
                                int LA169_59 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case 61:
                                {
                                int LA169_60 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case 62:
                                {
                                int LA169_61 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;
                            case 40:
                                {
                                int LA169_62 = input.LA(3);

                                if ( (synpred262()) ) {
                                    alt169=1;
                                }


                                }
                                break;

                            }

                        }


                        } finally {dbg.exitDecision(169);}

                        switch (alt169) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:730:29: '[' expression ']'
                    	    {
                    	    dbg.location(730,29);
                    	    char_literal607=(Token)input.LT(1);
                    	    match(input,41,FOLLOW_41_in_arrayCreatorRest5658); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    char_literal607_tree = (Object)adaptor.create(char_literal607);
                    	    adaptor.addChild(root_0, char_literal607_tree);
                    	    }
                    	    dbg.location(730,33);
                    	    pushFollow(FOLLOW_expression_in_arrayCreatorRest5660);
                    	    expression608=expression();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, expression608.getTree());
                    	    dbg.location(730,44);
                    	    char_literal609=(Token)input.LT(1);
                    	    match(input,42,FOLLOW_42_in_arrayCreatorRest5662); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    char_literal609_tree = (Object)adaptor.create(char_literal609);
                    	    adaptor.addChild(root_0, char_literal609_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop169;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(169);}

                    dbg.location(730,50);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:730:50: ( '[' ']' )*
                    try { dbg.enterSubRule(170);

                    loop170:
                    do {
                        int alt170=2;
                        try { dbg.enterDecision(170);

                        int LA170_0 = input.LA(1);

                        if ( (LA170_0==41) ) {
                            int LA170_2 = input.LA(2);

                            if ( (LA170_2==42) ) {
                                alt170=1;
                            }


                        }


                        } finally {dbg.exitDecision(170);}

                        switch (alt170) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:730:51: '[' ']'
                    	    {
                    	    dbg.location(730,51);
                    	    char_literal610=(Token)input.LT(1);
                    	    match(input,41,FOLLOW_41_in_arrayCreatorRest5667); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    char_literal610_tree = (Object)adaptor.create(char_literal610);
                    	    adaptor.addChild(root_0, char_literal610_tree);
                    	    }
                    	    dbg.location(730,55);
                    	    char_literal611=(Token)input.LT(1);
                    	    match(input,42,FOLLOW_42_in_arrayCreatorRest5669); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    char_literal611_tree = (Object)adaptor.create(char_literal611);
                    	    adaptor.addChild(root_0, char_literal611_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop170;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(170);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(171);}


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 123, arrayCreatorRest_StartIndex); }
        }
        dbg.location(732, 2);

        }
        finally {
            dbg.exitRule("arrayCreatorRest");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end arrayCreatorRest

    public static class classCreatorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start classCreatorRest
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:734:1: classCreatorRest : arguments ( classBody )? ;
    public final classCreatorRest_return classCreatorRest() throws RecognitionException {
        classCreatorRest_return retval = new classCreatorRest_return();
        retval.start = input.LT(1);
        int classCreatorRest_StartIndex = input.index();
        Object root_0 = null;

        arguments_return arguments612 = null;

        classBody_return classBody613 = null;



        try { dbg.enterRule("classCreatorRest");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(734, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:735:2: ( arguments ( classBody )? )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:735:4: arguments ( classBody )?
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(735,4);
            pushFollow(FOLLOW_arguments_in_classCreatorRest5692);
            arguments612=arguments();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, arguments612.getTree());
            dbg.location(735,14);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:735:14: ( classBody )?
            int alt172=2;
            try { dbg.enterSubRule(172);
            try { dbg.enterDecision(172);

            int LA172_0 = input.LA(1);

            if ( (LA172_0==37) ) {
                alt172=1;
            }
            } finally {dbg.exitDecision(172);}

            switch (alt172) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: classBody
                    {
                    dbg.location(735,14);
                    pushFollow(FOLLOW_classBody_in_classCreatorRest5694);
                    classBody613=classBody();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, classBody613.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(172);}


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 124, classCreatorRest_StartIndex); }
        }
        dbg.location(736, 2);

        }
        finally {
            dbg.exitRule("classCreatorRest");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end classCreatorRest

    public static class explicitGenericInvocation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start explicitGenericInvocation
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:738:1: explicitGenericInvocation : nonWildcardTypeArguments explicitGenericInvocationSuffix ;
    public final explicitGenericInvocation_return explicitGenericInvocation() throws RecognitionException {
        explicitGenericInvocation_return retval = new explicitGenericInvocation_return();
        retval.start = input.LT(1);
        int explicitGenericInvocation_StartIndex = input.index();
        Object root_0 = null;

        nonWildcardTypeArguments_return nonWildcardTypeArguments614 = null;

        explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix615 = null;



        try { dbg.enterRule("explicitGenericInvocation");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(738, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:739:2: ( nonWildcardTypeArguments explicitGenericInvocationSuffix )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:739:4: nonWildcardTypeArguments explicitGenericInvocationSuffix
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(739,4);
            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation5707);
            nonWildcardTypeArguments614=nonWildcardTypeArguments();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments614.getTree());
            dbg.location(739,29);
            pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_explicitGenericInvocation5709);
            explicitGenericInvocationSuffix615=explicitGenericInvocationSuffix();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, explicitGenericInvocationSuffix615.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 125, explicitGenericInvocation_StartIndex); }
        }
        dbg.location(740, 2);

        }
        finally {
            dbg.exitRule("explicitGenericInvocation");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end explicitGenericInvocation

    public static class nonWildcardTypeArguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start nonWildcardTypeArguments
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:742:1: nonWildcardTypeArguments : '<' typeList '>' ;
    public final nonWildcardTypeArguments_return nonWildcardTypeArguments() throws RecognitionException {
        nonWildcardTypeArguments_return retval = new nonWildcardTypeArguments_return();
        retval.start = input.LT(1);
        int nonWildcardTypeArguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal616=null;
        Token char_literal618=null;
        typeList_return typeList617 = null;


        Object char_literal616_tree=null;
        Object char_literal618_tree=null;

        try { dbg.enterRule("nonWildcardTypeArguments");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(742, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:743:2: ( '<' typeList '>' )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:743:4: '<' typeList '>'
            {
            root_0 = (Object)adaptor.nil();

            dbg.location(743,4);
            char_literal616=(Token)input.LT(1);
            match(input,33,FOLLOW_33_in_nonWildcardTypeArguments5721); if (failed) return retval;
            if ( backtracking==0 ) {
            char_literal616_tree = (Object)adaptor.create(char_literal616);
            adaptor.addChild(root_0, char_literal616_tree);
            }
            dbg.location(743,8);
            pushFollow(FOLLOW_typeList_in_nonWildcardTypeArguments5723);
            typeList617=typeList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, typeList617.getTree());
            dbg.location(743,17);
            char_literal618=(Token)input.LT(1);
            match(input,35,FOLLOW_35_in_nonWildcardTypeArguments5725); if (failed) return retval;
            if ( backtracking==0 ) {
            char_literal618_tree = (Object)adaptor.create(char_literal618);
            adaptor.addChild(root_0, char_literal618_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 126, nonWildcardTypeArguments_StartIndex); }
        }
        dbg.location(744, 2);

        }
        finally {
            dbg.exitRule("nonWildcardTypeArguments");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end nonWildcardTypeArguments

    public static class explicitGenericInvocationSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start explicitGenericInvocationSuffix
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:746:1: explicitGenericInvocationSuffix : ( 'super' superSuffix | Identifier arguments );
    public final explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix() throws RecognitionException {
        explicitGenericInvocationSuffix_return retval = new explicitGenericInvocationSuffix_return();
        retval.start = input.LT(1);
        int explicitGenericInvocationSuffix_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal619=null;
        Token Identifier621=null;
        superSuffix_return superSuffix620 = null;

        arguments_return arguments622 = null;


        Object string_literal619_tree=null;
        Object Identifier621_tree=null;

        try { dbg.enterRule("explicitGenericInvocationSuffix");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(746, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:747:2: ( 'super' superSuffix | Identifier arguments )
            int alt173=2;
            try { dbg.enterDecision(173);

            int LA173_0 = input.LA(1);

            if ( (LA173_0==64) ) {
                alt173=1;
            }
            else if ( (LA173_0==Identifier) ) {
                alt173=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("746:1: explicitGenericInvocationSuffix : ( 'super' superSuffix | Identifier arguments );", 173, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(173);}

            switch (alt173) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:747:4: 'super' superSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(747,4);
                    string_literal619=(Token)input.LT(1);
                    match(input,64,FOLLOW_64_in_explicitGenericInvocationSuffix5737); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal619_tree = (Object)adaptor.create(string_literal619);
                    adaptor.addChild(root_0, string_literal619_tree);
                    }
                    dbg.location(747,12);
                    pushFollow(FOLLOW_superSuffix_in_explicitGenericInvocationSuffix5739);
                    superSuffix620=superSuffix();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, superSuffix620.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:748:6: Identifier arguments
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(748,6);
                    Identifier621=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_explicitGenericInvocationSuffix5746); if (failed) return retval;
                    if ( backtracking==0 ) {
                    Identifier621_tree = (Object)adaptor.create(Identifier621);
                    adaptor.addChild(root_0, Identifier621_tree);
                    }
                    dbg.location(748,17);
                    pushFollow(FOLLOW_arguments_in_explicitGenericInvocationSuffix5748);
                    arguments622=arguments();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, arguments622.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 127, explicitGenericInvocationSuffix_StartIndex); }
        }
        dbg.location(749, 2);

        }
        finally {
            dbg.exitRule("explicitGenericInvocationSuffix");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end explicitGenericInvocationSuffix

    public static class selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start selector
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:751:1: selector : ( '.' Identifier ( arguments )? | '.' 'this' | '.' 'super' superSuffix | '.' 'new' ( nonWildcardTypeArguments )? innerCreator | '[' expression ']' );
    public final selector_return selector() throws RecognitionException {
        selector_return retval = new selector_return();
        retval.start = input.LT(1);
        int selector_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal623=null;
        Token Identifier624=null;
        Token char_literal626=null;
        Token string_literal627=null;
        Token char_literal628=null;
        Token string_literal629=null;
        Token char_literal631=null;
        Token string_literal632=null;
        Token char_literal635=null;
        Token char_literal637=null;
        arguments_return arguments625 = null;

        superSuffix_return superSuffix630 = null;

        nonWildcardTypeArguments_return nonWildcardTypeArguments633 = null;

        innerCreator_return innerCreator634 = null;

        expression_return expression636 = null;


        Object char_literal623_tree=null;
        Object Identifier624_tree=null;
        Object char_literal626_tree=null;
        Object string_literal627_tree=null;
        Object char_literal628_tree=null;
        Object string_literal629_tree=null;
        Object char_literal631_tree=null;
        Object string_literal632_tree=null;
        Object char_literal635_tree=null;
        Object char_literal637_tree=null;

        try { dbg.enterRule("selector");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(751, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:752:2: ( '.' Identifier ( arguments )? | '.' 'this' | '.' 'super' superSuffix | '.' 'new' ( nonWildcardTypeArguments )? innerCreator | '[' expression ']' )
            int alt176=5;
            try { dbg.enterDecision(176);

            int LA176_0 = input.LA(1);

            if ( (LA176_0==28) ) {
                switch ( input.LA(2) ) {
                case 64:
                    {
                    alt176=3;
                    }
                    break;
                case 113:
                    {
                    alt176=4;
                    }
                    break;
                case 112:
                    {
                    alt176=2;
                    }
                    break;
                case Identifier:
                    {
                    alt176=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("751:1: selector : ( '.' Identifier ( arguments )? | '.' 'this' | '.' 'super' superSuffix | '.' 'new' ( nonWildcardTypeArguments )? innerCreator | '[' expression ']' );", 176, 1, input);

                    dbg.recognitionException(nvae);
                    throw nvae;
                }

            }
            else if ( (LA176_0==41) ) {
                alt176=5;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("751:1: selector : ( '.' Identifier ( arguments )? | '.' 'this' | '.' 'super' superSuffix | '.' 'new' ( nonWildcardTypeArguments )? innerCreator | '[' expression ']' );", 176, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(176);}

            switch (alt176) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:752:4: '.' Identifier ( arguments )?
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(752,4);
                    char_literal623=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_selector5760); if (failed) return retval;
                    if ( backtracking==0 ) {
                    char_literal623_tree = (Object)adaptor.create(char_literal623);
                    adaptor.addChild(root_0, char_literal623_tree);
                    }
                    dbg.location(752,8);
                    Identifier624=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_selector5762); if (failed) return retval;
                    if ( backtracking==0 ) {
                    Identifier624_tree = (Object)adaptor.create(Identifier624);
                    adaptor.addChild(root_0, Identifier624_tree);
                    }
                    dbg.location(752,19);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:752:19: ( arguments )?
                    int alt174=2;
                    try { dbg.enterSubRule(174);
                    try { dbg.enterDecision(174);

                    int LA174_0 = input.LA(1);

                    if ( (LA174_0==65) ) {
                        alt174=1;
                    }
                    } finally {dbg.exitDecision(174);}

                    switch (alt174) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:752:20: arguments
                            {
                            dbg.location(752,20);
                            pushFollow(FOLLOW_arguments_in_selector5765);
                            arguments625=arguments();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, arguments625.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(174);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:753:6: '.' 'this'
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(753,6);
                    char_literal626=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_selector5774); if (failed) return retval;
                    if ( backtracking==0 ) {
                    char_literal626_tree = (Object)adaptor.create(char_literal626);
                    adaptor.addChild(root_0, char_literal626_tree);
                    }
                    dbg.location(753,10);
                    string_literal627=(Token)input.LT(1);
                    match(input,112,FOLLOW_112_in_selector5776); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal627_tree = (Object)adaptor.create(string_literal627);
                    adaptor.addChild(root_0, string_literal627_tree);
                    }

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:754:6: '.' 'super' superSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(754,6);
                    char_literal628=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_selector5783); if (failed) return retval;
                    if ( backtracking==0 ) {
                    char_literal628_tree = (Object)adaptor.create(char_literal628);
                    adaptor.addChild(root_0, char_literal628_tree);
                    }
                    dbg.location(754,10);
                    string_literal629=(Token)input.LT(1);
                    match(input,64,FOLLOW_64_in_selector5785); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal629_tree = (Object)adaptor.create(string_literal629);
                    adaptor.addChild(root_0, string_literal629_tree);
                    }
                    dbg.location(754,18);
                    pushFollow(FOLLOW_superSuffix_in_selector5787);
                    superSuffix630=superSuffix();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, superSuffix630.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:755:6: '.' 'new' ( nonWildcardTypeArguments )? innerCreator
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(755,6);
                    char_literal631=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_selector5794); if (failed) return retval;
                    if ( backtracking==0 ) {
                    char_literal631_tree = (Object)adaptor.create(char_literal631);
                    adaptor.addChild(root_0, char_literal631_tree);
                    }
                    dbg.location(755,10);
                    string_literal632=(Token)input.LT(1);
                    match(input,113,FOLLOW_113_in_selector5796); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal632_tree = (Object)adaptor.create(string_literal632);
                    adaptor.addChild(root_0, string_literal632_tree);
                    }
                    dbg.location(755,16);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:755:16: ( nonWildcardTypeArguments )?
                    int alt175=2;
                    try { dbg.enterSubRule(175);
                    try { dbg.enterDecision(175);

                    int LA175_0 = input.LA(1);

                    if ( (LA175_0==33) ) {
                        alt175=1;
                    }
                    } finally {dbg.exitDecision(175);}

                    switch (alt175) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:755:17: nonWildcardTypeArguments
                            {
                            dbg.location(755,17);
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_selector5799);
                            nonWildcardTypeArguments633=nonWildcardTypeArguments();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments633.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(175);}

                    dbg.location(755,44);
                    pushFollow(FOLLOW_innerCreator_in_selector5803);
                    innerCreator634=innerCreator();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, innerCreator634.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:756:6: '[' expression ']'
                    {
                    root_0 = (Object)adaptor.nil();

                    dbg.location(756,6);
                    char_literal635=(Token)input.LT(1);
                    match(input,41,FOLLOW_41_in_selector5810); if (failed) return retval;
                    if ( backtracking==0 ) {
                    char_literal635_tree = (Object)adaptor.create(char_literal635);
                    adaptor.addChild(root_0, char_literal635_tree);
                    }
                    dbg.location(756,10);
                    pushFollow(FOLLOW_expression_in_selector5812);
                    expression636=expression();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expression636.getTree());
                    dbg.location(756,21);
                    char_literal637=(Token)input.LT(1);
                    match(input,42,FOLLOW_42_in_selector5814); if (failed) return retval;
                    if ( backtracking==0 ) {
                    char_literal637_tree = (Object)adaptor.create(char_literal637);
                    adaptor.addChild(root_0, char_literal637_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 128, selector_StartIndex); }
        }
        dbg.location(757, 2);

        }
        finally {
            dbg.exitRule("selector");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end selector

    public static class superSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start superSuffix
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:759:1: superSuffix : ( arguments -> arguments | '.' Identifier ( arguments )? -> '.' Identifier ( arguments )? );
    public final superSuffix_return superSuffix() throws RecognitionException {
        superSuffix_return retval = new superSuffix_return();
        retval.start = input.LT(1);
        int superSuffix_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal639=null;
        Token Identifier640=null;
        arguments_return arguments638 = null;

        arguments_return arguments641 = null;


        Object char_literal639_tree=null;
        Object Identifier640_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_28=new RewriteRuleTokenStream(adaptor,"token 28");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        try { dbg.enterRule("superSuffix");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(759, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:760:2: ( arguments -> arguments | '.' Identifier ( arguments )? -> '.' Identifier ( arguments )? )
            int alt178=2;
            try { dbg.enterDecision(178);

            int LA178_0 = input.LA(1);

            if ( (LA178_0==65) ) {
                alt178=1;
            }
            else if ( (LA178_0==28) ) {
                alt178=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("759:1: superSuffix : ( arguments -> arguments | '.' Identifier ( arguments )? -> '.' Identifier ( arguments )? );", 178, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(178);}

            switch (alt178) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:760:4: arguments
                    {
                    dbg.location(760,4);
                    pushFollow(FOLLOW_arguments_in_superSuffix5826);
                    arguments638=arguments();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_arguments.add(arguments638.getTree());
                    dbg.location(760,14);

                    // AST REWRITE
                    // elements: arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 760:14: -> arguments
                    {
                        dbg.location(760,17);
                        adaptor.addChild(root_0, stream_arguments.next());

                    }

                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:761:6: '.' Identifier ( arguments )?
                    {
                    dbg.location(761,6);
                    char_literal639=(Token)input.LT(1);
                    match(input,28,FOLLOW_28_in_superSuffix5837); if (failed) return retval;
                    if ( backtracking==0 ) stream_28.add(char_literal639);

                    dbg.location(761,10);
                    Identifier640=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_superSuffix5839); if (failed) return retval;
                    if ( backtracking==0 ) stream_Identifier.add(Identifier640);

                    dbg.location(761,21);
                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:761:21: ( arguments )?
                    int alt177=2;
                    try { dbg.enterSubRule(177);
                    try { dbg.enterDecision(177);

                    int LA177_0 = input.LA(1);

                    if ( (LA177_0==65) ) {
                        alt177=1;
                    }
                    } finally {dbg.exitDecision(177);}

                    switch (alt177) {
                        case 1 :
                            dbg.enterAlt(1);

                            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:761:22: arguments
                            {
                            dbg.location(761,22);
                            pushFollow(FOLLOW_arguments_in_superSuffix5842);
                            arguments641=arguments();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_arguments.add(arguments641.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(177);}

                    dbg.location(761,34);

                    // AST REWRITE
                    // elements: 28, Identifier, arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 761:34: -> '.' Identifier ( arguments )?
                    {
                        dbg.location(761,37);
                        adaptor.addChild(root_0, stream_28.next());
                        dbg.location(761,41);
                        adaptor.addChild(root_0, stream_Identifier.next());
                        dbg.location(761,52);
                        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:761:52: ( arguments )?
                        if ( stream_arguments.hasNext() ) {
                            dbg.location(761,53);
                            adaptor.addChild(root_0, stream_arguments.next());

                        }
                        stream_arguments.reset();

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 129, superSuffix_StartIndex); }
        }
        dbg.location(762, 5);

        }
        finally {
            dbg.exitRule("superSuffix");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end superSuffix

    public static class arguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start arguments
    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:764:1: arguments : '(' ( expressionList )? ')' -> '(' ( expressionList )? ')' ;
    public final arguments_return arguments() throws RecognitionException {
        arguments_return retval = new arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal642=null;
        Token char_literal644=null;
        expressionList_return expressionList643 = null;


        Object char_literal642_tree=null;
        Object char_literal644_tree=null;
        RewriteRuleTokenStream stream_66=new RewriteRuleTokenStream(adaptor,"token 66");
        RewriteRuleTokenStream stream_65=new RewriteRuleTokenStream(adaptor,"token 65");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try { dbg.enterRule("arguments");
        if ( ruleLevel==0 ) {dbg.commence();}
        ruleLevel++;
        dbg.location(764, 1);

        try {
            if ( backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:765:2: ( '(' ( expressionList )? ')' -> '(' ( expressionList )? ')' )
            dbg.enterAlt(1);

            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:765:4: '(' ( expressionList )? ')'
            {
            dbg.location(765,4);
            char_literal642=(Token)input.LT(1);
            match(input,65,FOLLOW_65_in_arguments5869); if (failed) return retval;
            if ( backtracking==0 ) stream_65.add(char_literal642);

            dbg.location(765,8);
            // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:765:8: ( expressionList )?
            int alt179=2;
            try { dbg.enterSubRule(179);
            try { dbg.enterDecision(179);

            int LA179_0 = input.LA(1);

            if ( (LA179_0==Identifier||(LA179_0>=FloatingPointLiteral && LA179_0<=DecimalLiteral)||LA179_0==33||LA179_0==40||(LA179_0>=55 && LA179_0<=62)||(LA179_0>=64 && LA179_0<=65)||(LA179_0>=68 && LA179_0<=70)||(LA179_0>=104 && LA179_0<=105)||(LA179_0>=108 && LA179_0<=113)) ) {
                alt179=1;
            }
            } finally {dbg.exitDecision(179);}

            switch (alt179) {
                case 1 :
                    dbg.enterAlt(1);

                    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: expressionList
                    {
                    dbg.location(765,8);
                    pushFollow(FOLLOW_expressionList_in_arguments5871);
                    expressionList643=expressionList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_expressionList.add(expressionList643.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(179);}

            dbg.location(765,24);
            char_literal644=(Token)input.LT(1);
            match(input,66,FOLLOW_66_in_arguments5874); if (failed) return retval;
            if ( backtracking==0 ) stream_66.add(char_literal644);

            dbg.location(765,28);

            // AST REWRITE
            // elements: 66, 65, expressionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 765:28: -> '(' ( expressionList )? ')'
            {
                dbg.location(765,31);
                adaptor.addChild(root_0, stream_65.next());
                dbg.location(765,35);
                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:765:35: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    dbg.location(765,35);
                    adaptor.addChild(root_0, stream_expressionList.next());

                }
                stream_expressionList.reset();
                dbg.location(765,51);
                adaptor.addChild(root_0, stream_66.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (Object)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( backtracking>0 ) { memoize(input, 130, arguments_StartIndex); }
        }
        dbg.location(766, 2);

        }
        finally {
            dbg.exitRule("arguments");
            ruleLevel--;
            if ( ruleLevel==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end arguments

    // $ANTLR start synpred1
    public final void synpred1_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:89:4: ( annotations )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:89:4: annotations
        {
        dbg.location(89,4);
        pushFollow(FOLLOW_annotations_in_synpred145);
        annotations();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred1

    // $ANTLR start synpred10
    public final void synpred10_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:109:4: ( ( modifier )* classDeclaration )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:109:4: ( modifier )* classDeclaration
        {
        dbg.location(109,4);
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:109:4: ( modifier )*
        try { dbg.enterSubRule(180);

        loop180:
        do {
            int alt180=2;
            try { dbg.enterDecision(180);

            int LA180_0 = input.LA(1);

            if ( (LA180_0==27||(LA180_0>=45 && LA180_0<=54)||LA180_0==71) ) {
                alt180=1;
            }


            } finally {dbg.exitDecision(180);}

            switch (alt180) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: modifier
        	    {
        	    dbg.location(109,4);
        	    pushFollow(FOLLOW_modifier_in_synpred10210);
        	    modifier();
        	    _fsp--;
        	    if (failed) return ;

        	    }
        	    break;

        	default :
        	    break loop180;
            }
        } while (true);
        } finally {dbg.exitSubRule(180);}

        dbg.location(109,14);
        pushFollow(FOLLOW_classDeclaration_in_synpred10213);
        classDeclaration();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred10

    // $ANTLR start synpred39
    public final void synpred39_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:187:4: ( methodDeclaration )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:187:4: methodDeclaration
        {
        dbg.location(187,4);
        pushFollow(FOLLOW_methodDeclaration_in_synpred39855);
        methodDeclaration();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred39

    // $ANTLR start synpred40
    public final void synpred40_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:188:4: ( fieldDeclaration )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:188:4: fieldDeclaration
        {
        dbg.location(188,4);
        pushFollow(FOLLOW_fieldDeclaration_in_synpred40864);
        fieldDeclaration();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred40

    // $ANTLR start synpred60
    public final void synpred60_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:255:4: ( typeParameters type Identifier interfaceMethodDeclaratorRest )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:255:4: typeParameters type Identifier interfaceMethodDeclaratorRest
        {
        dbg.location(255,4);
        pushFollow(FOLLOW_typeParameters_in_synpred601430);
        typeParameters();
        _fsp--;
        if (failed) return ;
        dbg.location(255,19);
        pushFollow(FOLLOW_type_in_synpred601432);
        type();
        _fsp--;
        if (failed) return ;
        dbg.location(255,24);
        match(input,Identifier,FOLLOW_Identifier_in_synpred601434); if (failed) return ;
        dbg.location(255,35);
        pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_synpred601436);
        interfaceMethodDeclaratorRest();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred60

    // $ANTLR start synpred86
    public final void synpred86_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:322:16: ( '.' Identifier )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:322:16: '.' Identifier
        {
        dbg.location(322,16);
        match(input,28,FOLLOW_28_in_synpred862036); if (failed) return ;
        dbg.location(322,20);
        match(input,Identifier,FOLLOW_Identifier_in_synpred862038); if (failed) return ;

        }
    }
    // $ANTLR end synpred86

    // $ANTLR start synpred121
    public final void synpred121_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:412:4: ( annotation )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:412:4: annotation
        {
        dbg.location(412,4);
        pushFollow(FOLLOW_annotation_in_synpred1212773);
        annotation();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred121

    // $ANTLR start synpred136
    public final void synpred136_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:459:6: ( classDeclaration ( ';' )? )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:459:6: classDeclaration ( ';' )?
        {
        dbg.location(459,6);
        pushFollow(FOLLOW_classDeclaration_in_synpred1363133);
        classDeclaration();
        _fsp--;
        if (failed) return ;
        dbg.location(459,23);
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:459:23: ( ';' )?
        int alt195=2;
        try { dbg.enterSubRule(195);
        try { dbg.enterDecision(195);

        int LA195_0 = input.LA(1);

        if ( (LA195_0==25) ) {
            alt195=1;
        }
        } finally {dbg.exitDecision(195);}

        switch (alt195) {
            case 1 :
                dbg.enterAlt(1);

                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: ';'
                {
                dbg.location(459,23);
                match(input,25,FOLLOW_25_in_synpred1363135); if (failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(195);}


        }
    }
    // $ANTLR end synpred136

    // $ANTLR start synpred138
    public final void synpred138_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:460:6: ( interfaceDeclaration ( ';' )? )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:460:6: interfaceDeclaration ( ';' )?
        {
        dbg.location(460,6);
        pushFollow(FOLLOW_interfaceDeclaration_in_synpred1383150);
        interfaceDeclaration();
        _fsp--;
        if (failed) return ;
        dbg.location(460,27);
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:460:27: ( ';' )?
        int alt196=2;
        try { dbg.enterSubRule(196);
        try { dbg.enterDecision(196);

        int LA196_0 = input.LA(1);

        if ( (LA196_0==25) ) {
            alt196=1;
        }
        } finally {dbg.exitDecision(196);}

        switch (alt196) {
            case 1 :
                dbg.enterAlt(1);

                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: ';'
                {
                dbg.location(460,27);
                match(input,25,FOLLOW_25_in_synpred1383152); if (failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(196);}


        }
    }
    // $ANTLR end synpred138

    // $ANTLR start synpred140
    public final void synpred140_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:461:6: ( enumDeclaration ( ';' )? )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:461:6: enumDeclaration ( ';' )?
        {
        dbg.location(461,6);
        pushFollow(FOLLOW_enumDeclaration_in_synpred1403167);
        enumDeclaration();
        _fsp--;
        if (failed) return ;
        dbg.location(461,22);
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:461:22: ( ';' )?
        int alt197=2;
        try { dbg.enterSubRule(197);
        try { dbg.enterDecision(197);

        int LA197_0 = input.LA(1);

        if ( (LA197_0==25) ) {
            alt197=1;
        }
        } finally {dbg.exitDecision(197);}

        switch (alt197) {
            case 1 :
                dbg.enterAlt(1);

                // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: ';'
                {
                dbg.location(461,22);
                match(input,25,FOLLOW_25_in_synpred1403169); if (failed) return ;

                }
                break;

        }
        } finally {dbg.exitSubRule(197);}


        }
    }
    // $ANTLR end synpred140

    // $ANTLR start synpred145
    public final void synpred145_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:489:4: ( localVariableDeclaration )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:489:4: localVariableDeclaration
        {
        dbg.location(489,4);
        pushFollow(FOLLOW_localVariableDeclaration_in_synpred1453338);
        localVariableDeclaration();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred145

    // $ANTLR start synpred146
    public final void synpred146_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:490:4: ( classOrInterfaceDeclaration )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:490:4: classOrInterfaceDeclaration
        {
        dbg.location(490,4);
        pushFollow(FOLLOW_classOrInterfaceDeclaration_in_synpred1463347);
        classOrInterfaceDeclaration();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred146

    // $ANTLR start synpred151
    public final void synpred151_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:501:52: ( 'else' statement )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:501:52: 'else' statement
        {
        dbg.location(501,52);
        match(input,76,FOLLOW_76_in_synpred1513466); if (failed) return ;
        dbg.location(501,59);
        pushFollow(FOLLOW_statement_in_synpred1513468);
        statement();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred151

    // $ANTLR start synpred156
    public final void synpred156_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:505:7: ( 'try' block catches 'finally' block )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:505:7: 'try' block catches 'finally' block
        {
        dbg.location(505,7);
        match(input,80,FOLLOW_80_in_synpred1563569); if (failed) return ;
        dbg.location(505,13);
        pushFollow(FOLLOW_block_in_synpred1563571);
        block();
        _fsp--;
        if (failed) return ;
        dbg.location(505,19);
        pushFollow(FOLLOW_catches_in_synpred1563573);
        catches();
        _fsp--;
        if (failed) return ;
        dbg.location(505,27);
        match(input,81,FOLLOW_81_in_synpred1563575); if (failed) return ;
        dbg.location(505,37);
        pushFollow(FOLLOW_block_in_synpred1563577);
        block();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred156

    // $ANTLR start synpred157
    public final void synpred157_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:506:9: ( 'try' block catches )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:506:9: 'try' block catches
        {
        dbg.location(506,9);
        match(input,80,FOLLOW_80_in_synpred1573599); if (failed) return ;
        dbg.location(506,15);
        pushFollow(FOLLOW_block_in_synpred1573601);
        block();
        _fsp--;
        if (failed) return ;
        dbg.location(506,21);
        pushFollow(FOLLOW_catches_in_synpred1573603);
        catches();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred157

    // $ANTLR start synpred174
    public final void synpred174_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:540:4: ( 'case' constantExpression ':' )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:540:4: 'case' constantExpression ':'
        {
        dbg.location(540,4);
        match(input,88,FOLLOW_88_in_synpred1743955); if (failed) return ;
        dbg.location(540,11);
        pushFollow(FOLLOW_constantExpression_in_synpred1743957);
        constantExpression();
        _fsp--;
        if (failed) return ;
        dbg.location(540,30);
        match(input,74,FOLLOW_74_in_synpred1743959); if (failed) return ;

        }
    }
    // $ANTLR end synpred174

    // $ANTLR start synpred175
    public final void synpred175_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:541:6: ( 'case' enumConstantName ':' )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:541:6: 'case' enumConstantName ':'
        {
        dbg.location(541,6);
        match(input,88,FOLLOW_88_in_synpred1753974); if (failed) return ;
        dbg.location(541,13);
        pushFollow(FOLLOW_enumConstantName_in_synpred1753976);
        enumConstantName();
        _fsp--;
        if (failed) return ;
        dbg.location(541,30);
        match(input,74,FOLLOW_74_in_synpred1753978); if (failed) return ;

        }
    }
    // $ANTLR end synpred175

    // $ANTLR start synpred177
    public final void synpred177_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:551:4: ( forVarControl )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:551:4: forVarControl
        {
        dbg.location(551,4);
        pushFollow(FOLLOW_forVarControl_in_synpred1774046);
        forVarControl();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred177

    // $ANTLR start synpred182
    public final void synpred182_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:556:4: ( ( variableModifier )* type variableDeclarators )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:556:4: ( variableModifier )* type variableDeclarators
        {
        dbg.location(556,4);
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:556:4: ( variableModifier )*
        try { dbg.enterSubRule(203);

        loop203:
        do {
            int alt203=2;
            try { dbg.enterDecision(203);

            int LA203_0 = input.LA(1);

            if ( (LA203_0==49||LA203_0==71) ) {
                alt203=1;
            }


            } finally {dbg.exitDecision(203);}

            switch (alt203) {
        	case 1 :
        	    dbg.enterAlt(1);

        	    // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:0:0: variableModifier
        	    {
        	    dbg.location(556,4);
        	    pushFollow(FOLLOW_variableModifier_in_synpred1824092);
        	    variableModifier();
        	    _fsp--;
        	    if (failed) return ;

        	    }
        	    break;

        	default :
        	    break loop203;
            }
        } while (true);
        } finally {dbg.exitSubRule(203);}

        dbg.location(556,22);
        pushFollow(FOLLOW_type_in_synpred1824095);
        type();
        _fsp--;
        if (failed) return ;
        dbg.location(556,27);
        pushFollow(FOLLOW_variableDeclarators_in_synpred1824097);
        variableDeclarators();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred182

    // $ANTLR start synpred185
    public final void synpred185_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:587:27: ( assignmentOperator expression )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:587:27: assignmentOperator expression
        {
        dbg.location(587,27);
        pushFollow(FOLLOW_assignmentOperator_in_synpred1854273);
        assignmentOperator();
        _fsp--;
        if (failed) return ;
        dbg.location(587,46);
        pushFollow(FOLLOW_expression_in_synpred1854275);
        expression();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred185

    // $ANTLR start synpred196
    public final void synpred196_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:601:9: ( '>' '>' '=' )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:601:9: '>' '>' '='
        {
        dbg.location(601,9);
        match(input,35,FOLLOW_35_in_synpred1964448); if (failed) return ;
        dbg.location(601,13);
        match(input,35,FOLLOW_35_in_synpred1964450); if (failed) return ;
        dbg.location(601,17);
        match(input,44,FOLLOW_44_in_synpred1964452); if (failed) return ;

        }
    }
    // $ANTLR end synpred196

    // $ANTLR start synpred206
    public final void synpred206_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:638:27: ( relationalOp shiftExpression )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:638:27: relationalOp shiftExpression
        {
        dbg.location(638,27);
        pushFollow(FOLLOW_relationalOp_in_synpred2064809);
        relationalOp();
        _fsp--;
        if (failed) return ;
        dbg.location(638,40);
        pushFollow(FOLLOW_shiftExpression_in_synpred2064811);
        shiftExpression();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred206

    // $ANTLR start synpred210
    public final void synpred210_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:649:30: ( shiftOp additiveExpression )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:649:30: shiftOp additiveExpression
        {
        dbg.location(649,30);
        pushFollow(FOLLOW_shiftOp_in_synpred2104902);
        shiftOp();
        _fsp--;
        if (failed) return ;
        dbg.location(649,38);
        pushFollow(FOLLOW_additiveExpression_in_synpred2104904);
        additiveExpression();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred210

    // $ANTLR start synpred212
    public final void synpred212_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:655:4: ( ( '>' '>' '>' ) )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:655:4: ( '>' '>' '>' )
        {
        dbg.location(655,4);
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:655:4: ( '>' '>' '>' )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:655:5: '>' '>' '>'
        {
        dbg.location(655,5);
        match(input,35,FOLLOW_35_in_synpred2124956); if (failed) return ;
        dbg.location(655,9);
        match(input,35,FOLLOW_35_in_synpred2124958); if (failed) return ;
        dbg.location(655,13);
        match(input,35,FOLLOW_35_in_synpred2124960); if (failed) return ;

        }


        }
    }
    // $ANTLR end synpred212

    // $ANTLR start synpred224
    public final void synpred224_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:679:9: ( castExpression )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:679:9: castExpression
        {
        dbg.location(679,9);
        pushFollow(FOLLOW_castExpression_in_synpred2245187);
        castExpression();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred224

    // $ANTLR start synpred228
    public final void synpred228_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:684:8: ( '(' primitiveType ')' unaryExpression )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:684:8: '(' primitiveType ')' unaryExpression
        {
        dbg.location(684,8);
        match(input,65,FOLLOW_65_in_synpred2285225); if (failed) return ;
        dbg.location(684,12);
        pushFollow(FOLLOW_primitiveType_in_synpred2285227);
        primitiveType();
        _fsp--;
        if (failed) return ;
        dbg.location(684,26);
        match(input,66,FOLLOW_66_in_synpred2285229); if (failed) return ;
        dbg.location(684,30);
        pushFollow(FOLLOW_unaryExpression_in_synpred2285231);
        unaryExpression();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred228

    // $ANTLR start synpred229
    public final void synpred229_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:685:13: ( type )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:685:13: type
        {
        dbg.location(685,13);
        pushFollow(FOLLOW_type_in_synpred2295243);
        type();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred229

    // $ANTLR start synpred231
    public final void synpred231_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:690:9: ( nonWildcardTypeArguments explicitGenericInvocationSuffix )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:690:9: nonWildcardTypeArguments explicitGenericInvocationSuffix
        {
        dbg.location(690,9);
        pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred2315279);
        nonWildcardTypeArguments();
        _fsp--;
        if (failed) return ;
        dbg.location(690,34);
        pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_synpred2315281);
        explicitGenericInvocationSuffix();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred231

    // $ANTLR start synpred232
    public final void synpred232_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:691:9: ( nonWildcardTypeArguments 'this' arguments )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:691:9: nonWildcardTypeArguments 'this' arguments
        {
        dbg.location(691,9);
        pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred2325291);
        nonWildcardTypeArguments();
        _fsp--;
        if (failed) return ;
        dbg.location(691,34);
        match(input,112,FOLLOW_112_in_synpred2325293); if (failed) return ;
        dbg.location(691,41);
        pushFollow(FOLLOW_arguments_in_synpred2325295);
        arguments();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred232

    // $ANTLR start synpred233
    public final void synpred233_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:692:17: ( '.' Identifier )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:692:17: '.' Identifier
        {
        dbg.location(692,17);
        match(input,28,FOLLOW_28_in_synpred2335308); if (failed) return ;
        dbg.location(692,21);
        match(input,Identifier,FOLLOW_Identifier_in_synpred2335310); if (failed) return ;

        }
    }
    // $ANTLR end synpred233

    // $ANTLR start synpred234
    public final void synpred234_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:692:35: ( identifierSuffix )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:692:35: identifierSuffix
        {
        dbg.location(692,35);
        pushFollow(FOLLOW_identifierSuffix_in_synpred2345315);
        identifierSuffix();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred234

    // $ANTLR start synpred239
    public final void synpred239_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:696:21: ( '.' Identifier )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:696:21: '.' Identifier
        {
        dbg.location(696,21);
        match(input,28,FOLLOW_28_in_synpred2395364); if (failed) return ;
        dbg.location(696,25);
        match(input,Identifier,FOLLOW_Identifier_in_synpred2395366); if (failed) return ;

        }
    }
    // $ANTLR end synpred239

    // $ANTLR start synpred240
    public final void synpred240_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:696:39: ( identifierSuffix )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:696:39: identifierSuffix
        {
        dbg.location(696,39);
        pushFollow(FOLLOW_identifierSuffix_in_synpred2405371);
        identifierSuffix();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred240

    // $ANTLR start synpred246
    public final void synpred246_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:703:5: ( '[' expression ']' )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:703:5: '[' expression ']'
        {
        dbg.location(703,5);
        match(input,41,FOLLOW_41_in_synpred2465434); if (failed) return ;
        dbg.location(703,9);
        pushFollow(FOLLOW_expression_in_synpred2465436);
        expression();
        _fsp--;
        if (failed) return ;
        dbg.location(703,20);
        match(input,42,FOLLOW_42_in_synpred2465438); if (failed) return ;

        }
    }
    // $ANTLR end synpred246

    // $ANTLR start synpred262
    public final void synpred262_fragment() throws RecognitionException {   
        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:730:29: ( '[' expression ']' )
        dbg.enterAlt(1);

        // C:\\Users\\Aaron\\Desktop\\ANTLR\\grammars\\JavaWTree.g:730:29: '[' expression ']'
        {
        dbg.location(730,29);
        match(input,41,FOLLOW_41_in_synpred2625658); if (failed) return ;
        dbg.location(730,33);
        pushFollow(FOLLOW_expression_in_synpred2625660);
        expression();
        _fsp--;
        if (failed) return ;
        dbg.location(730,44);
        match(input,42,FOLLOW_42_in_synpred2625662); if (failed) return ;

        }
    }
    // $ANTLR end synpred262

    public final boolean synpred145() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred145_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred146() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred146_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred86() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred86_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred121() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred121_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred140() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred140_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred40() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred40_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred60() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred60_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred231() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred231_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred212() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred212_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred182() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred182_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred210() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred210_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred185() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred185_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred239() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred239_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred234() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred234_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred233() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred233_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred232() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred232_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred136() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred136_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred39() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred39_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred138() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred138_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred229() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred229_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred1() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred1_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred240() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred240_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred151() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred151_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred206() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred206_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred224() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred224_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred262() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred262_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred174() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred174_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred228() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred228_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred175() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred175_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred177() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred177_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred196() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred196_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred10() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred10_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred156() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred156_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred246() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred246_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred157() {
        backtracking++;
        dbg.beginBacktrack(backtracking);
        int start = input.mark();
        try {
            synpred157_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        dbg.endBacktrack(backtracking, success);
        backtracking--;
        failed=false;
        return success;
    }


 

    public static final BitSet FOLLOW_annotations_in_compilationUnit45 = new BitSet(new long[]{0x007FE0804F000022L,0x0000000000000080L});
    public static final BitSet FOLLOW_packageDeclaration_in_compilationUnit50 = new BitSet(new long[]{0x007FE0804E000022L,0x0000000000000080L});
    public static final BitSet FOLLOW_importDeclaration_in_compilationUnit61 = new BitSet(new long[]{0x007FE0804E000022L,0x0000000000000080L});
    public static final BitSet FOLLOW_typeDeclaration_in_compilationUnit72 = new BitSet(new long[]{0x007FE0804A000022L,0x0000000000000080L});
    public static final BitSet FOLLOW_24_in_packageDeclaration98 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedName_in_packageDeclaration100 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_packageDeclaration102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_importDeclaration122 = new BitSet(new long[]{0x0000000008000010L});
    public static final BitSet FOLLOW_27_in_importDeclaration124 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_importDeclaration127 = new BitSet(new long[]{0x0000000012000000L});
    public static final BitSet FOLLOW_28_in_importDeclaration130 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_importDeclaration132 = new BitSet(new long[]{0x0000000012000000L});
    public static final BitSet FOLLOW_28_in_importDeclaration137 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_29_in_importDeclaration139 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_importDeclaration143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_typeDeclaration194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_classOrInterfaceDeclaration210 = new BitSet(new long[]{0x007FE00048000020L,0x0000000000000080L});
    public static final BitSet FOLLOW_classDeclaration_in_classOrInterfaceDeclaration213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_classOrInterfaceDeclaration231 = new BitSet(new long[]{0x007FE08008000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalClassDeclaration_in_classDeclaration253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_classDeclaration267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_normalClassDeclaration283 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_normalClassDeclaration285 = new BitSet(new long[]{0x0000002380000000L});
    public static final BitSet FOLLOW_typeParameters_in_normalClassDeclaration288 = new BitSet(new long[]{0x0000002180000000L});
    public static final BitSet FOLLOW_31_in_normalClassDeclaration301 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_type_in_normalClassDeclaration303 = new BitSet(new long[]{0x0000002100000000L});
    public static final BitSet FOLLOW_32_in_normalClassDeclaration316 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_typeList_in_normalClassDeclaration318 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_classBody_in_normalClassDeclaration330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_typeParameters369 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters371 = new BitSet(new long[]{0x0000000C00000000L});
    public static final BitSet FOLLOW_34_in_typeParameters374 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters376 = new BitSet(new long[]{0x0000000C00000000L});
    public static final BitSet FOLLOW_35_in_typeParameters380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_typeParameter406 = new BitSet(new long[]{0x0000000080000002L});
    public static final BitSet FOLLOW_31_in_typeParameter409 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_bound_in_typeParameter411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_bound437 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_36_in_bound440 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_type_in_bound442 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_ENUM_in_enumDeclaration466 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_enumDeclaration468 = new BitSet(new long[]{0x0000002100000000L});
    public static final BitSet FOLLOW_32_in_enumDeclaration471 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_typeList_in_enumDeclaration473 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_enumBody_in_enumDeclaration477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_enumBody504 = new BitSet(new long[]{0x0000004402000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_enumConstants_in_enumBody506 = new BitSet(new long[]{0x0000004402000000L});
    public static final BitSet FOLLOW_34_in_enumBody509 = new BitSet(new long[]{0x0000004002000000L});
    public static final BitSet FOLLOW_enumBodyDeclarations_in_enumBody512 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_38_in_enumBody515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants541 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_34_in_enumConstants544 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants546 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_annotations_in_enumConstant572 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_enumConstant575 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_enumConstant578 = new BitSet(new long[]{0x0000002000000002L});
    public static final BitSet FOLLOW_classBody_in_enumConstant583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_enumBodyDeclarations614 = new BitSet(new long[]{0x7FFFE1A24A000032L,0x0000000000000080L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_enumBodyDeclarations617 = new BitSet(new long[]{0x7FFFE1A24A000032L,0x0000000000000080L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_39_in_normalInterfaceDeclaration666 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_normalInterfaceDeclaration668 = new BitSet(new long[]{0x0000002280000000L});
    public static final BitSet FOLLOW_typeParameters_in_normalInterfaceDeclaration670 = new BitSet(new long[]{0x0000002080000000L});
    public static final BitSet FOLLOW_31_in_normalInterfaceDeclaration674 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_typeList_in_normalInterfaceDeclaration676 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_interfaceBody_in_normalInterfaceDeclaration680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList719 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_34_in_typeList722 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_type_in_typeList724 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_37_in_classBody749 = new BitSet(new long[]{0x7FFFE1E24A000030L,0x0000000000000080L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_classBody751 = new BitSet(new long[]{0x7FFFE1E24A000030L,0x0000000000000080L});
    public static final BitSet FOLLOW_38_in_classBody754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_interfaceBody775 = new BitSet(new long[]{0x7FFFE1C24A000030L,0x0000000000000080L});
    public static final BitSet FOLLOW_interfaceBodyDeclaration_in_interfaceBody777 = new BitSet(new long[]{0x7FFFE1C24A000030L,0x0000000000000080L});
    public static final BitSet FOLLOW_38_in_interfaceBody780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_classBodyDeclaration800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_27_in_classBodyDeclaration809 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_block_in_classBodyDeclaration812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_classBodyDeclaration824 = new BitSet(new long[]{0x7FFFE18248000030L,0x0000000000000080L});
    public static final BitSet FOLLOW_memberDecl_in_classBodyDeclaration827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericMethodOrConstructorDecl_in_memberDecl846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_memberDecl855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_memberDecl864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_memberDecl873 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_memberDecl875 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_voidMethodDeclaratorRest_in_memberDecl877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_memberDecl890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_memberDecl892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_memberDecl903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_memberDecl912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_genericMethodOrConstructorDecl928 = new BitSet(new long[]{0x7F80010000000010L});
    public static final BitSet FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericMethodOrConstructorRest948 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_genericMethodOrConstructorRest950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_genericMethodOrConstructorRest971 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_genericMethodOrConstructorRest973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_genericMethodOrConstructorRest988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_methodDeclaration1007 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_methodDeclaration1009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_methodDeclaration1011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_fieldDeclaration1030 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclarators_in_fieldDeclaration1032 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_fieldDeclaration1034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_interfaceBodyDeclaration1055 = new BitSet(new long[]{0x7FFFE18248000030L,0x0000000000000080L});
    public static final BitSet FOLLOW_interfaceMemberDecl_in_interfaceBodyDeclaration1058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_interfaceBodyDeclaration1072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodOrFieldDecl_in_interfaceMemberDecl1087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceGenericMethodDecl_in_interfaceMemberDecl1098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_interfaceMemberDecl1112 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_interfaceMemberDecl1114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_voidInterfaceMethodDeclaratorRest_in_interfaceMemberDecl1116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_interfaceMemberDecl1134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_interfaceMemberDecl1148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interfaceMethodOrFieldDecl1164 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_interfaceMethodOrFieldDecl1166 = new BitSet(new long[]{0x0000120000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodOrFieldRest_in_interfaceMethodOrFieldDecl1168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantDeclaratorsRest_in_interfaceMethodOrFieldRest1188 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_interfaceMethodOrFieldRest1190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceMethodOrFieldRest1201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_methodDeclaratorRest1217 = new BitSet(new long[]{0x00000A2002000000L});
    public static final BitSet FOLLOW_41_in_methodDeclaratorRest1220 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_methodDeclaratorRest1222 = new BitSet(new long[]{0x00000A2002000000L});
    public static final BitSet FOLLOW_43_in_methodDeclaratorRest1236 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedNameList_in_methodDeclaratorRest1238 = new BitSet(new long[]{0x0000002002000000L});
    public static final BitSet FOLLOW_methodBody_in_methodDeclaratorRest1254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_methodDeclaratorRest1269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidMethodDeclaratorRest1312 = new BitSet(new long[]{0x0000082002000000L});
    public static final BitSet FOLLOW_43_in_voidMethodDeclaratorRest1315 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedNameList_in_voidMethodDeclaratorRest1317 = new BitSet(new long[]{0x0000002002000000L});
    public static final BitSet FOLLOW_methodBody_in_voidMethodDeclaratorRest1333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_voidMethodDeclaratorRest1347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest1382 = new BitSet(new long[]{0x00000A0002000000L});
    public static final BitSet FOLLOW_41_in_interfaceMethodDeclaratorRest1385 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_interfaceMethodDeclaratorRest1387 = new BitSet(new long[]{0x00000A0002000000L});
    public static final BitSet FOLLOW_43_in_interfaceMethodDeclaratorRest1392 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedNameList_in_interfaceMethodDeclaratorRest1394 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_interfaceMethodDeclaratorRest1398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_interfaceGenericMethodDecl1430 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_type_in_interfaceGenericMethodDecl1432 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_interfaceGenericMethodDecl1434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl1436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_interfaceGenericMethodDecl1457 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_interfaceGenericMethodDecl1459 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_interfaceGenericMethodDecl1461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl1463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest1485 = new BitSet(new long[]{0x0000080002000000L});
    public static final BitSet FOLLOW_43_in_voidInterfaceMethodDeclaratorRest1488 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedNameList_in_voidInterfaceMethodDeclaratorRest1490 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_voidInterfaceMethodDeclaratorRest1494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_constructorDeclaratorRest1519 = new BitSet(new long[]{0x0000082000000000L});
    public static final BitSet FOLLOW_43_in_constructorDeclaratorRest1522 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedNameList_in_constructorDeclaratorRest1524 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_methodBody_in_constructorDeclaratorRest1528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_constantDeclarator1552 = new BitSet(new long[]{0x0000120000000000L});
    public static final BitSet FOLLOW_constantDeclaratorRest_in_constantDeclarator1554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators1572 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_34_in_variableDeclarators1575 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators1577 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclarator1595 = new BitSet(new long[]{0x0000120000000002L});
    public static final BitSet FOLLOW_variableDeclaratorRest_in_variableDeclarator1597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_variableDeclaratorRest1616 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_variableDeclaratorRest1618 = new BitSet(new long[]{0x0000120000000002L});
    public static final BitSet FOLLOW_44_in_variableDeclaratorRest1623 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclaratorRest1625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_variableDeclaratorRest1648 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclaratorRest1650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantDeclaratorRest_in_constantDeclaratorsRest1676 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_34_in_constantDeclaratorsRest1679 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_constantDeclarator_in_constantDeclaratorsRest1681 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_41_in_constantDeclaratorRest1709 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_constantDeclaratorRest1711 = new BitSet(new long[]{0x0000120000000000L});
    public static final BitSet FOLLOW_44_in_constantDeclaratorRest1715 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_variableInitializer_in_constantDeclaratorRest1717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaratorId1742 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_variableDeclaratorId1745 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_variableDeclaratorId1747 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer1771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer1785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_arrayInitializer1801 = new BitSet(new long[]{0x7F80016200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer1804 = new BitSet(new long[]{0x0000004400000000L});
    public static final BitSet FOLLOW_34_in_arrayInitializer1807 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer1809 = new BitSet(new long[]{0x0000004400000000L});
    public static final BitSet FOLLOW_34_in_arrayInitializer1814 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_38_in_arrayInitializer1821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_modifier1861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_modifier1875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_46_in_modifier1889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_modifier1903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_27_in_modifier1917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_modifier1931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_modifier1945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_modifier1959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_modifier1973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_52_in_modifier1987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_modifier2001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_modifier2015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_packageOrTypeName2033 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_28_in_packageOrTypeName2036 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_packageOrTypeName2038 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_Identifier_in_enumConstantName2067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_typeName2087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_packageOrTypeName_in_typeName2101 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_28_in_typeName2103 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_typeName2105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_type2124 = new BitSet(new long[]{0x0000020210000002L});
    public static final BitSet FOLLOW_typeArguments_in_type2127 = new BitSet(new long[]{0x0000020010000002L});
    public static final BitSet FOLLOW_28_in_type2132 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_type2134 = new BitSet(new long[]{0x0000020210000002L});
    public static final BitSet FOLLOW_typeArguments_in_type2137 = new BitSet(new long[]{0x0000020010000002L});
    public static final BitSet FOLLOW_41_in_type2145 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_type2147 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_primitiveType_in_type2183 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_type2186 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_type2188 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_55_in_primitiveType2217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_primitiveType2229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_primitiveType2241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_primitiveType2253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_primitiveType2265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_primitiveType2277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_61_in_primitiveType2289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_primitiveType2301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_variableModifier2319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_variableModifier2333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_typeArguments2348 = new BitSet(new long[]{0xFF80000000000010L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments2350 = new BitSet(new long[]{0x0000000C00000000L});
    public static final BitSet FOLLOW_34_in_typeArguments2353 = new BitSet(new long[]{0xFF80000000000010L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments2355 = new BitSet(new long[]{0x0000000C00000000L});
    public static final BitSet FOLLOW_35_in_typeArguments2359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeArgument2386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_typeArgument2395 = new BitSet(new long[]{0x0000000080000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_set_in_typeArgument2398 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_type_in_typeArgument2406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList2421 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_34_in_qualifiedNameList2424 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList2426 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_65_in_formalParameters2451 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000084L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameters2453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_formalParameters2456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_formalParameterDecls2477 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_type_in_formalParameterDecls2480 = new BitSet(new long[]{0x0000000000000012L,0x0000000000000008L});
    public static final BitSet FOLLOW_formalParameterDeclsRest_in_formalParameterDecls2482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest2505 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_34_in_formalParameterDeclsRest2508 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameterDeclsRest2510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_formalParameterDeclsRest2530 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest2532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_methodBody2550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName2565 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_28_in_qualifiedName2568 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName2570 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_integerLiteral_in_literal2598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FloatingPointLiteral_in_literal2612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CharacterLiteral_in_literal2626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_literal2640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_literal2654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_literal2668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HexLiteral_in_integerLiteral2688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OctalLiteral_in_integerLiteral2702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DecimalLiteral_in_integerLiteral2716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_booleanLiteral2739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_booleanLiteral2753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_annotations2773 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_annotation2790 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_annotationName_in_annotation2792 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_annotation2795 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F300000000F7L});
    public static final BitSet FOLLOW_elementValuePairs_in_annotation2797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_annotation2800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_annotationName2830 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_28_in_annotationName2833 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_annotationName2835 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs2860 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_34_in_elementValuePairs2863 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F300000000F3L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs2865 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_Identifier_in_elementValuePair2891 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_elementValuePair2893 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F300000000F3L});
    public static final BitSet FOLLOW_elementValue_in_elementValuePair2897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_elementValue2920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_elementValue2931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayInitializer_in_elementValue2942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_elementValueArrayInitializer2958 = new BitSet(new long[]{0x7F80016200000FD0L,0x0003F300000000F3L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer2961 = new BitSet(new long[]{0x0000004400000000L});
    public static final BitSet FOLLOW_34_in_elementValueArrayInitializer2964 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F300000000F3L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer2966 = new BitSet(new long[]{0x0000004400000000L});
    public static final BitSet FOLLOW_38_in_elementValueArrayInitializer2973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_annotationTypeDeclaration3004 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_39_in_annotationTypeDeclaration3006 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_annotationTypeDeclaration3008 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_annotationTypeBody_in_annotationTypeDeclaration3010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_annotationTypeBody3032 = new BitSet(new long[]{0x7FFFE0C048000030L,0x0000000000000080L});
    public static final BitSet FOLLOW_annotationTypeElementDeclarations_in_annotationTypeBody3035 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_38_in_annotationTypeBody3039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3062 = new BitSet(new long[]{0x7FFFE08048000032L,0x0000000000000080L});
    public static final BitSet FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3065 = new BitSet(new long[]{0x7FFFE08048000032L,0x0000000000000080L});
    public static final BitSet FOLLOW_modifier_in_annotationTypeElementDeclaration3089 = new BitSet(new long[]{0x7FFFE08048000030L,0x0000000000000080L});
    public static final BitSet FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration3093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_annotationTypeElementRest3114 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest3116 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_annotationTypeElementRest3118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_annotationTypeElementRest3133 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_annotationTypeElementRest3135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_annotationTypeElementRest3150 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_annotationTypeElementRest3152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_annotationTypeElementRest3167 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_annotationTypeElementRest3169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_annotationTypeElementRest3184 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_annotationTypeElementRest3186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest3206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest3217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_annotationMethodRest3234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_annotationMethodRest3236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_annotationMethodRest3238 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_defaultValue_in_annotationMethodRest3241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarators_in_annotationConstantRest3271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_defaultValue3290 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F300000000F3L});
    public static final BitSet FOLLOW_elementValue_in_defaultValue3292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_block3312 = new BitSet(new long[]{0x7FFFE1E24A000FF0L,0x0003F300007DEAF3L});
    public static final BitSet FOLLOW_blockStatement_in_block3314 = new BitSet(new long[]{0x7FFFE1E24A000FF0L,0x0003F300007DEAF3L});
    public static final BitSet FOLLOW_38_in_block3317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_blockStatement3338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_blockStatement3347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_blockStatement3360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_localVariableDeclaration3376 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_type_in_localVariableDeclaration3379 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclarators_in_localVariableDeclaration3381 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_localVariableDeclaration3383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_statement3406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_statement3418 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_statement3420 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_statement3423 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_statement3425 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_statement3429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_statement3452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_statement3454 = new BitSet(new long[]{0x7F88012202000FD0L,0x0003F300007DEA73L});
    public static final BitSet FOLLOW_statement_in_statement3456 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_76_in_statement3466 = new BitSet(new long[]{0x7F88012202000FD0L,0x0003F300007DEA73L});
    public static final BitSet FOLLOW_statement_in_statement3468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_statement3493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_statement3495 = new BitSet(new long[]{0x7F82010202000FD0L,0x0003F300000000F3L});
    public static final BitSet FOLLOW_forControl_in_statement3497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_statement3499 = new BitSet(new long[]{0x7F88012202000FD0L,0x0003F300007DEA73L});
    public static final BitSet FOLLOW_statement_in_statement3501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_statement3521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_statement3523 = new BitSet(new long[]{0x7F88012202000FD0L,0x0003F300007DEA73L});
    public static final BitSet FOLLOW_statement_in_statement3525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_statement3541 = new BitSet(new long[]{0x7F88012202000FD0L,0x0003F300007DEA73L});
    public static final BitSet FOLLOW_statement_in_statement3543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_statement3545 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_statement3547 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_statement3549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_statement3569 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_block_in_statement3571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_catches_in_statement3573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_statement3575 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_block_in_statement3577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_statement3599 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_block_in_statement3601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_catches_in_statement3603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_statement3621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_statement3623 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_block_in_statement3625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_statement3641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_statement3643 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_statement3645 = new BitSet(new long[]{0x0000004000000000L,0x0000000001000100L});
    public static final BitSet FOLLOW_switchBlockStatementGroups_in_statement3647 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_38_in_statement3649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_statement3669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_statement3671 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_block_in_statement3673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_statement3689 = new BitSet(new long[]{0x7F80010202000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_statement3691 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_statement3694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_statement3711 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_statement3713 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_statement3715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_statement3731 = new BitSet(new long[]{0x0000000002000010L});
    public static final BitSet FOLLOW_Identifier_in_statement3733 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_statement3736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_statement3753 = new BitSet(new long[]{0x0000000002000010L});
    public static final BitSet FOLLOW_Identifier_in_statement3755 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_statement3758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_statement3775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statementExpression_in_statement3787 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_statement3789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_statement3803 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_statement3805 = new BitSet(new long[]{0x7F88012202000FD0L,0x0003F300007DEA73L});
    public static final BitSet FOLLOW_statement_in_statement3807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_catches3827 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_catchClause_in_catches3830 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_87_in_catchClause3853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_catchClause3855 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_formalParameter_in_catchClause3857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_catchClause3859 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_block_in_catchClause3861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_formalParameter3884 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_type_in_formalParameter3887 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameter3889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups3912 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000100L});
    public static final BitSet FOLLOW_switchLabel_in_switchBlockStatementGroup3933 = new BitSet(new long[]{0x7FFFE1A24A000FF2L,0x0003F300007DEAF3L});
    public static final BitSet FOLLOW_blockStatement_in_switchBlockStatementGroup3935 = new BitSet(new long[]{0x7FFFE1A24A000FF2L,0x0003F300007DEAF3L});
    public static final BitSet FOLLOW_88_in_switchLabel3955 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_constantExpression_in_switchLabel3957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_switchLabel3959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_switchLabel3974 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_enumConstantName_in_switchLabel3976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_switchLabel3978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_switchLabel3993 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_switchLabel3995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_moreStatementExpressions4014 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_statementExpression_in_moreStatementExpressions4016 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_forVarControl_in_forControl4046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInit_in_forControl4055 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_forControl4058 = new BitSet(new long[]{0x7F80010202000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_forControl4060 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_forControl4063 = new BitSet(new long[]{0x7F80010200000FD2L,0x0003F30000000073L});
    public static final BitSet FOLLOW_forUpdate_in_forControl4065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_forInit4092 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_type_in_forInit4095 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclarators_in_forInit4097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forInit4111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_forVarControl4127 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_type_in_forVarControl4130 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_forVarControl4132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_forVarControl4134 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_forVarControl4136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forUpdate4160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_parExpression4177 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_parExpression4179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_parExpression4181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList4206 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_34_in_expressionList4209 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_expressionList4211 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_expression_in_statementExpression4238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_constantExpression4254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_expression4270 = new BitSet(new long[]{0x0000100A00000002L,0x00000001FE000000L});
    public static final BitSet FOLLOW_assignmentOperator_in_expression4273 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_expression4275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_assignmentOperator4300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_assignmentOperator4314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_assignmentOperator4328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_assignmentOperator4342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_assignmentOperator4356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_assignmentOperator4370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_assignmentOperator4384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_assignmentOperator4398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_assignmentOperator4412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_assignmentOperator4426 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_33_in_assignmentOperator4428 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_assignmentOperator4430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_assignmentOperator4448 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_assignmentOperator4450 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_assignmentOperator4452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_assignmentOperator4470 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_assignmentOperator4472 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_assignmentOperator4474 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_assignmentOperator4476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalExpression4502 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_63_in_conditionalExpression4506 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression4508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_conditionalExpression4510 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression4512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression4548 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_conditionalOrExpression4552 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression4554 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression4587 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_conditionalAndExpression4591 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression4593 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression4625 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_99_in_inclusiveOrExpression4629 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression4631 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression4663 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_100_in_exclusiveOrExpression4667 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression4669 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression4701 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_36_in_andExpression4705 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression4707 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression4739 = new BitSet(new long[]{0x0000000000000002L,0x0000006000000000L});
    public static final BitSet FOLLOW_set_in_equalityExpression4743 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression4751 = new BitSet(new long[]{0x0000000000000002L,0x0000006000000000L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression4771 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_103_in_instanceOfExpression4774 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression4776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression4805 = new BitSet(new long[]{0x0000000A00000002L});
    public static final BitSet FOLLOW_relationalOp_in_relationalExpression4809 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression4811 = new BitSet(new long[]{0x0000000A00000002L});
    public static final BitSet FOLLOW_33_in_relationalOp4840 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_relationalOp4842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_relationalOp4855 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_relationalOp4857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_relationalOp4869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_relationalOp4878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression4898 = new BitSet(new long[]{0x0000000A00000002L});
    public static final BitSet FOLLOW_shiftOp_in_shiftExpression4902 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression4904 = new BitSet(new long[]{0x0000000A00000002L});
    public static final BitSet FOLLOW_33_in_shiftOp4941 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_33_in_shiftOp4943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_shiftOp4956 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_shiftOp4958 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_shiftOp4960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_shiftOp4975 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_shiftOp4977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5001 = new BitSet(new long[]{0x0000000000000002L,0x0000030000000000L});
    public static final BitSet FOLLOW_set_in_additiveExpression5005 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5013 = new BitSet(new long[]{0x0000000000000002L,0x0000030000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression5033 = new BitSet(new long[]{0x0000000020000002L,0x00000C0000000000L});
    public static final BitSet FOLLOW_set_in_multiplicativeExpression5037 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression5051 = new BitSet(new long[]{0x0000000020000002L,0x00000C0000000000L});
    public static final BitSet FOLLOW_104_in_unaryExpression5071 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression5073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_unaryExpression5087 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression5089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_unaryExpression5105 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression5107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_unaryExpression5123 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression5125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression5141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_unaryExpressionNotPlusMinus5164 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus5166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_unaryExpressionNotPlusMinus5175 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus5177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_unaryExpressionNotPlusMinus5187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_unaryExpressionNotPlusMinus5197 = new BitSet(new long[]{0x0000020010000002L,0x0000300000000000L});
    public static final BitSet FOLLOW_selector_in_unaryExpressionNotPlusMinus5199 = new BitSet(new long[]{0x0000020010000002L,0x0000300000000000L});
    public static final BitSet FOLLOW_set_in_unaryExpressionNotPlusMinus5202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_castExpression5225 = new BitSet(new long[]{0x7F80000000000000L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression5227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_castExpression5229 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_castExpression5231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_castExpression5240 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_type_in_castExpression5243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_castExpression5247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_castExpression5250 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003C00000000073L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression5252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_primary5269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_primary5279 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000001L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_primary5281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_primary5291 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_112_in_primary5293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_primary5295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_primary5305 = new BitSet(new long[]{0x0000020010000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_primary5308 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_primary5310 = new BitSet(new long[]{0x0000020010000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_primary5315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_primary5327 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_superSuffix_in_primary5329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primary5339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_113_in_primary5349 = new BitSet(new long[]{0x7F80000200000010L});
    public static final BitSet FOLLOW_creator_in_primary5351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_primary5361 = new BitSet(new long[]{0x0000020010000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_primary5364 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_primary5366 = new BitSet(new long[]{0x0000020010000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_primary5371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_primary5383 = new BitSet(new long[]{0x0000020010000000L});
    public static final BitSet FOLLOW_41_in_primary5386 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_primary5388 = new BitSet(new long[]{0x0000020010000000L});
    public static final BitSet FOLLOW_28_in_primary5392 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_primary5394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_primary5404 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_28_in_primary5406 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_primary5408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_identifierSuffix5420 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_identifierSuffix5422 = new BitSet(new long[]{0x0000020010000000L});
    public static final BitSet FOLLOW_28_in_identifierSuffix5426 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_identifierSuffix5428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_identifierSuffix5434 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_identifierSuffix5436 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_identifierSuffix5438 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_arguments_in_identifierSuffix5451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_identifierSuffix5461 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_identifierSuffix5463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_identifierSuffix5473 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_explicitGenericInvocation_in_identifierSuffix5475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_identifierSuffix5485 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_112_in_identifierSuffix5487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_identifierSuffix5497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_identifierSuffix5499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_identifierSuffix5501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_identifierSuffix5511 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_identifierSuffix5513 = new BitSet(new long[]{0x0000000200000010L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_identifierSuffix5516 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_innerCreator_in_identifierSuffix5520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_creator5532 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_createdName_in_creator5535 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_arrayCreatorRest_in_creator5546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classCreatorRest_in_creator5550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_createdName5562 = new BitSet(new long[]{0x0000000210000002L});
    public static final BitSet FOLLOW_typeArguments_in_createdName5564 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_28_in_createdName5576 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_createdName5578 = new BitSet(new long[]{0x0000000210000002L});
    public static final BitSet FOLLOW_typeArguments_in_createdName5580 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_primitiveType_in_createdName5591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_innerCreator5603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_classCreatorRest_in_innerCreator5605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_arrayCreatorRest5616 = new BitSet(new long[]{0x7F80050200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_42_in_arrayCreatorRest5630 = new BitSet(new long[]{0x0000022000000000L});
    public static final BitSet FOLLOW_41_in_arrayCreatorRest5633 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_arrayCreatorRest5635 = new BitSet(new long[]{0x0000022000000000L});
    public static final BitSet FOLLOW_arrayInitializer_in_arrayCreatorRest5639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_arrayCreatorRest5653 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_arrayCreatorRest5655 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_arrayCreatorRest5658 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_arrayCreatorRest5660 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_arrayCreatorRest5662 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_arrayCreatorRest5667 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_arrayCreatorRest5669 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_arguments_in_classCreatorRest5692 = new BitSet(new long[]{0x0000002000000002L});
    public static final BitSet FOLLOW_classBody_in_classCreatorRest5694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation5707 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000001L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_explicitGenericInvocation5709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_nonWildcardTypeArguments5721 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_typeList_in_nonWildcardTypeArguments5723 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_nonWildcardTypeArguments5725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_explicitGenericInvocationSuffix5737 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_superSuffix_in_explicitGenericInvocationSuffix5739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_explicitGenericInvocationSuffix5746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_explicitGenericInvocationSuffix5748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_selector5760 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_selector5762 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_selector5765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_selector5774 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_112_in_selector5776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_selector5783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_selector5785 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_superSuffix_in_selector5787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_selector5794 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_selector5796 = new BitSet(new long[]{0x0000000200000010L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_selector5799 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_innerCreator_in_selector5803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_selector5810 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_selector5812 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_selector5814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_superSuffix5826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_superSuffix5837 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_superSuffix5839 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_superSuffix5842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_arguments5869 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000077L});
    public static final BitSet FOLLOW_expressionList_in_arguments5871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_arguments5874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_synpred145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_synpred10210 = new BitSet(new long[]{0x007FE00048000020L,0x0000000000000080L});
    public static final BitSet FOLLOW_classDeclaration_in_synpred10213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_synpred39855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_synpred40864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_synpred601430 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_type_in_synpred601432 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_synpred601434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_synpred601436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_synpred862036 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_synpred862038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_synpred1212773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_synpred1363133 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_synpred1363135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_synpred1383150 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_synpred1383152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_synpred1403167 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_synpred1403169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred1453338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_synpred1463347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_synpred1513466 = new BitSet(new long[]{0x7F88012202000FD0L,0x0003F300007DEA73L});
    public static final BitSet FOLLOW_statement_in_synpred1513468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_synpred1563569 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_block_in_synpred1563571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_catches_in_synpred1563573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_synpred1563575 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_block_in_synpred1563577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_synpred1573599 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_block_in_synpred1573601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_catches_in_synpred1573603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_synpred1743955 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_constantExpression_in_synpred1743957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_synpred1743959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_synpred1753974 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_enumConstantName_in_synpred1753976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_synpred1753978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forVarControl_in_synpred1774046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_synpred1824092 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_type_in_synpred1824095 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclarators_in_synpred1824097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignmentOperator_in_synpred1854273 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_synpred1854275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_synpred1964448 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_synpred1964450 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_synpred1964452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relationalOp_in_synpred2064809 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_shiftExpression_in_synpred2064811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftOp_in_synpred2104902 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_additiveExpression_in_synpred2104904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_synpred2124956 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_synpred2124958 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_synpred2124960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_synpred2245187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_synpred2285225 = new BitSet(new long[]{0x7F80000000000000L});
    public static final BitSet FOLLOW_primitiveType_in_synpred2285227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_synpred2285229 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_synpred2285231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred2295243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred2315279 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000001L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_synpred2315281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred2325291 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_112_in_synpred2325293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_synpred2325295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_synpred2335308 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_synpred2335310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_synpred2345315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_synpred2395364 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_synpred2395366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_synpred2405371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_synpred2465434 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_synpred2465436 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_synpred2465438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_synpred2625658 = new BitSet(new long[]{0x7F80010200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_synpred2625660 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_synpred2625662 = new BitSet(new long[]{0x0000000000000002L});

}