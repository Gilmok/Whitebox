class WhiteboxUtilsTests
{
   char REPLACEMENT;

   public static int getAccessLevel(String line)
   {
      String[] access = {"private", "protected", "public"};
      for(int i = 0; i < access.length; i++)
      {
         if(line.indexOf(access[i]) > -1)
            return i;
      }
      return 2;  
   }

   public static String[] tokenizeLine(String line)
   {
      return null;
   }

   public static String removeAccessModifiers(String line)
   {
      String newLine = line.trim();
      
      String[] mods = {"public","protected","private","static","final","synchronized","transient"};
      for(int i = 0; i < mods.length; i++)
      {
         newLine = newLine.replaceAll(mods[i], "");
      }
      
      return newLine.trim();
   }

   public static String removeNonCode(String line, boolean replaceChar)
   {
	   line = WhiteboxUtils.removeStrings(line, replaceChar);
	   line = WhiteboxUtils.removeComments(line, replaceChar);
	   return line;
   }

   public static String removeStrings(String line, boolean replaceChar)
   {
      String newLine = line;//.trim();
      String rtnVal = "";
      boolean inString = false;
      boolean isEscaped = false;
      for(int i = 0; i < newLine.length(); i++)
      {
         char c = newLine.charAt(i);
         switch(c)
         {
            case '\'':
            case '\"':
               if(isEscaped == false)
                  inString = !inString;
               isEscaped = false;
               if(replaceChar)
            	   rtnVal += REPLACEMENT;
               break;
            case '\\':
               isEscaped = !isEscaped;
               if(replaceChar)
            	   rtnVal += REPLACEMENT;
               break;
            default:
               if(!inString)
                  rtnVal += c;
               else if(replaceChar)
            	  rtnVal += REPLACEMENT;
               isEscaped = false;
               break;
         }
      }
      return rtnVal;
   }

   public static String removeComments(String line, boolean replaceChar)
   {
      String newLine = line;//.trim();
      String rtnVal = "";
      boolean inString = false;
      boolean isEscaped = false;
      boolean inComment = false;
      boolean commentStarted = false;
      boolean commentEnded = false;
      boolean writeChar = true;
      for(int i = 0; i < newLine.length(); i++)
      {
         char c = newLine.charAt(i);
         if(c == '\\')
         {
            isEscaped = !isEscaped;
            continue;
         }
         else
            isEscaped = false;
         switch(c)
         {
            case '\'':
            case '\"':
               if(isEscaped == false)
                  inString = !inString;
               
               break;
            case '/':
               if(inString)
                  break;
               if(commentStarted)
               {
                  return(rtnVal.substring(0, rtnVal.length() - 1));
               }
               else if(commentEnded)
               {
                  inComment = false;
                  commentEnded = false;
                  commentStarted = false;
                  writeChar = false;
               }
               else
               {
                  commentStarted = true;
                  
               }
               break;
            case '*':
               if(inString)
                  break;
               if(commentStarted)
               {
            	  if(replaceChar == false)
            		  rtnVal = rtnVal.substring(0, rtnVal.length() - 1);
                  inComment = true;
                  commentStarted = false;
               }
               else
                  commentEnded = true;
               break;
            default:
               commentStarted = false;
               commentEnded = false;
         }
         if(!inComment && writeChar)
            rtnVal += c;
         else
        	rtnVal += REPLACEMENT;
         writeChar = true;      
         
      }
      String test1 = "/* */";
      String test2 = "//";
      //String test3;
      String test4 = /*""*/ "a";
      String test5 = "x"; //gfggfgj
      return rtnVal;
   }

   public static String endTailComment(String in)
   {
	   return in.substring(in.indexOf("*/") + 2);
   }

   public static String getWbtPattern(String filename)
   {
      String rtnVal = "";
      BufferedReader br;
      try
      {
         FileReader fr = new FileReader(filename);
         br = new BufferedReader(fr);
         rtnVal = br.readLine();
         br.close();
         
         //eliminate the //tests-from:
         rtnVal = rtnVal.substring(13, rtnVal.length());
      }
      catch(IOException ex)
      {
         ex.printStackTrace();
      }
      return rtnVal;
   }

   public static String[] loadFile(String fileName)
   {
      String[] rtnVal = null;
      BufferedReader br;
      try
      {
         FileReader fr = new FileReader(fileName);
         br = new BufferedReader(fr);
         LinkedList strList = new LinkedList();
         String s;
         while(true)
         {
            s = br.readLine();
            if(s != null)
            {
               strList.add(s);
            }
            else
               break;
         }
         rtnVal = new String[strList.size()];
         for(int i = 0; i < strList.size(); i++)
            rtnVal[i] = (String) strList.get(i);
         br.close();
      }
      catch(IOException ex)
      {
         ex.printStackTrace();
      }
      return rtnVal;
   }

   public static boolean isInString(int pos, String block)
   {
      boolean rtnVal = false;
      boolean ignore;
      for(int i = 0; i < pos; i++)
      {
         char c = block.charAt(i);
         if(c == '\\')
         {
            ignore = true;
            continue;
         }
         else
            ignore = false;
         if((c == '\"' || c == '\'') && ignore == false)
            rtnVal = !rtnVal;
      }
      return rtnVal;
   }

   public static int findClosingParen(String in, int startPos)
   {
	   char c;
	   int depth = 1;
	   for(int i = startPos; i < in.length(); i++)
	   {
		   c = in.charAt(i);
		   if(c == '(')
			   depth++;
		   else if(c == ')')
		   {
			   depth--;
			   if(depth == 0)
				   return i;
		   }
	   }
	   return -1;
   }

   public void getAccessLevelTestMeth1_0()
   {
      int rtnVal = getAccessLevel(0);
      assert.areEqual(rtnVal,"");
   }
   public void getAccessLevelTestMeth1_1()
   {
      int rtnVal = getAccessLevel(0);
      assert.areEqual(rtnVal,"");
   }
   public void tokenizeLineTestMeth1_0()
   {
      String[] rtnVal = tokenizeLine(0);
      assert.areEqual(rtnVal,"");
   }
   public void removeAccessModifiersTestMeth1_0()
   {
      String rtnVal = removeAccessModifiers(0);
      assert.areEqual(rtnVal,"");
   }
   public void removeNonCodeTestMeth1_0()
   {
      String rtnVal = removeNonCode(01);
      assert.areEqual(rtnVal,"");
   }
   public void removeStringsTestMeth1_0()
   {
      String rtnVal = removeStrings(01);
      assert.areEqual(rtnVal,"");
   }
   public void removeStringsTestMeth1_1()
   {
      String rtnVal = removeStrings(01);
      assert.areEqual(rtnVal,"");
   }
   public void removeStringsTestMeth1_2()
   {
      String rtnVal = removeStrings(01);
      assert.areEqual(rtnVal,"");
   }
   public void removeStringsTestMeth1_3()
   {
      String rtnVal = removeStrings(01);
      assert.areEqual(rtnVal,"");
   }
   public void removeStringsTestMeth1_4()
   {
      String rtnVal = removeStrings(01);
      assert.areEqual(rtnVal,"");
   }
   public void removeCommentsTestMeth1_0()
   {
   }
   public void removeCommentsTestMeth1_1()
   {
   }
   public void removeCommentsTestMeth1_2()
   {
   }
   public void removeCommentsTestMeth1_3()
   {
   }
   public void removeCommentsTestMeth1_4()
   {
   }
   public void removeCommentsTestMeth1_5()
   {
   }
   public void removeCommentsTestMeth1_6()
   {
   }
   public void removeCommentsTestMeth1_7()
   {
   }
   public void removeCommentsTestMeth1_8()
   {
   }
   public void removeCommentsTestMeth1_9()
   {
   }
   public void removeCommentsTestMeth1_10()
   {
   }
   public void removeCommentsTestMeth1_11()
   {
   }
   public void removeCommentsTestMeth1_12()
   {
   }
   public void removeCommentsTestMeth1_13()
   {
   }
   public void removeCommentsTestMeth1_14()
   {
   }
   public void removeCommentsTestMeth1_15()
   {
   }
   public void removeCommentsTestMeth1_16()
   {
   }
   public void removeCommentsTestMeth1_17()
   {
   }
   public void removeCommentsTestMeth1_18()
   {
   }
   public void removeCommentsTestMeth1_19()
   {
   }
   public void endTailCommentTestMeth1_0()
   {
      String rtnVal = endTailComment(0);
      assert.areEqual(rtnVal,"");
   }
   public void getWbtPatternTestMeth1_0()
   {
      String rtnVal = getWbtPattern(0);
      assert.areEqual(rtnVal,"");
   }
   public void loadFileTestMeth1_0()
   {
      String[] rtnVal = loadFile(0);
      assert.areEqual(rtnVal,"");
   }
   public void loadFileTestMeth1_1()
   {
      String[] rtnVal = loadFile(0);
      assert.areEqual(rtnVal,"");
   }
   public void isInStringTestMeth1_0()
   {
      boolean rtnVal = isInString(01);
      assert.areEqual(rtnVal,"");
   }
   public void isInStringTestMeth1_1()
   {
      boolean rtnVal = isInString(01);
      assert.areEqual(rtnVal,"");
   }
   public void isInStringTestMeth1_2()
   {
      boolean rtnVal = isInString(01);
      assert.areEqual(rtnVal,"");
   }
   public void isInStringTestMeth1_3()
   {
      boolean rtnVal = isInString(01);
      assert.areEqual(rtnVal,"");
   }
   public void findClosingParenTestMeth1_0()
   {
      int rtnVal = findClosingParen(01);
      assert.areEqual(rtnVal,"");
   }
   public void findClosingParenTestMeth1_1()
   {
      int rtnVal = findClosingParen(01);
      assert.areEqual(rtnVal,"");
   }
}
class AssertionFailureExceptionTests
{

   public AssertionFailureExceptionTests(Object a, Object e)
   {
      
   }

   public void AssertionFailureExceptionTestCtor1_0()
   {
   }
}
class AssertTests
{

   public static void areEqual(String actual, String expected) throws AssertionFailureException
   {
      if(!actual.equals(expected))
         throw new AssertionFailureException(actual, expected);
   }

   public static void areEqual(int actual, int expected) throws AssertionFailureException
   {
      if(actual != expected)
         throw new AssertionFailureException(new Integer(actual), new Integer(expected));
   }

   public static void areEqual(double actual, double expected) throws AssertionFailureException
   {
      if(actual != expected)
         throw new AssertionFailureException(new Double(actual), new Double(expected));
   }

   public void areEqualTestMeth1_0()
   {
   }
   public void areEqualTestMeth1_1()
   {
   }
   public void areEqualTestMeth2_0()
   {
   }
   public void areEqualTestMeth2_1()
   {
   }
   public void areEqualTestMeth3_0()
   {
   }
   public void areEqualTestMeth3_1()
   {
   }
}

